diff --git a/EVENTMIX/AliMixEventCutObj.cxx b/EVENTMIX/AliMixEventCutObj.cxx
index 578616a..b1c023c 100644
--- a/EVENTMIX/AliMixEventCutObj.cxx
+++ b/EVENTMIX/AliMixEventCutObj.cxx
@@ -14,6 +14,8 @@
 #include "AliMultiplicity.h"
 #include "AliAODVertex.h"
 #include "AliEventplane.h"
+#include "AliMultSelection.h"
+#include <iostream>
 
 #include "AliMixEventCutObj.h"
 
@@ -251,9 +253,18 @@ Double_t AliMixEventCutObj::GetValue(AliAODEvent *ev)
          return ev->GetNumberOfV0s();
       case kCentrality:
       {
-         AliCentrality *c = ev->GetCentrality();
-         if (!c) AliFatal("esd->GetCentrality() is null");
-         return c->GetCentralityPercentile(fCutOpt.Data());
+         //  AliCentrality *c = ev->GetCentrality();
+         //  if (!c) AliFatal("esd->GetCentrality() is null");
+         //  return c->GetCentralityPercentile(fCutOpt.Data());
+         
+         // New centrality framework
+         AliMultSelection *multSelection = (AliMultSelection * ) ev->FindListObject("MultSelection");
+         if(multSelection)
+         {
+            Double_t centralityFromV0 = multSelection->GetMultiplicityPercentile("V0M", false);
+            return centralityFromV0;;
+         }
+         else return -99999;
       }
       case kEventPlane:
       {
diff --git a/EVENTMIX/CMakeLists.txt b/EVENTMIX/CMakeLists.txt
index e7d583a..f7ff13b 100644
--- a/EVENTMIX/CMakeLists.txt
+++ b/EVENTMIX/CMakeLists.txt
@@ -22,6 +22,7 @@ include_directories(${AliPhysics_SOURCE_DIR}/EVENTMIX)
 
 # Additional include folders in alphabetical order except ROOT
 include_directories(${ROOT_INCLUDE_DIRS}
+                    ${AliPhysics_SOURCE_DIR}/OADB/COMMON/MULTIPLICITY
                    )
 
 # Sources
@@ -47,6 +48,9 @@ generate_dictionary("${MODULE}" "${MODULE}LinkDef.h" "${HDRS}" "${incdirs}")
 set(LIBDEPS ANALYSIS ANALYSISalice AOD ESD STEERBase Core Gpad Hist RIO Tree)
 generate_rootmap("${MODULE}" "${LIBDEPS}" "${CMAKE_CURRENT_SOURCE_DIR}/${MODULE}LinkDef.h")
 
+# Generate a PARfile target for this library
+add_target_parfile(${MODULE} "${SRCS}" "${HDRS}" "${MODULE}LinkDef.h" "${LIBDEPS}" "../OADB/COMMON/MULTIPLICITY") 
+
 # Add a library to the project using the specified source files
 add_library_tested(${MODULE} SHARED ${SRCS} G__${MODULE}.cxx)
 target_link_libraries(${MODULE} ANALYSIS ANALYSISalice AOD ESD STEERBase Core Gpad Hist RIO Tree)
@@ -54,6 +58,9 @@ target_link_libraries(${MODULE} ANALYSIS ANALYSISalice AOD ESD STEERBase Core Gp
 # Additional compilation flags
 set_target_properties(${MODULE} PROPERTIES COMPILE_FLAGS "")
 
+# Public include folders that will be propagated to the dependecies
+target_include_directories(${MODULE} PUBLIC ${incdirs})
+
 # Linking the library
 target_link_libraries(${MODULE} ${LIBDEPS})
 
diff --git a/PWG/muon/AliAnalysisMuMuBase.cxx b/PWG/muon/AliAnalysisMuMuBase.cxx
index b48b873..381c95b 100644
--- a/PWG/muon/AliAnalysisMuMuBase.cxx
+++ b/PWG/muon/AliAnalysisMuMuBase.cxx
@@ -46,6 +46,7 @@
 #include "AliAnalysisMuMuBinning.h"
 #include "TH1F.h"
 #include "TH2F.h"
+#include "THnSparse.h"
 #include "TProfile.h"
 #include "TRegexp.h"
 #include "AliVEvent.h"
@@ -78,14 +79,14 @@ TString AliAnalysisMuMuBase::BuildPath(const char* eventSelection, const char* t
                                        const char* centrality, const char* cut) const
 {
   TString path;
-  
+
   path.Form("/%s/%s/%s/",eventSelection,triggerClassName,centrality);
   if ( strlen(cut) > 0 )
   {
     path += cut;
     path += "/";
   }
-  
+
   return path;
 }
 
@@ -94,11 +95,11 @@ TString AliAnalysisMuMuBase::BuildMCPath(const char* eventSelection, const char*
                                           const char* centrality, const char* cut) const
 {
   TString path = BuildPath(eventSelection,triggerClassName,centrality,cut);
-  
+
   TString mcPath;
-  
+
   mcPath.Form("/%s%s",MCInputPrefix(),path.Data());
-  
+
   return mcPath;
 }
 
@@ -114,12 +115,12 @@ AliAnalysisMuMuBase::CreateEventHistos(UInt_t dataType,
   /** Append histograms at the event level. Depending on dataType the created histograms
    * are for real data only, MC data only, or both
    */
-  
+
   if ( IsHistogramDisabled(hname) ) return;
-  
+
   TObjArray pathNames;
   pathNames.SetOwner(kTRUE);
-  
+
   if ( dataType & kHistoForData )
   {
     pathNames.Add(new TObjString(Form("/%s",what)));
@@ -128,7 +129,7 @@ AliAnalysisMuMuBase::CreateEventHistos(UInt_t dataType,
   {
     pathNames.Add(new TObjString(Form("/%s/%s",MCInputPrefix(),what)));
   }
-  
+
   CreateHistos(pathNames,hname,htitle,nbinsx,xmin,xmax,nbinsy,ymin,ymax);
 }
 
@@ -145,9 +146,9 @@ AliAnalysisMuMuBase::CreateEventHistos(UInt_t dataType,
   /** Append histograms at the event level. Depending on dataType the created histograms
    * are for real data only, MC data only, or both
    */
-  
+
   if ( IsHistogramDisabled(hname) ) return;
-  
+
   TObjArray pathNames;
   pathNames.SetOwner(kTRUE);
 
@@ -159,7 +160,7 @@ AliAnalysisMuMuBase::CreateEventHistos(UInt_t dataType,
   {
     pathNames.Add(new TObjString(Form("/%s/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName,centrality)));
   }
-  
+
   CreateHistos(pathNames,hname,htitle,nbinsx,xmin,xmax,nbinsy,ymin,ymax);
 }
 
@@ -171,7 +172,7 @@ AliAnalysisMuMuBase::CreateHistos(const TObjArray& paths,
                                   Int_t nbinsy, Double_t ymin, Double_t ymax) const
 {
   /// Create multiple copies of histogram hname, one per path
-  
+
   if ( IsHistogramDisabled(hname) ) return;
 
   TIter next(&paths);
@@ -180,7 +181,7 @@ AliAnalysisMuMuBase::CreateHistos(const TObjArray& paths,
   while ( ( pathName = static_cast<TObjString*>(next()) ) )
   {
     TH1* h(0x0);
-    
+
     if ( nbinsy > 0 )
     {
       h = new TH2F(hname,htitle,nbinsx,xmin,xmax,nbinsy,ymin,ymax);
@@ -194,13 +195,13 @@ AliAnalysisMuMuBase::CreateHistos(const TObjArray& paths,
     else
     {
       h = new TH1F(hname,htitle,nbinsx,xmin,xmax);
-      
+
       if ( nbinsy < -1 )
       {
         h->Sumw2();
       }
     }
-    
+
     HistogramCollection()->Adopt(pathName->String().Data(),h);
   }
 }
@@ -213,7 +214,7 @@ void AliAnalysisMuMuBase::CreateSemaphoreHistogram(const char* eventSelection,
   /// Create the semaphore histogram, a dummy histogram used
   /// to check whether or not the DefineHistogramCollection has already been done `
   /// for a tuple (eventSelection,triggerClassName,centrality)
-  
+
   CreateEventHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,ClassName(),ClassName(),1,0.0,1.0);
 }
 
@@ -230,16 +231,16 @@ AliAnalysisMuMuBase::CreateTrackHistos(UInt_t dataType,
   /// Create n copies of an histogram (with name=hname, title=htitle, etc..)
   /// where n = # of track cut combinations defined
   /// see also CreateHistos
-  
-  
+
+
   if ( IsHistogramDisabled(hname) ) return;
-  
+
   TObjArray pathNames;
   pathNames.SetOwner(kTRUE);
-  
+
   TIter nextCutCombination(CutRegistry()->GetCutCombinations(AliAnalysisMuMuCutElement::kTrack));
   AliAnalysisMuMuCutCombination* cutCombination;
-  
+
   while ( ( cutCombination = static_cast<AliAnalysisMuMuCutCombination*>(nextCutCombination())) )
   {
     if ( dataType & kHistoForData )
@@ -250,14 +251,60 @@ AliAnalysisMuMuBase::CreateTrackHistos(UInt_t dataType,
     {
       pathNames.Add(new TObjString(Form("/%s/%s/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName,centrality,cutCombination->GetName())));
     }
-    
+
   }
-  
+
   CreateHistos(pathNames,hname,htitle,nbinsx,xmin,xmax,nbinsy,ymin,ymax);
 }
 
 //_____________________________________________________________________________
 void
+AliAnalysisMuMuBase::CreateTHnSparse(UInt_t dataType,
+                                      const char* eventSelection,
+                                      const char* triggerClassName,
+                                      const char* centrality,
+                                      const char* hname, const char* htitle,
+                                      Int_t nDim, Int_t* nbinsx, Double_t* xmin, Double_t* xmax) const
+{
+  /// Create n copies of an histogram (with name=hname, title=htitle, etc..)
+  /// where n = # of track *pair* cut combinations defined
+  /// see also CreateHistos
+
+  if ( IsHistogramDisabled(hname) ) return;
+
+  TObjArray pathNames;
+  pathNames.SetOwner(kTRUE);
+
+  TIter nextCutCombination(CutRegistry()->GetCutCombinations(AliAnalysisMuMuCutElement::kTrackPair));
+  AliAnalysisMuMuCutCombination* cutCombination;
+
+  while ( ( cutCombination = static_cast<AliAnalysisMuMuCutCombination*>(nextCutCombination())) )
+  {
+    if ( dataType & kHistoForData )
+    {
+      pathNames.Add(new TObjString(Form("/%s/%s/%s/%s",eventSelection,triggerClassName,centrality,cutCombination->GetName())));
+    }
+    if ( ( dataType & kHistoForMCInput ) && HasMC() )
+    {
+      pathNames.Add(new TObjString(Form("/%s/%s/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName,centrality,cutCombination->GetName())));
+    }
+  }
+
+  TIter next(&pathNames);
+  TObjString* pathName;
+
+  while ( ( pathName = static_cast<TObjString*>(next()) ) )
+  {
+    THnSparse* h(0x0);
+    h = new THnSparseT<TArrayF>(hname,htitle,2,nbinsx,xmin,xmax);
+    h->Sumw2();
+
+    HistogramCollection()->Adopt(pathName->String().Data(),h);
+  }
+}
+
+//_____________________________________________________________________________
+void
 AliAnalysisMuMuBase::CreatePairHistos(UInt_t dataType,
                                       const char* eventSelection,
                                       const char* triggerClassName,
@@ -271,13 +318,13 @@ AliAnalysisMuMuBase::CreatePairHistos(UInt_t dataType,
   /// see also CreateHistos
 
   if ( IsHistogramDisabled(hname) ) return;
-  
+
   TObjArray pathNames;
   pathNames.SetOwner(kTRUE);
-  
+
   TIter nextCutCombination(CutRegistry()->GetCutCombinations(AliAnalysisMuMuCutElement::kTrackPair));
   AliAnalysisMuMuCutCombination* cutCombination;
-  
+
   while ( ( cutCombination = static_cast<AliAnalysisMuMuCutCombination*>(nextCutCombination())) )
   {
     if ( dataType & kHistoForData )
@@ -289,7 +336,7 @@ AliAnalysisMuMuBase::CreatePairHistos(UInt_t dataType,
       pathNames.Add(new TObjString(Form("/%s/%s/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName,centrality,cutCombination->GetName())));
     }
   }
-  
+
   CreateHistos(pathNames,hname,htitle,nbinsx,xmin,xmax,nbinsy,ymin,ymax);
 }
 
@@ -297,20 +344,20 @@ AliAnalysisMuMuBase::CreatePairHistos(UInt_t dataType,
 void AliAnalysisMuMuBase::DisableHistograms(const char* pattern)
 {
   /// Disable the histogramming of all the histograms matching the pattern
-  
+
   TString spattern(pattern);
   if (spattern=="*")
   {
     delete fHistogramToDisable;
     fHistogramToDisable = 0x0;
   }
-  
+
   if (!fHistogramToDisable)
   {
     fHistogramToDisable = new TList;
     fHistogramToDisable->SetOwner(kTRUE);
   }
-  
+
   fHistogramToDisable->Add(new TObjString(spattern));
 }
 
@@ -321,7 +368,7 @@ Bool_t AliAnalysisMuMuBase::ExistSemaphoreHistogram(const char* eventSelection,
 {
   /// Test for the existence of the semaphore histogram
   /// @see CreateSemaphoreHistogram
-  
+
   return ( HistogramCollection()->Histo(Form("/%s/%s/%s/%s",eventSelection,triggerClassName,centrality,ClassName())) != 0x0 );
 }
 
@@ -330,7 +377,7 @@ Int_t AliAnalysisMuMuBase::GetNbins(Double_t xmin, Double_t xmax, Double_t xstep
 {
   /// Compute number of bins to get a given step between each values in the xmin,xmax range
   if ( TMath::AreEqualRel(xstep,0.0,1E-9) ) return 1;
-  
+
   return TMath::Nint(TMath::Abs((xmax-xmin)/xstep));
 }
 
@@ -366,7 +413,7 @@ TH1* AliAnalysisMuMuBase::Histo(const char* eventSelection,
                                 const char* histoname)
 {
   /// Get one histo back
-  
+
   return fHistogramCollection ? fHistogramCollection->Histo(Form("/%s/%s/%s/%s",eventSelection,triggerClassName,cent,what),histoname) : 0x0;
 }
 
@@ -375,7 +422,7 @@ TProfile* AliAnalysisMuMuBase::Prof(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s",eventSelection),histoname)) : 0x0;
 }
 
@@ -385,7 +432,7 @@ TProfile* AliAnalysisMuMuBase::Prof(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s/%s",eventSelection,triggerClassName),histoname)) : 0x0;
 }
 
@@ -396,7 +443,7 @@ TProfile* AliAnalysisMuMuBase::Prof(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s/%s/%s",eventSelection,triggerClassName,cent),histoname)) : 0x0;
 }
 
@@ -408,7 +455,7 @@ TProfile* AliAnalysisMuMuBase::Prof(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s/%s/%s/%s",eventSelection,triggerClassName,cent,what),histoname)) : 0x0;
 }
 
@@ -430,7 +477,7 @@ Bool_t AliAnalysisMuMuBase::IsHistogramDisabled(const char* hname) const
 {
   /// Whether or not a given histogram (identified by its name)
   /// is disabled or not
-  
+
   if ( !fHistogramToDisable )
   {
     return kFALSE;
@@ -438,7 +485,7 @@ Bool_t AliAnalysisMuMuBase::IsHistogramDisabled(const char* hname) const
   TString shname(hname);
   TIter next(fHistogramToDisable);
   TObjString* str(0x0);
-  
+
   while ( ( str = static_cast<TObjString*>(next()) ) )
   {
     if ( shname.Contains(TRegexp(str->String()) ) )
@@ -453,7 +500,7 @@ Bool_t AliAnalysisMuMuBase::IsHistogramDisabled(const char* hname) const
 Bool_t AliAnalysisMuMuBase::IsHistogrammingDisabled() const
 {
   /// Whether or not *all* histograms are disabled
-  
+
   if ( fHistogramToDisable && fHistogramToDisable->GetEntries()==1 )
   {
     TObjString* r = static_cast<TObjString*>(fHistogramToDisable->First());
@@ -497,7 +544,7 @@ TH1* AliAnalysisMuMuBase::MCHisto(const char* eventSelection,
                                   const char* histoname)
 {
   /// Get one histo back
-  
+
   return fHistogramCollection ? fHistogramCollection->Histo(Form("/%s/%s/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName,cent,what),histoname) : 0x0;
 }
 
@@ -506,7 +553,7 @@ TProfile* AliAnalysisMuMuBase::MCProf(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s/%s",MCInputPrefix(),eventSelection),histoname)) : 0x0;
 }
 
@@ -516,7 +563,7 @@ TProfile* AliAnalysisMuMuBase::MCProf(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName),histoname)) : 0x0;
 }
 
@@ -527,7 +574,7 @@ TProfile* AliAnalysisMuMuBase::MCProf(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName,cent),histoname)) : 0x0;
 }
 
@@ -539,7 +586,7 @@ TProfile* AliAnalysisMuMuBase::MCProf(const char* eventSelection,
                                     const char* histoname)
 {
 	/// Get one histo profile back
-	
+
 	return fHistogramCollection ? static_cast<TProfile*>(fHistogramCollection->GetObject(Form("/%s/%s/%s/%s/%s",MCInputPrefix(),eventSelection,triggerClassName,cent,what),histoname)) : 0x0;
 }
 
@@ -551,7 +598,7 @@ void AliAnalysisMuMuBase::SetEvent(AliVEvent* event, AliMCEvent* mcEvent)
   /// append things to the event. Please DO NOT alter the original content,
   /// only add to it. Unless of course you want to shoot yourself in the
   /// foot...
-  
+
   fEvent = event;
   fMCEvent = mcEvent;
 }
diff --git a/PWG/muon/AliAnalysisMuMuBase.h b/PWG/muon/AliAnalysisMuMuBase.h
index 50b4dfb..534d824 100644
--- a/PWG/muon/AliAnalysisMuMuBase.h
+++ b/PWG/muon/AliAnalysisMuMuBase.h
@@ -53,7 +53,8 @@ public:
   virtual void FillHistosForPair(const char* /*eventSelection*/,const char* /*triggerClassName*/,const char* /*centrality*/,
                                  const char* /*pairCutName*/,
                                  const AliVParticle& /*part1*/,
-                                 const AliVParticle& /*part2*/) {}
+                                 const AliVParticle& /*part2*/,
+                                 const Bool_t /*IsMixedHisto*/) {}
   
   virtual void Init(AliCounterCollection& cc,
                     AliMergeableCollection& hc,
@@ -148,6 +149,13 @@ protected:
                         Int_t nbinsx, Double_t xmin, Double_t xmax,
                         Int_t nbinsy=-1, Double_t ymin=0.0, Double_t ymax=0.0) const;
 
+  void CreateTHnSparse(UInt_t dataType,
+                        const char* eventSelection,
+                        const char* triggerClassName,
+                        const char* centrality,
+                        const char* hname, const char* htitle,
+                        Int_t nDim, Int_t* nbinsx, Double_t* xmin, Double_t* xmax) const;
+
   Bool_t ExistSemaphoreHistogram(const char* eventSelection,
                                  const char* triggerClassName,
                                  const char* centrality) const;
diff --git a/PWG/muon/AliAnalysisMuMuEventCutter.cxx b/PWG/muon/AliAnalysisMuMuEventCutter.cxx
index e934674..60a367a 100644
--- a/PWG/muon/AliAnalysisMuMuEventCutter.cxx
+++ b/PWG/muon/AliAnalysisMuMuEventCutter.cxx
@@ -197,10 +197,16 @@ Bool_t AliAnalysisMuMuEventCutter::IsPhysicsSelectedMUL(const AliInputEventHandl
   return const_cast<AliInputEventHandler&>(eventHandler).IsEventSelected() & AliVEvent::kMuonUnlikeLowPt7;
 }
 
-Bool_t AliAnalysisMuMuEventCutter::IsPhysicsSelectedMUSPB(const AliInputEventHandler& eventHandler) const
+Bool_t AliAnalysisMuMuEventCutter::IsPhysicsSelectedMULORMLL(const AliInputEventHandler& eventHandler) const
 {
   /// Whether or not the event is physics selected
-  return const_cast<AliInputEventHandler&>(eventHandler).IsEventSelected() & AliVEvent::kMUSPB;
+  return const_cast<AliInputEventHandler&>(eventHandler).IsEventSelected() & ( AliVEvent::kMuonUnlikeLowPt7 | AliVEvent::kMuonLikeLowPt7 );
+}
+
+Bool_t AliAnalysisMuMuEventCutter::IsPhysicsSelectedINT7inMUON(const AliInputEventHandler& eventHandler) const
+{
+  /// Whether or not the event is physics selected
+  return const_cast<AliInputEventHandler&>(eventHandler).IsEventSelected() & AliVEvent::kINT7inMUON;
 }
 
 Bool_t AliAnalysisMuMuEventCutter::IsPhysicsSelectedMSL(const AliInputEventHandler& eventHandler) const
diff --git a/PWG/muon/AliAnalysisMuMuEventCutter.h b/PWG/muon/AliAnalysisMuMuEventCutter.h
index 8284023..496b648 100644
--- a/PWG/muon/AliAnalysisMuMuEventCutter.h
+++ b/PWG/muon/AliAnalysisMuMuEventCutter.h
@@ -7,7 +7,9 @@
  *
  * \brief Various event cuts used in AliAnalysisTaskMuMu
  *
- * \author L. Aphecetche and J. Martin Blanco
+ * \author L. Aphecetche
+ * \author J. Martin Blanco
+ * \author B. Audurier
  *
  */
 
@@ -51,8 +53,11 @@ public:
   Bool_t IsPhysicsSelectedMUL(const AliInputEventHandler& eventHandler) const;
   void NameOfIsPhysicsSelectedMUL(TString& name) const { name="PSMUL"; }
 
-  Bool_t IsPhysicsSelectedMUSPB(const AliInputEventHandler& eventHandler) const;
-  void NameOfIsPhysicsSelectedMUSPB(TString& name) const { name="PSMUSPB"; }
+  Bool_t IsPhysicsSelectedMULORMLL(const AliInputEventHandler& eventHandler) const;
+  void NameOfIsPhysicsSelectedMULORMLL(TString& name) const { name="PSMULORMLL"; }
+
+  Bool_t IsPhysicsSelectedINT7inMUON(const AliInputEventHandler& eventHandler) const;
+  void NameOfIsPhysicsSelectedINT7inMUON(TString& name) const { name="PSINT7inMUON"; }
 
   Bool_t IsPhysicsSelectedMSL(const AliInputEventHandler& eventHandler) const;
   void NameOfIsPhysicsSelectedMSL(TString& name) const { name="PSMSL"; }
diff --git a/PWG/muon/AliAnalysisMuMuMinv.cxx b/PWG/muon/AliAnalysisMuMuMinv.cxx
index 1bd4427..0df2e13 100644
--- a/PWG/muon/AliAnalysisMuMuMinv.cxx
+++ b/PWG/muon/AliAnalysisMuMuMinv.cxx
@@ -21,6 +21,7 @@
 #include "TObjArray.h"
 #include "AliAnalysisMuMuBinning.h"
 #include "TString.h"
+#include "THnSparse.h"
 #include "TLorentzVector.h"
 #include "TString.h"
 #include "AliMCEvent.h"
@@ -34,7 +35,7 @@ ClassImp(AliAnalysisMuMuMinv)
 //_____________________________________________________________________________
 AliAnalysisMuMuMinv::AliAnalysisMuMuMinv(TH2* accEffHisto, Int_t systLevel)
 : AliAnalysisMuMuBase(),
-fcomputeMeanPt(kFALSE),
+fComputeMeanPt(kFALSE),
 fWeightMuon(kFALSE),
 fAccEffHisto(0x0),
 fMinvBinSeparator("+"),
@@ -76,10 +77,7 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
   /// Define the histograms this analysis will use
 
   // Check if histo is not already here
-  if ( ExistSemaphoreHistogram(eventSelection,triggerClassName,centrality) )
-  {
-    return;
-  }
+  if ( ExistSemaphoreHistogram(eventSelection,triggerClassName,centrality) ) return;
 
   CreateSemaphoreHistogram(eventSelection,triggerClassName,centrality);
 
@@ -89,36 +87,58 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
   // mass range
   Double_t minvMin = fMinvMin;
   Double_t minvMax = fMinvMax;
-  Int_t nMinvBins = GetNbins(minvMin,minvMax,fMinvBinSize);
+  Int_t nMinvBins  = GetNbins(minvMin,minvMax,fMinvBinSize);
 
   Int_t nMCMinvBins = GetNbins(minvMin,minvMax,0.1);
 
   // Rapidity range
   Double_t rapidityMin = -5;
   Double_t rapidityMax = -2;
-  Int_t nbinsRapidity = GetNbins(rapidityMin,rapidityMax,0.05);
+  Int_t nbinsRapidity  = GetNbins(rapidityMin,rapidityMax,0.05);
 
   // eta range
   Double_t etaMin = -5;
   Double_t etaMax = -2;
-  Int_t nbinsEta = GetNbins(etaMin,etaMax,0.05);
+  Int_t nbinsEta  = GetNbins(etaMin,etaMax,0.05);
 
- //Multiplicity range
+  // Multiplicity range
   Double_t multMin = -0.5;
   Double_t multMax = 500.5;
-  Int_t nbinsMult = GetNbins(multMin,multMax,1.);
+  Int_t nbinsMult  = GetNbins(multMin,multMax,1.);
 
 
   // Reconstructed pair distribution Histo
-  CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"Pt","#mu+#mu- Pt distribution",200,0,20,-2);
-
-  CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"Y","#mu+#mu- Y distribution",nbinsRapidity,rapidityMin,rapidityMax,-2);
-
-  CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"Eta","#mu+#mu- Eta distribution",nbinsEta,etaMin,etaMax);
+  Int_t nBinspT[2]={200,nMinvBins};
+  Double_t xminpT[2]={0.,minvMin};
+  Double_t xMaxpT[2]={20.,minvMax};
+  CreateTHnSparse(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"Pt","#mu+#mu- Pt distribution",2,nBinspT,xminpT,xMaxpT);
+  CreateTHnSparse(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"PtPP","#mu+#mu+ Pt distribution",2,nBinspT,xminpT,xMaxpT);
+  CreateTHnSparse(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"PtMM","#mu-#mu- Pt distribution",2,nBinspT,xminpT,xMaxpT);
+
+  CreateTHnSparse(kHistoForData,eventSelection,triggerClassName,centrality,"PtMix","#mu+#mu- mixed Pt distribution",2,nBinspT,xminpT,xMaxpT);
+  CreateTHnSparse(kHistoForData,eventSelection,triggerClassName,centrality,"PtMixPP","#mu+#mu+ mixed Pt distribution",2,nBinspT,xminpT,xMaxpT);
+  CreateTHnSparse(kHistoForData,eventSelection,triggerClassName,centrality,"PtMixMM","#mu_#mu- mixed Pt distribution",2,nBinspT,xminpT,xMaxpT);
+
+
+  Int_t nBinsy[2]={nbinsRapidity,nMinvBins};
+  Double_t xminy[2]={rapidityMin,minvMin};
+  Double_t xMaxy[2]={rapidityMax,minvMax};
+  CreateTHnSparse(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"Y","#mu+#mu- Y distribution",2,nBinsy,xminy,xMaxy);
+  CreateTHnSparse(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"YPP","#mu+#mu+ Y distribution",2,nBinsy,xminy,xMaxy);
+  CreateTHnSparse(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"YMM","#mu-#mu- Y distribution",2,nBinsy,xminy,xMaxy);
+
+  CreateTHnSparse(kHistoForData,eventSelection,triggerClassName,centrality,"YMix","#mu+#mu- mixed Y distribution",2,nBinsy,xminy,xMaxy);
+  CreateTHnSparse(kHistoForData,eventSelection,triggerClassName,centrality,"YMixPP","#mu+#mu+ mixed Y distribution",2,nBinsy,xminy,xMaxy);
+  CreateTHnSparse(kHistoForData,eventSelection,triggerClassName,centrality,"YMixMM","#mu-#mu- mixed Y distribution",2,nBinsy,xminy,xMaxy);
+
+  Int_t nBinsEta[2]={nbinsEta,nMinvBins};
+  Double_t xminEta[2]={etaMin,minvMin};
+  Double_t xMaxEta[2]={etaMax,minvMax};
+  CreateTHnSparse(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"Eta","#mu+#mu- Eta distribution",2,nBinsEta,xminEta,xMaxEta);
+  CreateTHnSparse(kHistoForData,eventSelection,triggerClassName,centrality,"EtaMix","#mu+#mu- mixed Eta distribution",2,nBinsEta,xminEta,xMaxEta);
 
   CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,"PtPaireVsPtTrack","single #mu Pt distribution vs #mu+#mu- Pt distribution ",200,0,20,200,0,20);
 
-
   // Histos for pure MC
   CreateEventHistos(kHistoForMCInput,eventSelection,triggerClassName,centrality,"Pt","MCINPUT #mu+#mu- Pt distribution",200,0,20,-2);
 
@@ -147,8 +167,16 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
 
   // Minv Histos for each bin
   while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(next()) ) ){
+
     // Histos name
-    TString minvName(GetMinvHistoName(*r,kFALSE));
+    TString minvName(GetMinvHistoName(*r,kFALSE,0,kFALSE));
+    TString minvNamePlus(GetMinvHistoName(*r,kFALSE,2,kFALSE));
+    TString minvNameMinus(GetMinvHistoName(*r,kFALSE,-2,kFALSE));
+
+    // Histos name mixed
+    TString minvNameMix(GetMinvHistoName(*r,kFALSE,0,kTRUE));
+    TString minvNameMixPlus(GetMinvHistoName(*r,kFALSE,2,kTRUE));
+    TString minvNameMixMinus(GetMinvHistoName(*r,kFALSE,-2,kTRUE));
     ++nb;
 
     // Make sure histo is wanted
@@ -158,6 +186,19 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
       // Reconstructed pair histo
       CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvName.Data(),
                        Form("#mu+#mu- inv. mass %s;M_{#mu^{+}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+      CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNamePlus.Data(),
+                       Form("#mu+#mu+ inv. mass %s;M_{#mu^{+}#mu^{+}} (GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+      CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMinus.Data(),
+                       Form("#mu-#mu- inv. mass %s;M_{#mu^{-}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+
+      // Mixed Reconstructed pair histo
+      CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMix.Data(),
+                       Form("mixed #mu+#mu- inv. mass %s;M_{#mu^{+}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+      CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMixPlus.Data(),
+                       Form("mixed #mu+#mu+ inv. mass %s;M_{#mu^{+}#mu^{+}} (GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+      CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMixMinus.Data(),
+                       Form("mixed #mu-#mu- inv. mass %s;M_{#mu^{-}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+
       // Generated J/psi histo
       CreateEventHistos(kHistoForMCInput,eventSelection,triggerClassName,centrality,minvName.Data(),
                         Form("MCINPUT #mu+#mu- inv. mass %s;M_{#mu^{+}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMCMinvBins,minvMin,minvMax,-2);
@@ -166,7 +207,7 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
                         Form("MCINPUT #mu+#mu- inv. mass %s;M_{#mu^{+}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMCMinvBins,minvMin,minvMax,-2); // Pure MC histo
 
       // Mean pt minv histo
-      if ( fcomputeMeanPt ){
+      if ( fComputeMeanPt ){
         TString mPtName(Form("MeanPtVs%s",minvName.Data()));
         // Reconstructed pair histo
         CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,mPtName.Data(),
@@ -183,7 +224,15 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
     // Create corrected histo
     if ( ShouldCorrectDimuonForAccEff() )
     {
-      minvName = GetMinvHistoName(*r,kTRUE);
+      // Histos name
+      minvName      = GetMinvHistoName(*r,kTRUE,0,kFALSE);
+      minvNamePlus  = GetMinvHistoName(*r,kTRUE,2,kFALSE);
+      minvNameMinus = GetMinvHistoName(*r,kTRUE,-2,kFALSE);
+
+      // Histos name mixed
+      minvNameMix      =  GetMinvHistoName(*r,kTRUE,0,kTRUE);
+      minvNameMixPlus  =  GetMinvHistoName(*r,kTRUE,2,kTRUE);
+      minvNameMixMinus =  GetMinvHistoName(*r,kTRUE,-2,kTRUE);
 
       if ( !IsHistogramDisabled(minvName.Data()) ){
 
@@ -191,6 +240,20 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
         // Reconstructed pair histo
         CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvName.Data(),
                          Form("#mu+#mu- inv. mass %s (Acc #times Eff Corrected);M_{#mu^{+}#mu^{-}}(GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+        CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNamePlus.Data(),
+                         Form("#mu+#mu+ inv. mass %s (Acc #times Eff Corrected);M_{#mu^{+}#mu^{+}}(GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+        CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMinus.Data(),
+                         Form("#mu-#mu- inv. mass %s (Acc #times Eff Corrected);M_{#mu^{-}#mu^{-}}(GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+
+         // Mixed Reconstructed pair histo
+        CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMix.Data(),
+                         Form("mixed #mu+#mu- inv. mass %s (Acc #times Eff Corrected);M_{#mu^{+}#mu^{-}}(GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+        CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMixPlus.Data(),
+                         Form("mixed #mu+#mu+ inv. mass %s (Acc #times Eff Corrected);M_{#mu^{+}#mu^{+}}(GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+        CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,minvNameMixMinus.Data(),
+                         Form("mixed #mu-#mu- inv. mass %s (Acc #times Eff Corrected);M_{#mu^{-}#mu^{-}}(GeV/c^{2});Counts",r->AsString().Data()),nMinvBins,minvMin,minvMax,-2);
+
+
         // Generated J/psi histo
         CreateEventHistos(kHistoForMCInput,eventSelection,triggerClassName,centrality,minvName.Data(),
                           Form("#mu+#mu- inv. mass %s (Acc #times Eff Corrected);M_{#mu^{+}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMCMinvBins,minvMin,minvMax,-2);
@@ -198,7 +261,7 @@ AliAnalysisMuMuMinv::DefineHistogramCollection(const char* eventSelection,
         CreateEventHistos(kHistoForMCInput,eventSelection,triggerClassName,Form("%s/INYRANGE",centrality),minvName.Data(),
                           Form("#mu+#mu- inv. mass %s (Acc #times Eff Corrected);M_{#mu^{+}#mu^{-}} (GeV/c^{2});Counts",r->AsString().Data()),nMCMinvBins,minvMin,minvMax,-2);
         // Mean pt accxeff corrected
-        if ( fcomputeMeanPt ){
+        if ( fComputeMeanPt ){
           TString mPtName(Form("MeanPtVs%s",minvName.Data()));
 
           CreatePairHistos(kHistoForData | kHistoForMCInput,eventSelection,triggerClassName,centrality,mPtName.Data(),
@@ -225,16 +288,21 @@ void AliAnalysisMuMuMinv::FillHistosForPair(const char* eventSelection,
                                             const char* centrality,
                                             const char* pairCutName,
                                             const AliVParticle& tracki,
-                                            const AliVParticle& trackj)
+                                            const AliVParticle& trackj,
+                                            const Bool_t IsMixedHisto)
 {
   /// Fill histograms for unlike-sign reconstructed  muon pairs.
   /// For the MC case, we check that only tracks with an associated MC label are selected (usefull when running on embedding).
   /// A weight is also applied for MC case at the pair or the muon track level according to SetMuonWeight() and systLevel.
 
   // Usual cuts
-  if ( ( tracki.Charge() == trackj.Charge() ) ) return;
-  if (!AliAnalysisMuonUtility::IsMuonTrack(&tracki) ) return;
-  if (!AliAnalysisMuonUtility::IsMuonTrack(&trackj) ) return;
+  if (!AliAnalysisMuonUtility::IsMuonTrack(&tracki) || !AliAnalysisMuonUtility::IsMuonTrack(&trackj) ) return;
+
+  // Get total charge in order to get the correct histo name
+  Double_t PairCharge = tracki.Charge() + trackj.Charge();
+  TString scharge  = "";
+  if( PairCharge == +2 )      scharge = "PP";
+  else if( PairCharge == -2 ) scharge = "MM";
 
   // Pointers in case running on MC
   Int_t labeli               = 0;
@@ -243,73 +311,63 @@ void AliAnalysisMuMuMinv::FillHistosForPair(const char* eventSelection,
   AliVParticle               * mcTrackj(0x0);
   TLorentzVector             * pair4MomentumMC(0x0);
   Double_t inputWeightMC(1.);
-  AliMergeableCollectionProxy* mcProxy(0x0);
 
-  // Make sure we have an associated tracks in simulation stack if running on MC
-  if(HasMC()){
-    // Get label
-    labeli = tracki.GetLabel();
-    labelj = trackj.GetLabel();
-    if ( labeli < 0 || labelj < 0 ){
-      AliError("Got negative labels!");
-      return;
-    }
+  // Usefull string :)
+  TString smix     = IsMixedHisto ? "Mix" : "";
 
-    //Check if first track is a muon
-    mcTracki = MCEvent()->GetTrack(labeli);
-    if ( TMath::Abs(mcTracki->PdgCode()) != 13 ) return;
+  // Create proxy in AliMergeableCollection
+  AliMergeableCollectionProxy* proxy = HistogramCollection()->CreateProxy(BuildPath(eventSelection,triggerClassName,centrality,pairCutName));
+  AliMergeableCollectionProxy* mcProxy(0x0); // to be set later maybe
 
-    //Check if second track is a muon
-    mcTrackj = MCEvent()->GetTrack(labelj);
-    if ( TMath::Abs(mcTrackj->PdgCode()) != 13 ) return;
+  // Construct dimuons vector
+  TLorentzVector pi(tracki.Px(),tracki.Py(),tracki.Pz(),
+                    TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+tracki.P()*tracki.P()));
+  TLorentzVector pair4Momentum(trackj.Px(),trackj.Py(),trackj.Pz(),
+                               TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+trackj.P()*trackj.P()));
+  pair4Momentum += pi;
 
-    //Check if tracks has the same mother
-    Int_t currMotheri = mcTracki->GetMother();
-    Int_t currMotherj = mcTrackj->GetMother();
-    if(currMotheri!=currMotherj) return;
-    if(currMotheri<0) return;
+  // Make sure we have an associated tracks in simulation stack if running on MC (only opposite charge muons)
+  if( HasMC() && !IsMixedHisto && PairCharge==0)
+  {
+    // Get label
+    labeli = tracki.GetLabel();
+    labelj = trackj.GetLabel();
 
-    // Check if mother is J/psi
-    AliMCParticle* mother = static_cast<AliMCParticle*>(MCEvent()->GetTrack(currMotheri));
-    if(mother->PdgCode() !=443) return;
+    if( !CheckMCTracksMatchingStackAndMother(labeli,labelj,mcTracki,mcTrackj,inputWeightMC) ) return;
 
     // Create proxy for MC
     mcProxy = HistogramCollection()->CreateProxy(BuildMCPath(eventSelection,triggerClassName,centrality,pairCutName));
     TLorentzVector mcpi(mcTracki->Px(),mcTracki->Py(),mcTracki->Pz(),TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+mcTracki->P()*mcTracki->P()));
     TLorentzVector mcpj(mcTrackj->Px(),mcTrackj->Py(),mcTrackj->Pz(),TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+mcTrackj->P()*mcTrackj->P()));
     mcpj+=mcpi;
-
-    // Weight tracks if specified
-    if(!fWeightMuon)      inputWeightMC = WeightPairDistribution(mother->Pt(),mother->Y());
-    else if(fWeightMuon)  inputWeightMC = WeightMuonDistribution(mcTracki->Px()) * WeightMuonDistribution(mcTrackj->Px());
   }
 
-  // Construct dimuons vector
-  TLorentzVector pi(tracki.Px(),tracki.Py(),tracki.Pz(),
-                    TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+tracki.P()*tracki.P()));
-  TLorentzVector pair4Momentum(trackj.Px(),trackj.Py(),trackj.Pz(),
-                               TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+trackj.P()*trackj.P()));
-  pair4Momentum += pi;
-
-  // Create proxy in AliMergeableCollection
-  AliMergeableCollectionProxy* proxy = HistogramCollection()->CreateProxy(BuildPath(eventSelection,triggerClassName,centrality,pairCutName));
-
   // Weight tracks if specified
   Double_t inputWeight=0.;
   if(!fWeightMuon)      inputWeight = WeightPairDistribution(pair4Momentum.Pt(),pair4Momentum.Rapidity());
   else if(fWeightMuon)  inputWeight = WeightMuonDistribution(tracki.Pt()) * WeightMuonDistribution(trackj.Pt());
 
   // Fill some distribution histos
-  if ( !IsHistogramDisabled("Pt") )  proxy->Histo("Pt")->Fill(pair4Momentum.Pt(),inputWeight);
-  if ( !IsHistogramDisabled("Y") )   proxy->Histo("Y")->Fill(pair4Momentum.Rapidity(),inputWeight);
-  if ( !IsHistogramDisabled("Eta") ) proxy->Histo("Eta")->Fill(pair4Momentum.Eta());
-  if ( !IsHistogramDisabled("PtPaireVsPtTrack") ) {
+  if ( !IsHistogramDisabled("Pt")  ) {
+    Double_t x[2] = {pair4Momentum.Pt(),pair4Momentum.M()};
+    static_cast<THnSparse*>(proxy->GetObject(Form("Pt%s%s",smix.Data(),scharge.Data())))->Fill(x,inputWeight);
+  }
+  if ( !IsHistogramDisabled("Y")   ){
+    Double_t x[2] = {pair4Momentum.Rapidity(),pair4Momentum.M()};
+    static_cast<THnSparse*>(proxy->GetObject(Form("Y%s%s",smix.Data(),scharge.Data())))->Fill(x,inputWeight);
+  }
+  if ( !IsHistogramDisabled("Eta") ){
+    Double_t x[2] = {pair4Momentum.Eta(),pair4Momentum.M()};
+    static_cast<THnSparse*>(proxy->GetObject(Form("Eta%s%s",smix.Data(),scharge.Data())))->Fill(x,inputWeight);
+  }
+
+  if ( !IsHistogramDisabled("PtPaireVsPtTrack") && !IsMixedHisto &&  PairCharge == 0) {
     static_cast<TH2*>( proxy->Histo("PtPaireVsPtTrack"))->Fill(pair4Momentum.Pt(),tracki.Pt(),inputWeight);
     static_cast<TH2*>( proxy->Histo("PtPaireVsPtTrack"))->Fill(pair4Momentum.Pt(),trackj.Pt(),inputWeight);
   }
 
-  // Fill histos with MC stack info
-  if ( HasMC() ){
+  // Fill histos with MC stack info (only opposite charge muons)
+  if ( HasMC() && !IsMixedHisto && PairCharge==0){
     // Get 4-vector pairs from MC stack
     TLorentzVector mcpi(mcTracki->Px(),mcTracki->Py(),mcTracki->Pz(),TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+mcTracki->P()*mcTracki->P()));
     TLorentzVector mcpj(mcTrackj->Px(),mcTrackj->Py(),mcTrackj->Pz(),TMath::Sqrt(AliAnalysisMuonUtility::MuonMass2()+mcTrackj->P()*mcTrackj->P()));
@@ -331,287 +389,47 @@ void AliAnalysisMuMuMinv::FillHistosForPair(const char* eventSelection,
   // Loop over all bin ranges
   while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(nextBin()) ) ){
 
-    //In this loop we first check if the pairs pass some tests and we fill histo accordingly.
+    // --- In this loop we first check if the pairs pass some tests and we fill histo accordingly. ---
 
     // Flag for cuts and ranges
     Bool_t ok(kFALSE);
     Bool_t okMC(kFALSE);
 
-    //Fully integrated case
-    if ( r->IsIntegrated() ){
-
-      ok = kTRUE;
-      if ( pair4MomentumMC ) okMC = kTRUE;
-
-      TH1* h(0x0);
-
-      // Fill NchForJpsi histo
-      if ( pair4Momentum.M() >= 2.9 && pair4Momentum.M() <= 3.3 ){
-
-        h = proxy->Histo("NchForJpsi");
-
-        Double_t ntrcorr = (-1.);
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-
-        if (list){
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
-
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
-
-            if ( TString(p->GetName()).Contains("NtrCorr") ){
-              parFound = kTRUE;
-              ntrcorr = p->GetVal();
-            }
-          }
-        }
-        h->Fill(ntrcorr);
-      }
-      else if ( pair4Momentum.M() >= 3.6 && pair4Momentum.M() <= 3.9){
-
-        h = proxy->Histo("NchForPsiP");
-        Double_t ntrcorr = (-1.);
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
-
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++; // In case there is a different object, just to skip it
-
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
-
-            if ( TString(p->GetName()).Contains("NtrCorr") ){
-              parFound = kTRUE;
-              ntrcorr = p->GetVal();
-            }
-          }
-        }
-        h->Fill(ntrcorr);
-      }
-    }
-    // 2D Binning
-    else if ( r->Is2D() ){
-
-      if ( r->AsString().BeginsWith("PTVSY") ){
-        ok                          = r->IsInRange(pair4Momentum.Rapidity(),pair4Momentum.Pt());
-        if ( pair4MomentumMC ) okMC = r->IsInRange(pair4MomentumMC->Rapidity(),pair4MomentumMC->Pt());
-      }
-      else if ( r->AsString().BeginsWith("YVSPT") ){
-        ok                          = r->IsInRange(pair4Momentum.Pt(),pair4Momentum.Rapidity());
-        if ( pair4MomentumMC ) okMC = r->IsInRange(pair4MomentumMC->Pt(),pair4MomentumMC->Rapidity());
-      }
-      else if ( r->Quantity() == "NTRCORRPT" ){
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-
-          while ( i < list->GetEntries() - 1 && !parFound ){
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
-
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
-
-            if ( TString(p->GetName()).Contains("NtrCorr") ){
-              parFound = kTRUE;
-              ok = r->IsInRange(p->GetVal(),pair4Momentum.Pt());
-            }
-          }
-        }
-      }
-      else if ( r->Quantity() == "NTRCORRY" ){
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
-
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
-
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
-
-            if ( TString(p->GetName()).Contains("NtrCorr") ){
-              parFound = kTRUE;
-              ok = r->IsInRange(p->GetVal(),pair4Momentum.Rapidity());
-            }
-          }
-        }
-      }
-      else AliError(Form("Don't know how to deal with 2D bin %s",r->AsString().Data()));
-    }
-    // The rest
-    else{
-
-      if ( r->Quantity() == "PT" ){
-        ok                          = r->IsInRange(pair4Momentum.Pt());
-        if ( pair4MomentumMC ) okMC = r->IsInRange(pair4MomentumMC->Pt());
-      }
-      else if ( r->Quantity() == "Y" ){
-        ok                          = r->IsInRange(pair4Momentum.Rapidity());
-        if ( pair4MomentumMC ) okMC = r->IsInRange(pair4MomentumMC->Rapidity());
-      }
-      else if ( r->Quantity() == "PHI" ){
-        ok                          = r->IsInRange(pair4Momentum.Phi());
-        if ( pair4MomentumMC ) okMC = r->IsInRange(pair4MomentumMC->Phi());
-      }
-      else if ( r->Quantity() == "DNCHDETA" ){
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
-
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
-
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
-
-            if ( TString(p->GetName()).Contains("dNchdEta") ){
-              parFound = kTRUE;
-              ok = r->IsInRange(p->GetVal());
-            }
-          }
-        }
-      }
-      else if ( r->Quantity() == "NTRCORR" || r->Quantity() == "RELNTRCORR" ){
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
-
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
-
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
-
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
-
-            if ( TString(p->GetName()).Contains("NtrCorr") ){
-              parFound = kTRUE;
-              if ( r->Quantity() == "NTRCORR" ) ok = r->IsInRange(p->GetVal());
-              else ok = r->IsInRange(p->GetVal()/5.97);
-            }
-          }
-        }
-      }
-      else if ( r->Quantity() == "V0ACORR" ){
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
-
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
-
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
-
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+    ok = CheckBinRangeCut(r,&pair4Momentum,proxy);
+    if( pair4MomentumMC ) okMC = CheckBinRangeCut(r,pair4MomentumMC,proxy);
 
-            if ( TString(p->GetName()).Contains("V0ACorr") ){
-              parFound = kTRUE;
-              ok = r->IsInRange(p->GetVal());
-            }
-          }
-        }
-      }
-      else if ( r->Quantity() == "V0CCORR" ){
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
-
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
-
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 )  i++;// In case there is a diferent object, just to skip it
-
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
-
-            if ( TString(p->GetName()).Contains("V0CCorr") ){
-              parFound = kTRUE;
-              ok = r->IsInRange(p->GetVal());
-            }
-          }
-        }
-      }
-      else if ( r->Quantity() == "V0MCORR" ){
-
-        TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
-        if (list){
+    // Check if pair pass all conditions, either MC or not, and fill Minv Histogrames
+    if ( ok )
+    {
+      // Get Minv histo name associated to the bin
+      TString minvName = GetMinvHistoName(*r,kFALSE,PairCharge,IsMixedHisto);
+      TString hprofName= Form("MeanPtVs%s",minvName.Data());
+      TProfile* hprof = Prof(eventSelection,triggerClassName,centrality,pairCutName,hprofName.Data());
 
-          Int_t i(-1);
-          Bool_t parFound(kFALSE);
-          while ( i < list->GetEntries() - 1 && !parFound ){
+      FillMinvHisto(&minvName,hprof,proxy,&pair4Momentum,inputWeight);
 
-            i++;
-            while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+      // Create, fill and store Minv histo already corrected with accxeff
+      if ( ShouldCorrectDimuonForAccEff() )
+      {
+        Double_t AccxEff(0);
+        Bool_t okAccEff(kFALSE);
 
-            TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+        // Protection
+        AccxEff = GetAccxEff(pair4Momentum.Pt(),pair4Momentum.Rapidity());
+        if ( AccxEff <= 0.0 ) AliError(Form("AccxEff < 0 for pt = %f & y = %f ",pair4Momentum.Pt(),pair4Momentum.Rapidity()));
+        else okAccEff = kTRUE;
 
-            if ( TString(p->GetName()).Contains("V0MCorr") ){
-              parFound = kTRUE;
-              ok = r->IsInRange(p->GetVal());
-            }
-          }
-        }
+        minvName = GetMinvHistoName(*r,kTRUE,PairCharge,IsMixedHisto);
+        if( okAccEff ) FillMinvHisto(&minvName,hprof,proxy,&pair4Momentum,inputWeight/AccxEff);
       }
     }
 
-    // Check if pair pass all conditions, either MC or not, and fill Minv Histogrames
-    if ( ok || okMC ){
-
-      // Get Minv histo name associated to the bin
-      TString minvName = GetMinvHistoName(*r,kFALSE);
-
-      //Create, fill and store Minv histo
-      if (!IsHistogramDisabled(minvName.Data())){
+    if ( okMC ) {
 
-        TH1* h(0x0);
-
-        if ( ok ){
-          h = proxy->Histo(minvName.Data());
-          if (!h) AliError(Form("Could not get %s",minvName.Data()));
-          else h->Fill(pair4Momentum.M(),inputWeight);
-        }
-
-        if( okMC ){
-          h = mcProxy->Histo(minvName.Data());
-          if (!h) AliError(Form("Could not get MC %s",minvName.Data()));
-          else h->Fill(pair4MomentumMC->M(),inputWeightMC);
-        }
-
-        // Fill Mean pT
-        if ( fcomputeMeanPt ){
-          TString hprofName("");
-
-          if ( ok ){
-            hprofName= Form("MeanPtVs%s",minvName.Data());
-            TProfile* hprof = Prof(eventSelection,triggerClassName,centrality,pairCutName,hprofName.Data());
-            if ( !hprof )AliError(Form("Could not get %s",hprofName.Data()));
-            else hprof->Fill(pair4Momentum.M(),pair4Momentum.Pt(),inputWeight);
-          }
-
-          if ( okMC ){
-            hprofName= Form("MeanPtVs%s",minvName.Data());
-            TProfile* hprof = MCProf(eventSelection,triggerClassName,centrality,pairCutName,hprofName.Data());
-            if ( !hprof )AliError(Form("Could not get MC %s",hprofName.Data()));
-            else hprof->Fill(pair4MomentumMC->M(),pair4MomentumMC->Pt(),inputWeightMC);
-          }
-        }
-      }
+      TString minvName  = GetMinvHistoName(*r,kFALSE,PairCharge,IsMixedHisto);
+      TString hprofName = Form("MeanPtVs%s",minvName.Data());
+      TProfile* hprof   = MCProf(eventSelection,triggerClassName,centrality,pairCutName,hprofName.Data());
+      FillMinvHisto(&minvName,hprof,mcProxy,pair4MomentumMC,inputWeightMC);
 
       // Create, fill and store Minv histo already corrected with accxeff
       if ( ShouldCorrectDimuonForAccEff() ){
@@ -620,58 +438,13 @@ void AliAnalysisMuMuMinv::FillHistosForPair(const char* eventSelection,
         Bool_t okAccEff(kFALSE);
 
         // Protection
-        if ( ok ){
-          AccxEff = GetAccxEff(pair4Momentum.Pt(),pair4Momentum.Rapidity());
-          if ( AccxEff <= 0.0 ) AliError(Form("AccxEff < 0 for pt = %f & y = %f ",pair4Momentum.Pt(),pair4Momentum.Rapidity()));
-          else okAccEff = kTRUE;
-        }
-
-        Double_t AccxEffMC(0);
-        Bool_t okAccEffMC(kFALSE);
+        AccxEff = GetAccxEff(pair4MomentumMC->Pt(),pair4MomentumMC->Rapidity());
+        if ( AccxEff <= 0.0 ) AliError(Form("AccxEff < 0 for pt = %f & y = %f ",pair4MomentumMC->Pt(),pair4MomentumMC->Rapidity()));
+        else okAccEff = kTRUE;
 
-        // Protection
-        if ( okMC ){
-          AccxEffMC= GetAccxEff(pair4MomentumMC->Pt(),pair4MomentumMC->Rapidity());
-          if ( AccxEffMC <= 0.0 ) AliError(Form("AccxEff < 0 for MC pair with pt = %f & y = %f ",pair4MomentumMC->Pt(),pair4MomentumMC->Rapidity()));
-          else okAccEffMC = kTRUE;
-        }
+        minvName = GetMinvHistoName(*r,kTRUE,PairCharge,IsMixedHisto);
+        if( okAccEff ) FillMinvHisto(&minvName,hprof,mcProxy,pair4MomentumMC,inputWeightMC/AccxEff);
 
-        // Get histo name
-        minvName = GetMinvHistoName(*r,kTRUE);
-
-        // fill histo
-        if (!IsHistogramDisabled(minvName.Data())){
-
-          TH1* hCorr = proxy->Histo(minvName.Data());
-
-          if (!hCorr) AliError(Form("Could not get %sr",minvName.Data()));
-          else if ( okAccEff ) hCorr->Fill(pair4Momentum.M(),inputWeight/AccxEff);
-
-          if( okAccEffMC ){
-            hCorr = mcProxy->Histo(minvName.Data());
-            if (!hCorr) AliError(Form("Could not get MC %s",minvName.Data()));
-            else hCorr->Fill(pair4MomentumMC->M(),inputWeightMC/AccxEffMC);
-          }
-
-          if ( fcomputeMeanPt ){
-
-            TString hprofCorrName("");
-
-            if( ok ){
-              hprofCorrName = Form("MeanPtVs%s",minvName.Data());
-              TProfile* hprofCorr = Prof(eventSelection,triggerClassName,centrality,pairCutName,hprofCorrName.Data());
-              if ( !hprofCorr ) AliError(Form("Could not get %s",hprofCorrName.Data()));
-              else if ( okAccEff ) hprofCorr->Fill(pair4Momentum.M(),pair4Momentum.Pt(),inputWeight/AccxEff);
-            }
-
-            if( okMC ){
-              hprofCorrName = Form("MeanPtVs%s",minvName.Data());
-              TProfile* hprofCorr = MCProf(eventSelection,triggerClassName,centrality,pairCutName,hprofCorrName.Data());
-              if ( !hprofCorr ) AliError(Form("Could not get MC %s",hprofCorrName.Data()));
-              else if ( okAccEffMC )hprofCorr->Fill(pair4MomentumMC->M(),pair4MomentumMC->Pt(),inputWeightMC/AccxEffMC);
-            }
-          }
-        }
       }
     }
   }
@@ -780,7 +553,7 @@ void AliAnalysisMuMuMinv::FillHistosForMCEvent(const char* eventSelection,const
           }
 
           // Fill compute mean pt histo
-          if ( fcomputeMeanPt ){
+          if ( fComputeMeanPt ){
 
             TString hprofName = Form("MeanPtVs%s",hname.Data());
             TProfile* hprof   = MCProf(eventSelection,triggerClassName,centrality,hprofName.Data());
@@ -804,10 +577,37 @@ void AliAnalysisMuMuMinv::FillHistosForMCEvent(const char* eventSelection,const
 }
 
 //_____________________________________________________________________________
-TString AliAnalysisMuMuMinv::GetMinvHistoName(const AliAnalysisMuMuBinning::Range& r, Bool_t accEffCorrected) const
+void AliAnalysisMuMuMinv::FillMinvHisto(TString* minvName,TProfile* hprof,AliMergeableCollectionProxy* proxy, TLorentzVector* pair4Momentum, Double_t inputWeight)
+{
+  /// Create, fill and store Minv histo
+  if (!IsHistogramDisabled(minvName->Data())){
+
+    TH1* h(0x0);
+
+    h = proxy->Histo(minvName->Data());
+    if (!h) AliError(Form("Could not get %s",minvName->Data()));
+    else h->Fill(pair4Momentum->M(),inputWeight);
+
+    // Fill Mean pT
+    if ( fComputeMeanPt ){
+
+      if ( !hprof )AliError(Form("Could not get %s",hprof->GetName()));
+      else hprof->Fill(pair4Momentum->M(),pair4Momentum->Pt(),inputWeight);
+    }
+  }
+}
+
+//_____________________________________________________________________________
+TString AliAnalysisMuMuMinv::GetMinvHistoName(const AliAnalysisMuMuBinning::Range& r, Bool_t accEffCorrected, Double_t PairCharge, Bool_t mix) const
 {
-  return TString::Format("MinvUS%s%s%s",
-                         accEffCorrected ? "_AccEffCorr" : "",fMinvBinSeparator.Data(),r.AsString().Data());
+  TString suffix;
+  if(PairCharge  == 0) suffix = "";
+  if(PairCharge  == 2) suffix = "PlusPlus";
+  if(PairCharge  == -2) suffix = "MinusMinus";
+  if(mix) suffix += "Mix";
+
+  return TString::Format("MinvUS%s%s%s%s",
+                         accEffCorrected ? "_AccEffCorr" : "",fMinvBinSeparator.Data(),r.AsString().Data(),suffix.Data());
 }
 
 
@@ -908,6 +708,271 @@ Bool_t AliAnalysisMuMuMinv::IsPtInRange(const AliVParticle& t1, const AliVPartic
 }
 
 //_____________________________________________________________________________
+Bool_t AliAnalysisMuMuMinv::CheckBinRangeCut(AliAnalysisMuMuBinning::Range* r, TLorentzVector* pair4Momentum, AliMergeableCollectionProxy* proxy)
+{
+  /// Check if our pairs match conditions from the binning range
+
+  // --- fully integrated case ---
+
+  Bool_t ok(kFALSE);
+
+  if ( r->IsIntegrated() ){
+
+    ok = kTRUE;
+
+    TH1* h(0x0);
+
+    // Fill NchForJpsi histo according to pair4Momentum.M()
+    if ( pair4Momentum->M() >= 2.9 && pair4Momentum->M() <= 3.3 ){
+
+      h = proxy->Histo("NchForJpsi");
+
+      Double_t ntrcorr = (-1.);
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+
+      if (list){
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("NtrCorr") ){
+            parFound = kTRUE;
+            ntrcorr = p->GetVal();
+          }
+        }
+      }
+      h->Fill(ntrcorr);
+    }
+    else if ( pair4Momentum->M() >= 3.6 && pair4Momentum->M() <= 3.9){
+
+      h = proxy->Histo("NchForPsiP");
+      Double_t ntrcorr = (-1.);
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++; // In case there is a different object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("NtrCorr") ){
+            parFound = kTRUE;
+            ntrcorr = p->GetVal();
+          }
+        }
+      }
+      h->Fill(ntrcorr);
+    }
+  }
+
+  // --- 2D Binning ---
+  else if ( r->Is2D() ){
+
+    if ( r->AsString().BeginsWith("PTVSY") )      ok = r->IsInRange(pair4Momentum->Rapidity(),pair4Momentum->Pt());
+    else if ( r->AsString().BeginsWith("YVSPT") ) ok = r->IsInRange(pair4Momentum->Pt(),pair4Momentum->Rapidity());
+    else if ( r->Quantity() == "NTRCORRPT" ){
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+
+        while ( i < list->GetEntries() - 1 && !parFound ){
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("NtrCorr") ){
+            parFound = kTRUE;
+            ok = r->IsInRange(p->GetVal(),pair4Momentum->Pt());
+          }
+        }
+      }
+    }
+    else if ( r->Quantity() == "NTRCORRY" ){
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("NtrCorr") ){
+            parFound = kTRUE;
+            ok = r->IsInRange(p->GetVal(),pair4Momentum->Rapidity());
+          }
+        }
+      }
+    }
+    else AliError(Form("Don't know how to deal with 2D bin %s",r->AsString().Data()));
+  }
+
+  // --- all the rest ---
+  else {
+
+    if ( r->Quantity() == "PT" )       ok = r->IsInRange(pair4Momentum->Pt());
+    else if ( r->Quantity() == "Y" )   ok = r->IsInRange(pair4Momentum->Rapidity());
+    else if ( r->Quantity() == "PHI" ) ok = r->IsInRange(pair4Momentum->Phi());
+    else if ( r->Quantity() == "DNCHDETA" ){
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("dNchdEta") ){
+            parFound = kTRUE;
+            ok = r->IsInRange(p->GetVal());
+          }
+        }
+      }
+    }
+    else if ( r->Quantity() == "NTRCORR" || r->Quantity() == "RELNTRCORR" ){
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("NtrCorr") ){
+            parFound = kTRUE;
+            if ( r->Quantity() == "NTRCORR" ) ok = r->IsInRange(p->GetVal());
+            else ok = r->IsInRange(p->GetVal()/5.97);
+          }
+        }
+      }
+    }
+    else if ( r->Quantity() == "V0ACORR" ){
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("V0ACorr") ){
+            parFound = kTRUE;
+            ok = r->IsInRange(p->GetVal());
+          }
+        }
+      }
+    }
+    else if ( r->Quantity() == "V0CCORR" ){
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 )  i++;// In case there is a diferent object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("V0CCorr") ){
+            parFound = kTRUE;
+            ok = r->IsInRange(p->GetVal());
+          }
+        }
+      }
+    }
+    else if ( r->Quantity() == "V0MCORR" ){
+
+      TList* list = static_cast<TList*>(Event()->FindListObject("NCH"));
+      if (list){
+
+        Int_t i(-1);
+        Bool_t parFound(kFALSE);
+        while ( i < list->GetEntries() - 1 && !parFound ){
+
+          i++;
+          while ( list->At(i)->IsA() != TParameter<Double_t>::Class() && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
+
+          TParameter<Double_t>* p = static_cast<TParameter<Double_t>*>(list->At(i));
+
+          if ( TString(p->GetName()).Contains("V0MCorr") ){
+            parFound = kTRUE;
+            ok = r->IsInRange(p->GetVal());
+          }
+        }
+      }
+    }
+  }
+  return ok;
+}
+
+//_____________________________________________________________________________
+Bool_t AliAnalysisMuMuMinv::CheckMCTracksMatchingStackAndMother(Int_t labeli, Int_t labelj, AliVParticle* mcTracki, AliVParticle* mcTrackj, Double_t inputWeightMC)
+{
+  /// Make sure the two recontructed tracks from MC have a associated track in the MC stack, i.e do not originat from decay or whatever.
+  /// Also check is they have the same mother track and if it is a J/psi and compute the weight if selected.
+
+  if ( labeli < 0 || labelj < 0 ){
+    AliError("Got negative labels!");
+    return kFALSE;
+  }
+
+  // Check if first track is a muon
+  mcTracki = MCEvent()->GetTrack(labeli);
+  if ( TMath::Abs(mcTracki->PdgCode()) != 13 ) return kFALSE;
+
+  // Check if second track is a muon
+  mcTrackj = MCEvent()->GetTrack(labelj);
+  if ( TMath::Abs(mcTrackj->PdgCode()) != 13 ) return kFALSE;
+
+  // Check if tracks has the same mother
+  Int_t currMotheri = mcTracki->GetMother();
+  Int_t currMotherj = mcTrackj->GetMother();
+  if( currMotheri!=currMotherj ) return kFALSE;
+  if( currMotheri<0 ) return kFALSE;
+
+  // Check if mother is J/psi
+  AliMCParticle* mother = static_cast<AliMCParticle*>(MCEvent()->GetTrack(currMotheri));
+  if(mother->PdgCode() !=443) return kFALSE;
+
+  // Weight tracks if specified
+  if(!fWeightMuon)      inputWeightMC = WeightPairDistribution(mother->Pt(),mother->Y());
+  else if(fWeightMuon)  inputWeightMC = WeightMuonDistribution(mcTracki->Px()) * WeightMuonDistribution(mcTrackj->Px());
+
+  return kTRUE;
+}
+
+//_____________________________________________________________________________
 void AliAnalysisMuMuMinv::NameOfIsPtInRange(TString& name, Double_t& ptmin, Double_t& ptmax) const
 {
   name.Form("PAIRPTIN%2.1f-%2.1f",ptmin,ptmax);
@@ -948,7 +1013,6 @@ void AliAnalysisMuMuMinv::SetOriginPtFunc(TString formula, const Double_t *param
   fPtFuncOld = new TF1("fPtFuncOld", formula.Data(), xMin, xMax);
   fPtFuncOld->SetParameters(param);
   NormFunc(fPtFuncOld, xMin, xMax);
-
 }
 
 //________________________________________________________________________
@@ -965,7 +1029,6 @@ void AliAnalysisMuMuMinv::SetNewPtFunc(TString formula, const Double_t *param,Do
   fPtFuncNew = new TF1("fPtFuncNew", formula.Data(), xMin, xMax);
   fPtFuncNew->SetParameters(param);
   NormFunc(fPtFuncNew, xMin, xMax);
-
 }
 
 //________________________________________________________________________
@@ -982,7 +1045,6 @@ void AliAnalysisMuMuMinv::SetOriginYFunc(TString formula, const Double_t *param,
   fYFuncOld = new TF1("fYFuncOld", formula.Data(), xMin, xMax);
   fYFuncOld->SetParameters(param);
   NormFunc(fYFuncOld, xMin, xMax);
-
 }
 
 //________________________________________________________________________
@@ -999,7 +1061,6 @@ void AliAnalysisMuMuMinv::SetNewYFunc(TString formula, const Double_t *param, Do
   fYFuncNew = new TF1("fYFuncNew", formula.Data(), xMin, xMax);
   fYFuncNew->SetParameters(param);
   NormFunc(fYFuncNew, xMin, xMax);
-
 }
 
 //________________________________________________________________________
diff --git a/PWG/muon/AliAnalysisMuMuMinv.h b/PWG/muon/AliAnalysisMuMuMinv.h
index 8daf0cf..aaeee86 100644
--- a/PWG/muon/AliAnalysisMuMuMinv.h
+++ b/PWG/muon/AliAnalysisMuMuMinv.h
@@ -10,11 +10,15 @@
 
 #include "AliAnalysisMuMuBase.h"
 #include "AliAnalysisMuMuBinning.h"
+#include "AliMergeableCollection.h"
 #include "TString.h"
+#include "TLorentzVector.h"
 #include "TH2.h"
 
 class TH2F;
 class AliVParticle;
+class TLorentzVector;
+class AliMergeableCollectionProxy;
 
 class AliAnalysisMuMuMinv : public AliAnalysisMuMuBase
 {
@@ -33,7 +37,7 @@ public:
 
   Bool_t ShouldCorrectDimuonForAccEff() { return (fAccEffHisto != 0x0); }
 
-  void FillMeanPtHisto() { fcomputeMeanPt=kTRUE; }
+  void FillMeanPtHisto() { fComputeMeanPt=kTRUE; }
 
   void SetMCptCut(Double_t mcptmin, Double_t mcptmax) { fmcptcutmin=mcptmin;fmcptcutmax=mcptmax; }
 
@@ -47,7 +51,6 @@ public:
   void SetOriginPtFunc(TString formula, const Double_t *param, Double_t xMin, Double_t xMax);
   // create the new function with its initial parameters to fit the generated/weighted pT distribution
   void SetNewPtFunc(TString formula, const Double_t *param, Double_t xMin, Double_t xMax);
-
   // create the original function with the parameters used in simulation to generate the y distribution
   void SetOriginYFunc(TString formula, const Double_t *param, Double_t xMin, Double_t xMax);
   // create the new function with its initial parameters to fit the generated/weighted y distribution
@@ -64,18 +67,23 @@ protected:
                                  const char* centrality,
                                  const char* pairCutName,
                                  const AliVParticle& part,
-                                 const AliVParticle& part2);
+                                 const AliVParticle& part2,
+                                 const Bool_t IsMixedHisto);
 
   void FillHistosForMCEvent(const char* eventSelection,const char* triggerClassName,const char* centrality);
 
+  void FillMinvHisto(TString* minvName,TProfile* hprof,AliMergeableCollectionProxy* proxy, TLorentzVector* pair4Momentum, Double_t inputWeight);
+
 private:
 
   void CreateMinvHistograms(const char* eventSelection, const char* triggerClassName, const char* centrality);
 
+  void CheckPairAndRangeMatching(AliAnalysisMuMuBinning::Range* r,TLorentzVector* pair,TLorentzVector* pairmc,Bool_t ok, Bool_t okMC, AliMergeableCollectionProxy* proxy);
+
   // normalize the function to its integral in the given range
   void NormFunc(TF1 *f, Double_t min, Double_t max);
 
-  TString GetMinvHistoName(const AliAnalysisMuMuBinning::Range& r, Bool_t accEffCorrected) const;
+  TString GetMinvHistoName(const AliAnalysisMuMuBinning::Range& r, Bool_t accEffCorrected, Double_t PairCharge=0, Bool_t mix =kFALSE) const;
 
   Double_t GetAccxEff(Double_t pt,Double_t rapidity);
 
@@ -83,14 +91,14 @@ private:
 
   Double_t WeightPairDistribution(Double_t pt,Double_t rapidity);
 
-  // Double_t powerLaw3Par(Double_t *x, Double_t *par);
+  Double_t TriggerLptApt(Double_t *x, Double_t *par);
 
-  // Double_t normPol12Par(Double_t *x, Double_t *par);
+  Bool_t  CheckBinRangeCut(AliAnalysisMuMuBinning::Range* r, TLorentzVector* pair4Momentum, AliMergeableCollectionProxy* proxy);
 
-  Double_t TriggerLptApt(Double_t *x, Double_t *par);
+  Bool_t CheckMCTracksMatchingStackAndMother(Int_t labeli, Int_t labelj, AliVParticle* mcTracki, AliVParticle* mcTrackj, Double_t inputWeightMC);
 
 private:
-  Bool_t fcomputeMeanPt;
+  Bool_t fComputeMeanPt;
   Bool_t fWeightMuon;
   TH2F     * fAccEffHisto;
   TString fMinvBinSeparator;
diff --git a/PWG/muon/AliAnalysisTaskMuMu.cxx b/PWG/muon/AliAnalysisTaskMuMu.cxx
index b7434a9..fde980f 100644
--- a/PWG/muon/AliAnalysisTaskMuMu.cxx
+++ b/PWG/muon/AliAnalysisTaskMuMu.cxx
@@ -19,7 +19,8 @@
 #include "AliESDEvent.h"
 #include "AliESDTZERO.h"
 #include "AliInputEventHandler.h"
-#include "AliLog.h" 
+#include "AliAnalysisManager.h"
+#include "AliLog.h"
 #include "AliMCEvent.h"
 #include "AliMCEventHandler.h"
 #include "AliMergeableCollection.h"
@@ -44,10 +45,11 @@
 #include <cassert>
 #include <set>
 ///
-/// AliAnalysisTaskMuMu : steering class for muon analysis
+/// \ class AliAnalysisTaskMuMu
 ///
+/// This class stores several analysis subclasses based on AliAnalysisMuMuBase.
 /// The output contains an AliHistogramCollection and
-/// an AliCounterCollection
+/// an AliCounterCollection filled with tthe different subclasses.
 ///
 /// \author: L. Aphecetche (Subatech)
 ///
@@ -57,7 +59,8 @@
 /// histograms) in pt,y,phi etc...
 ///
 /// Note that it's also possible to disable some (or all) histograms
-/// (to save speed/memory), using DisableHistograms() method.
+/// (to save speed/memory), using DisableHistograms() method. Also, this task can run both on single and mixed events.
+/// In the case of mixed event, both the UserExec() and UserExecMix() are executed, but in the later case the AliCounterCollection is not filled.
 ///
 /// For an example of such configuration, \see AddTaskMuMu.C
 ///
@@ -74,6 +77,7 @@ fHistogramCollection(0),
 fEventCounters(0),
 fBinning(0x0),
 fCutRegistry(0x0),
+fCutRegistryMix(0x0),
 fBeamYear(""),
 fHistogramToDisable(0x0),
 fSubAnalysisVector(0x0),
@@ -82,14 +86,21 @@ fbinWhat(""),
 fbinQuantity(""),
 fbinFlavor(""),
 fDisableHistoLoop(kFALSE),
-fLegacyCentrality(kFALSE)
+fLegacyCentrality(kFALSE),
+fPool(0x0),
+fMaxPoolSize(0),
+fMix(kFALSE)
 {
   /// Constructor with a predefined list of triggers to consider
   /// Note that we take ownership of cutRegister
   ///
-  
+
 //  fBranchNames = "AOD:header,tracks,vertices,tracklets,AliAODTZERO,AliAODVZERO";
 
+  // Create the pool
+  fPool = new TObjArray(2);
+  fPool->SetOwner(kTRUE);
+
   DefineOutput(1,AliMergeableCollection::Class());
   DefineOutput(2,AliCounterCollection::Class());
   DefineOutput(3,AliAnalysisMuMuBinning::Class());
@@ -115,10 +126,12 @@ AliAnalysisTaskMuMu::~AliAnalysisTaskMuMu()
     delete fBinning;
   }
 
+  if (fPool) delete fPool;
+
   delete fHistogramToDisable;
-  
+
   delete fCutRegistry;
-  
+
   delete fSubAnalysisVector;
 }
 
@@ -148,7 +161,18 @@ AliAnalysisMuMuCutRegistry* AliAnalysisTaskMuMu::CutRegistry() const
 }
 
 //_____________________________________________________________________________
-const char* 
+AliAnalysisMuMuCutRegistry* AliAnalysisTaskMuMu::CutRegistryMix() const
+{
+  /// Return (and create if not yet there) our cut registry
+  if (!fCutRegistryMix)
+  {
+    fCutRegistryMix = new AliAnalysisMuMuCutRegistry;
+  }
+  return fCutRegistryMix;
+}
+
+//_____________________________________________________________________________
+const char*
 AliAnalysisTaskMuMu::DefaultCentralityName() const
 {
   /// Get default centrality name
@@ -160,10 +184,10 @@ AliAnalysisTaskMuMu::DefaultCentralityName() const
 void AliAnalysisTaskMuMu::DisableHistograms(const char* pattern)
 {
   /// Disable the histogramming of all the histograms matching the pattern
-  
+
   TIter next(fSubAnalysisVector);
   AliAnalysisMuMuBase* a;
-  
+
   while ( ( a = static_cast<AliAnalysisMuMuBase*>(next()) ) )
   {
     a->DisableHistograms(pattern);
@@ -185,21 +209,25 @@ void AliAnalysisTaskMuMu::SetCountInBins( const char* binWhat, const char* binQu
   /// Bin to count, can be set like in AliAnalysisMuMuBinning class, and has to be the same as one of the binnings we give to the task through this class
   /// Only one kind of binning can be used in the counters, since otherwise the bin integrated counts will not be correct (events counted several times)
   /// ONLY FOR EVENT PROPERTIES !
-  /// 
-  ///  FIXME: make a new protection 
-
-  if ( !fCountInBins)
-  {
-  fCountInBins = kTRUE;
-  fbinWhat = binWhat;
-  fbinQuantity = binQuantity;
-  fbinFlavor = binFlavor;
-  fDisableHistoLoop = disableHistoLoop;
-}
-  else
-  {
-    AliFatal("Can't be called twice");
+  ///
+  ///  FIXME: make a new protection
+
+  if ( !fCountInBins) {
+    fCountInBins      = kTRUE;
+    fbinWhat          = binWhat;
+    fbinQuantity      = binQuantity;
+    fbinFlavor        = binFlavor;
+    fDisableHistoLoop = disableHistoLoop;
   }
+  else AliFatal("Can't be called twice");
+}
+
+//_____________________________________________________________________________
+void AliAnalysisTaskMuMu::SetPoolSize (Int_t size)
+{
+  /// Create pool and set pool size.
+  fMix = kTRUE;
+  fMaxPoolSize = size;
 }
 
 
@@ -207,13 +235,10 @@ void AliAnalysisTaskMuMu::SetCountInBins( const char* binWhat, const char* binQu
 float AliAnalysisTaskMuMu::CentralityFromCentrality(const char* estimator) const
 {
   /// Estimate Centrality from new centrality framework
+
   AliCentrality* centrality = Event()->GetCentrality();
-  if ( centrality )
-  {
-    return centrality->GetCentralityPercentile(estimator);
-  }
-  else
-  {
+  if ( centrality ) return centrality->GetCentralityPercentile(estimator);
+  else {
     AliWarning("Did not find Centrality !");
     return -9999.0;
   }
@@ -223,50 +248,73 @@ float AliAnalysisTaskMuMu::CentralityFromCentrality(const char* estimator) const
 float AliAnalysisTaskMuMu::CentralityFromMultSelection(const char* estimator) const
 {
   /// Estimate Centrality from old centrality framework
+
   AliMultSelection* multSelection = static_cast<AliMultSelection*>(Event()->FindListObject("MultSelection"));
-  if ( multSelection )
-  {
-    return multSelection->GetMultiplicityPercentile(estimator);
-  }
-  else
-  {
+  if ( multSelection ) return multSelection->GetMultiplicityPercentile(estimator);
+  else {
     AliWarning("Did not find MultSelection !");
     return -9999.0;
   }
 }
 
 //_____________________________________________________________________________
+void AliAnalysisTaskMuMu::CreateCentralityPools( const char* poolName ) const
+{
+  /// Create pool according to binnging
+
+  AliInfo( "Creating pools" );
+  TObjArray* centralities = fBinning->CreateBinObjArray("centrality");
+  if( !centralities )  return;
+  Int_t PoolSize = centralities->GetEntries();
+
+  TObjArray* list = new TObjArray(PoolSize);
+  list->SetOwner(kTRUE);
+  list->SetName(poolName);
+  fPool->Add( list );
+
+  for( Int_t iPool = 0; iPool < PoolSize; ++iPool ){
+    TList* listbis = new TList();
+    listbis->SetOwner(kTRUE);
+    static_cast<TObjArray*>(fPool->FindObject(poolName))->Add( listbis );
+  }
+}
+
+//_____________________________________________________________________________
 void AliAnalysisTaskMuMu::Fill(const char* eventSelection, const char* triggerClassName)
 {
-  /// Fill one set of histograms (only called for events which pass the eventSelection cut)
-  
+  /// Fill one set of histograms (only called for events which pass the eventSelection cut) for a given trigger/event .
+
   TString seventSelection(eventSelection);
   seventSelection.ToLower();
-  
+
+  // Fill counter collections (only for UserExec() )
   FillCounters(seventSelection.Data(), triggerClassName, "ALL", fCurrentRunNumber);
 
   TObjArray* centralities = fBinning->CreateBinObjArray("centrality");
-  
+
   TIter next(centralities);
   AliAnalysisMuMuBinning::Range* r;
-  
+
+  next.Reset();
   while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(next()) ) ){
-    
+
+    Float_t fcent     = -42.0;
     TString estimator = r->Quantity();
-    Float_t fcent = -42.0;
     Bool_t isPP(kFALSE);
 
     // select centrality
-    if ( estimator.CompareTo("pp",TString::kIgnoreCase) == 0 )isPP = kTRUE;
-    else{
+    if ( estimator.CompareTo("pp",TString::kIgnoreCase) == 0 ) isPP = kTRUE;
+    else {
       if  (fLegacyCentrality)fcent = CentralityFromCentrality(estimator.Data());
       else fcent                   = CentralityFromMultSelection(estimator.Data());
     }
-    
-    // Fill histo 
+
+    // Fill histo
     if ( isPP || r->IsInRange(fcent) ){
-      FillHistos(eventSelection,triggerClassName,r->AsString());
-      
+      if ( !isPP  && !r->IsInRange(fcent) ) continue;
+
+      FillHistos(eventSelection,triggerClassName,r->AsString(),fcent);
+
       // FIXME: this filling of global centrality histo is misplaced somehow...
       TH1* hcent = fHistogramCollection->Histo(Form("/%s/%s/V0M/Centrality",eventSelection,triggerClassName));
       if (hcent) hcent->Fill(fcent);
@@ -276,52 +324,92 @@ void AliAnalysisTaskMuMu::Fill(const char* eventSelection, const char* triggerCl
 }
 
 //_____________________________________________________________________________
+void AliAnalysisTaskMuMu::FillPools(const char* eventSelection, const char* triggerClassName)
+{
+  /// Fill the different centrality with event pools for each combination of eventSelection/triggerClassName
+
+  TString seventSelection(eventSelection);
+  seventSelection.ToLower();
+
+  TObjArray* centralities = fBinning->CreateBinObjArray("centrality");
+
+  TIter next(centralities);
+  AliAnalysisMuMuBinning::Range* r;
+
+  next.Reset();
+  while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(next()) ) ){
+
+    Float_t fcent     = -42.0;
+    TString estimator = r->Quantity();
+    Bool_t isPP(kFALSE);
+
+    // select centrality
+    if ( estimator.CompareTo("pp",TString::kIgnoreCase) == 0 ) isPP = kTRUE;
+    else {
+      if  (fLegacyCentrality)fcent = CentralityFromCentrality(estimator.Data());
+      else fcent                   = CentralityFromMultSelection(estimator.Data());
+    }
+
+    // Fill histo
+    if ( isPP || r->IsInRange(fcent) ){
+      if ( !isPP  && !r->IsInRange(fcent) ) continue;
+
+      FillPoolsWithTracks(eventSelection,triggerClassName,fcent);
+    }
+  }
+  delete centralities;
+}
+
+//_____________________________________________________________________________
 void AliAnalysisTaskMuMu::FillHistos(const char* eventSelection,
                                      const char* triggerClassName,
-                                     const char* centrality)
+                                     const char* centrality,
+                                     Float_t cent)
 {
   /// Fill histograms
-  
-  // Fill counter collections
+
+  // Fill counter collections (only for UserExec() )
   FillCounters( eventSelection, triggerClassName, centrality, fCurrentRunNumber);
 
-  //timer
+  // timer
   AliCodeTimerAuto(Form("/%s/%s/%s",eventSelection,triggerClassName,centrality),0);
-  
+
   // prepare iterators
   TIter nextAnalysis(fSubAnalysisVector);
   AliAnalysisMuMuBase* analysis;
   TIter nextTrackCut(fCutRegistry->GetCutCombinations(AliAnalysisMuMuCutElement::kTrack));
   TIter nextPairCut(fCutRegistry->GetCutCombinations(AliAnalysisMuMuCutElement::kTrackPair));
-  
+
   // Get number of tracks
-  Int_t nTracks = AliAnalysisMuonUtility::GetNTracks(Event());
-  
+  Int_t nTracks   = AliAnalysisMuonUtility::GetNTracks(Event());
+
   // The main part, loop over subanalysis and fill histo
   if ( !IsHistogrammingDisabled() && !fDisableHistoLoop ){
+
     while ( ( analysis = static_cast<AliAnalysisMuMuBase*>(nextAnalysis()) ) ){
-      
+
       // Create proxy for the Histogram collections
       analysis->DefineHistogramCollection(eventSelection,triggerClassName,centrality);
-      
+
       if ( MCEvent() != 0x0 ){
         AliCodeTimerAuto(Form("%s (FillHistosForMCEvent)",analysis->ClassName()),1);
-        analysis->FillHistosForMCEvent(eventSelection,triggerClassName,centrality);// Implemented in AliAnalysisMuMuNch and AliAnalysisMuMuMinv at the moment
+        if(!fMix) analysis->FillHistosForMCEvent(eventSelection,triggerClassName,centrality);// Implemented in AliAnalysisMuMuNch and AliAnalysisMuMuMinv at the moment
       }
- 
+
       AliCodeTimerAuto(Form("%s (FillHistosForEvent)",analysis->ClassName()),1);
       analysis->FillHistosForEvent(eventSelection,triggerClassName,centrality); // Implemented in AliAnalysisMuMuNch at the moment
-      
-      // Loop on all event tracks 
+
+      // --- Loop on all event tracks ---
+
       for (Int_t i = 0; i < nTracks; ++i){
 
         // Get track
         AliVParticle* tracki = AliAnalysisMuonUtility::GetTrack(i,Event());
        if (!AliAnalysisMuonUtility::IsMuonTrack(tracki) ) continue;
-        
+
         nextTrackCut.Reset();
         AliAnalysisMuMuCutCombination* trackCut;
-        
+
         // Loop on all track selections and fill histos for track that pass it
         while ( ( trackCut = static_cast<AliAnalysisMuMuCutCombination*>(nextTrackCut()) ) ){
           if ( trackCut->Pass(*tracki) ){
@@ -329,26 +417,64 @@ void AliAnalysisTaskMuMu::FillHistos(const char* eventSelection,
             analysis->FillHistosForTrack(eventSelection,triggerClassName,centrality,trackCut->GetName(),*tracki);
           }
         }
-                
-        // loop on track pairs (here we only consider muon pairs)
+
+        // --- loop on muon track pairs (no mix) ---
+
         for (Int_t j = i+1; j < nTracks; ++j){
           // Get track
-          AliVParticle* trackj = AliAnalysisMuonUtility::GetTrack(j,Event());
+          AliVParticle    * trackj = 0x0;
+          trackj = AliAnalysisMuonUtility::GetTrack(j,Event());
+
           if (!AliAnalysisMuonUtility::IsMuonTrack(trackj) ) continue;
-          
+
           nextPairCut.Reset();
           AliAnalysisMuMuCutCombination* pairCut;
 
           // Fill pair histo
           while ( ( pairCut = static_cast<AliAnalysisMuMuCutCombination*>(nextPairCut()) ) ){
             // Weither or not the pairs pass the tests
-            Bool_t testi = (pairCut->IsTrackCutter()) ? pairCut->Pass(*tracki) : kTRUE;
-            Bool_t testj = (pairCut->IsTrackCutter()) ? pairCut->Pass(*trackj) : kTRUE;
+            Bool_t testi  = (pairCut->IsTrackCutter()) ? pairCut->Pass(*tracki) : kTRUE;
+            Bool_t testj  = (pairCut->IsTrackCutter()) ? pairCut->Pass(*trackj) : kTRUE;
             Bool_t testij = pairCut->Pass(*tracki,*trackj);
-            
+
             if ( ( testi && testj ) && testij ){
               AliCodeTimerAuto(Form("%s (FillHistosForPair)",analysis->ClassName()),3);
-              analysis->FillHistosForPair(eventSelection,triggerClassName,centrality,pairCut->GetName(),*tracki,*trackj);
+              analysis->FillHistosForPair(eventSelection,triggerClassName,centrality,pairCut->GetName(),*tracki,*trackj,kFALSE);
+            }
+          }
+        }
+
+        // --- mix part ---
+
+        if(!fMix) continue;
+
+        TList* currentPool  =0x0;
+        nextPairCut.Reset();
+        nextTrackCut.Reset();
+
+        AliAnalysisMuMuCutCombination* pairCut;
+
+        // Loop over pair cut
+        while ( ( pairCut = static_cast<AliAnalysisMuMuCutCombination*>(nextPairCut()) ) ){
+
+          // Loop over single track cut from mixing configuration
+          while ( ( trackCut = static_cast<AliAnalysisMuMuCutCombination*>(nextTrackCut()) ) ){
+
+            currentPool = FindPool(cent,Form("%s/%s/%s",eventSelection,triggerClassName,trackCut->GetName()));
+            if(!currentPool) continue;
+
+            for (Int_t iTrack2 = 0; iTrack2 < currentPool->GetSize(); ++iTrack2){
+
+              // Get track
+              AliVParticle    * trackj = 0x0;
+              trackj = static_cast<AliVParticle*>(currentPool->At(iTrack2));
+
+              // Weither or not the pairs pass the tests
+              Bool_t testi  = trackCut->Pass(*tracki);
+              Bool_t testj  = trackCut->Pass(*trackj);
+              Bool_t testij = pairCut->Pass(*tracki,*trackj);
+
+              if ( testij && testi && testj ) analysis->FillHistosForPair(eventSelection,triggerClassName,centrality,pairCut->GetName(),*tracki,*trackj,fMix);
             }
           }
         }
@@ -358,23 +484,66 @@ void AliAnalysisTaskMuMu::FillHistos(const char* eventSelection,
 }
 
 //_____________________________________________________________________________
+void AliAnalysisTaskMuMu::FillPoolsWithTracks(const char* eventSelection,
+                                             const char* triggerClassName,
+                                             Float_t cent)
+{
+  /// Fill Pools with event track
+  Int_t nTrackRemoved =0;
+  TIter nextTrackCut(fCutRegistryMix->GetCutCombinations(AliAnalysisMuMuCutElement::kTrack));
+  AliAnalysisMuMuCutCombination* trackCut;
+
+  // Get number of tracks
+  Int_t nTracks   = AliAnalysisMuonUtility::GetNTracks(Event());
+  TList* currentPool(0x0);
+
+  for (Int_t j = 0; j < nTracks; ++j){
+
+    // Get track
+    AliVParticle    * trackj = 0x0;
+    trackj = AliAnalysisMuonUtility::GetTrack(j,Event());
+    if( !AliAnalysisMuonUtility::IsMuonTrack(trackj) ) continue;
+
+    // Fill pools
+    nextTrackCut.Reset();
+    while ( ( trackCut = static_cast<AliAnalysisMuMuCutCombination*>(nextTrackCut()) ) ){
+      if(!trackCut->Pass(*trackj)) continue;
+
+      TString poolName = Form("%s/%s/%s",eventSelection,triggerClassName,trackCut->GetName());
+      if( !FindPool( cent,poolName.Data() ) ) CreateCentralityPools(poolName.Data());
+      currentPool = FindPool(cent,poolName.Data());
+      currentPool->AddFirst( trackj->Clone() );
+
+      // truncate pool if necessary
+      while( currentPool->GetSize() > fMaxPoolSize )
+      {
+        delete currentPool->Last();
+        currentPool->RemoveLast();
+        ++nTrackRemoved;
+      }
+    }
+  }
+}
+
+//_____________________________________________________________________________
 void AliAnalysisTaskMuMu::FillCounters(const char* eventSelection, const char* triggerClassName, const char* centrality, Int_t currentRun)
 {
-  // The binning has to be an already existing event property or one (like i.e. <dNch/dEta>) which we can compute in the SetEvent() method and attach it to the event list
-  // We can generalize this method (if needed), now it is only valid for multiplicity
-  
+  /// Fill the AliCounterCollection for a given event/trigger/centrality/run combination
+  /// The binning has to be an already existing event property or one (like i.e. <dNch/dEta>) which we can compute in the SetEvent() method and attach it to the event list
+  /// We can generalize this method (if needed), now it is only valid for multiplicity
+
   AliCodeTimerAuto("",0);
-  
+
   if( fCountInBins ){
     TParameter<Double_t>* p(0x0);
     TObjArray* bin = fBinning->CreateBinObjArray(fbinWhat.Data(),fbinQuantity.Data(),fbinFlavor.Data());
 
     TString sfbinQuantity(fbinQuantity);
     TString parToFind("");
-    if ( !sfbinQuantity.CompareTo("ntrcorr") ) parToFind = "NtrCorr";
-    else if ( !sfbinQuantity.CompareTo("ntr") ) parToFind = "Ntr";
-    else if ( !sfbinQuantity.CompareTo("nch") ) parToFind = "Nch";
-    else if ( !sfbinQuantity.CompareTo("v0a") ) parToFind = "V0ARaw";
+    if ( !sfbinQuantity.CompareTo("ntrcorr") )      parToFind = "NtrCorr";
+    else if ( !sfbinQuantity.CompareTo("ntr") )     parToFind = "Ntr";
+    else if ( !sfbinQuantity.CompareTo("nch") )     parToFind = "Nch";
+    else if ( !sfbinQuantity.CompareTo("v0a") )     parToFind = "V0ARaw";
     else if ( !sfbinQuantity.CompareTo("v0acorr") ) parToFind = "V0ACorr";
     else if ( !sfbinQuantity.CompareTo("v0ccorr") ) parToFind = "V0CCorr";
     else if ( !sfbinQuantity.CompareTo("v0mcorr") ) parToFind = "V0MCorr";
@@ -392,10 +561,10 @@ void AliAnalysisTaskMuMu::FillCounters(const char* eventSelection, const char* t
 
           i++;
           while ( list->At(i)->IsA() != TParameter<Double_t>::Class()  && i < list->GetEntries() - 1 ) i++;// In case there is a diferent object, just to skip it
-          
+
           p = static_cast<TParameter<Double_t>*>(list->At(i));
-          
-          if ( TString(p->GetName()).Contains(parToFind.Data()) )parFound = kTRUE;
+
+          if ( TString(p->GetName()).Contains(parToFind.Data()) ) parFound = kTRUE;
         }
       }
       else AliFatal("No multiplicity info on Event");
@@ -403,16 +572,14 @@ void AliAnalysisTaskMuMu::FillCounters(const char* eventSelection, const char* t
       TIter next(bin);
       AliAnalysisMuMuBinning::Range* r;
       while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(next()) ) ){
-        
-        if ( r->IsInRange(p->GetVal()) ){
-          fEventCounters->Count(Form("event:%s/trigger:%s/centrality:%s/run:%d/bin:%s", eventSelection, triggerClassName,
-                                             centrality, currentRun,r->AsString().Data()));
-        }
+
+        if ( r->IsInRange(p->GetVal()) )
+          fEventCounters->Count(Form("event:%s/trigger:%s/centrality:%s/run:%d/bin:%s",eventSelection, triggerClassName,centrality, currentRun,r->AsString().Data()));
       }
       delete bin;
     }
   }
-  
+
   else fEventCounters->Count(Form("event:%s/trigger:%s/centrality:%s/run:%d", eventSelection, triggerClassName,  centrality, currentRun));
 }
 
@@ -423,33 +590,60 @@ void AliAnalysisTaskMuMu::FinishTaskOutput()
   if ( fHistogramCollection ) fHistogramCollection->PruneEmptyObjects();
 }
 
+//________________________________________________________________________
+TList*  AliAnalysisTaskMuMu::FindPool( Float_t cent, const char* poolName ) const
+{
+
+  // define number of pools and boundary
+  // in principle one could also use vertex range
+
+  if(!fPool->FindObject(poolName)) return 0x0;
+
+  TObjArray* centralities = fBinning->CreateBinObjArray("centrality");
+  TIter next(centralities);
+  AliAnalysisMuMuBinning::Range* r;
+
+  next.Reset();
+  TList* o;
+  Int_t iPool =0;
+  while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(next()) ) )
+  {
+    if( r->IsInRange(cent) && fPool->FindObject( poolName ) ){
+      o = static_cast<TList*>( fPool->FindObject( poolName ) );
+      return dynamic_cast<TList*>( o->At( iPool ) );
+    }
+    else ++iPool;
+  }
+  return 0x0;
+}
+
 //_____________________________________________________________________________
 void AliAnalysisTaskMuMu::GetSelectedTrigClassesInEvent(const AliVEvent* event, TObjArray& array)
 {
   /// Fills the array with a list of TObjString of the trigger classes that the various
   /// cuts accept for this event
-  
+
   array.Clear();
-  
+
   if (!event){
     AliError("Will get a hard time selecting trigger classes with an empty event...");
     return;
   }
-  
+
   TString firedTriggerClasses = event->GetFiredTriggerClasses();
   UInt_t l0                   = event->GetHeader()->GetL0TriggerInputs();
   UInt_t l1                   = event->GetHeader()->GetL1TriggerInputs();
   UInt_t l2                   = event->GetHeader()->GetL2TriggerInputs();
 
   std::set<std::string> tmpArray;
-  
+
   TIter nextCutCombination(CutRegistry()->GetCutCombinations(AliAnalysisMuMuCutElement::kTriggerClass));
   AliAnalysisMuMuCutCombination* cutCombination;
-  
+
   while ( ( cutCombination = static_cast<AliAnalysisMuMuCutCombination*>(nextCutCombination()) ) ){
 
     TString acceptedTriggerClasses;
-    
+
     if ( cutCombination->Pass(firedTriggerClasses,acceptedTriggerClasses,l0,l1,l2) ){
 
       TObjArray* split = acceptedTriggerClasses.Tokenize(" ");
@@ -460,9 +654,52 @@ void AliAnalysisTaskMuMu::GetSelectedTrigClassesInEvent(const AliVEvent* event,
       delete split;
     }
   }
-  
+
   std::set<std::string>::const_iterator it;
-  
+
+  for ( it = tmpArray.begin(); it != tmpArray.end(); ++it ) array.Add(new TObjString(it->c_str()));
+}
+
+//_____________________________________________________________________________
+void AliAnalysisTaskMuMu::GetSelectedTrigClassesInEventMix(const AliVEvent* event, TObjArray& array)
+{
+  /// Fills the array with a list of TObjString of the trigger classes that the various
+  /// cuts accept for this event
+
+  array.Clear();
+
+  if (!event){
+    AliError("Will get a hard time selecting trigger classes with an empty event...");
+    return;
+  }
+
+  TString firedTriggerClasses = event->GetFiredTriggerClasses();
+  UInt_t l0                   = event->GetHeader()->GetL0TriggerInputs();
+  UInt_t l1                   = event->GetHeader()->GetL1TriggerInputs();
+  UInt_t l2                   = event->GetHeader()->GetL2TriggerInputs();
+
+  std::set<std::string> tmpArray;
+
+  TIter nextCutCombination(CutRegistryMix()->GetCutCombinations(AliAnalysisMuMuCutElement::kTriggerClass));
+  AliAnalysisMuMuCutCombination* cutCombination;
+
+  while ( ( cutCombination = static_cast<AliAnalysisMuMuCutCombination*>(nextCutCombination()) ) ){
+
+    TString acceptedTriggerClasses;
+
+    if ( cutCombination->Pass(firedTriggerClasses,acceptedTriggerClasses,l0,l1,l2) ){
+
+      TObjArray* split = acceptedTriggerClasses.Tokenize(" ");
+      TIter next(split);
+      TObjString* str;
+      while ( ( str = static_cast<TObjString*>(next()) ) ) tmpArray.insert(str->String().Data());
+
+      delete split;
+    }
+  }
+
+  std::set<std::string>::const_iterator it;
+
   for ( it = tmpArray.begin(); it != tmpArray.end(); ++it ) array.Add(new TObjString(it->c_str()));
 }
 
@@ -472,14 +709,14 @@ Bool_t AliAnalysisTaskMuMu::IsHistogramDisabled(const char* hname) const
 {
   /// Whether or not a given histogram (identified by its name)
   /// is disabled or not
-  
+
   TIter next(fSubAnalysisVector);
   AliAnalysisMuMuBase* analysis;
-  
+
   while ( ( analysis = static_cast<AliAnalysisMuMuBase*>(next()) ) ){
     if ( analysis->IsHistogramDisabled(hname) ) return kTRUE;
   }
-  
+
   return kFALSE;
 }
 
@@ -487,9 +724,9 @@ Bool_t AliAnalysisTaskMuMu::IsHistogramDisabled(const char* hname) const
 Bool_t AliAnalysisTaskMuMu::IsHistogrammingDisabled() const
 {
   /// Whether or not *all* histograms are disabled
-  
+
   Bool_t disabled(kTRUE);
-  
+
   TIter next(fSubAnalysisVector);
   AliAnalysisMuMuBase* analysis;
 
@@ -501,38 +738,38 @@ Bool_t AliAnalysisTaskMuMu::IsHistogrammingDisabled() const
 //_____________________________________________________________________________
 Bool_t AliAnalysisTaskMuMu::IsPP() const
 {
-  // whether we're dealing with proton proton collisions
+  /// whether we're dealing with proton proton collisions. Affect the centrality selection.
   return fBeamYear.Contains("pp");
 }
 
 //_____________________________________________________________________________
 void AliAnalysisTaskMuMu::NotifyRun()
 {
-  /// Called at each change of run 
-  
+  /// Called at each change of run
+
   AliDebug(1,Form("Run %09d File %s",fCurrentRunNumber,CurrentFileName()));
- 
+
   TIter next(fSubAnalysisVector);
   AliAnalysisMuMuBase* analysis;
-  
+
   while ( ( analysis = static_cast<AliAnalysisMuMuBase*>(next()) ) ) analysis->SetRun(fInputHandler);
 }
 
 //_____________________________________________________________________________
-void 
+void
 AliAnalysisTaskMuMu::Print(Option_t* opt) const
 {
   /// Print the definition of this analysis
-  
+
   cout << ClassName() << " - " << GetName() << " - " << fBeamYear.Data() << endl;
 
   TIter next(fSubAnalysisVector);
   AliAnalysisMuMuBase* analysis;
-  
+
   while ( ( analysis = static_cast<AliAnalysisMuMuBase*>(next()) ) )analysis->Print(opt);
 
   fCutRegistry->Print("ALL");
-  
+
   if ( fBinning ){
     cout << "Binning" << endl;
     fBinning->Print();
@@ -540,19 +777,45 @@ AliAnalysisTaskMuMu::Print(Option_t* opt) const
 }
 
 //_____________________________________________________________________________
+void AliAnalysisTaskMuMu::PrintPools() const
+{
+  /// Print the definition of this analysis
+
+   if(!fPool || fPool->IsEmpty())return;
+
+  printf("\n --- Centrality pools --- \n\n");
+  printf(" -> Number of pools : %d \n",fPool->GetEntries());
+  printf(" -------------------------- \n");
+  for (int i = 0; i < fPool->GetEntries(); ++i){
+
+    TObjArray* pool = static_cast<TObjArray*>(fPool->At(i));
+
+    printf(" ---> pool n°%i \n\n",i);
+    printf(" - name : %s\n",fPool->At(i)->GetName() );
+    for (int j = 0; j < pool->GetEntries(); ++j){
+
+      TList* list = static_cast<TList*>(pool->At(j));
+
+      printf(" - number of muons stored in centrality bins n°%d : %d\n",j, list->GetEntries() );
+    }
+    printf("\n");
+  }
+}
+
+//_____________________________________________________________________________
 void
 AliAnalysisTaskMuMu::Terminate(Option_t *)
 {
   /// Called once at the end of the query
   /// Just a simple printout of the stat we analyse and how many histograms
   /// we got
-  
-  
+
+
   fHistogramCollection = dynamic_cast<AliMergeableCollection*>(GetOutputData(1));
-  
+
   TIter nextAnalysis(fSubAnalysisVector);
   AliAnalysisMuMuBase* analysis;
-  
+
   while ( ( analysis = static_cast<AliAnalysisMuMuBase*>(nextAnalysis()) ) ){
     analysis->SetHistogramCollection(fHistogramCollection);
     analysis->Terminate();
@@ -562,29 +825,29 @@ AliAnalysisTaskMuMu::Terminate(Option_t *)
   else{
     // Removes empty objects
     fHistogramCollection->PruneEmptyObjects();
-    
+
     UInt_t size2 = fHistogramCollection->EstimateSize();
 
     TIter nextHistogram(fHistogramCollection->CreateIterator());
     TObject* object;
-    
+
     while ( ( object = nextHistogram() ) ){
       if ( object->IsA()->InheritsFrom(TH1::Class()) ){
         TH1* h = static_cast<TH1*>(object);
         if ( h->GetXaxis()->GetLabels() ) h->LabelsDeflate("X");
       }
     }
-    
+
     AliInfo(Form("size after prune histograms = %5.1f MB",size2/1024.0/1024.0));
-  
+
     fHistogramCollection->Print("-");
   }
-  
+
   fEventCounters = dynamic_cast<AliCounterCollection*>(GetOutputData(2));
-  
+
   if (!fEventCounters) AliError("Could not find back counters in output...");
   else fEventCounters->Print("trigger/event","centrality:all");
-  
+
   // post param container(s)
   PostData(3,fBinning);
 }
@@ -592,11 +855,11 @@ AliAnalysisTaskMuMu::Terminate(Option_t *)
 //_____________________________________________________________________________
 AliAnalysisMuMuBinning* AliAnalysisTaskMuMu::Binning() const
 {
-  // Return our binning (making a default one if not already created
+  /// Return our binning (making a default one if not already created
   if ( fBinning ) return fBinning;
-  
+
   fBinning = new AliAnalysisMuMuBinning("BIN");
-  
+
   return fBinning;
 }
 
@@ -604,17 +867,17 @@ AliAnalysisMuMuBinning* AliAnalysisTaskMuMu::Binning() const
 void AliAnalysisTaskMuMu::UserExec(Option_t* /*opt*/)
 {
   /// Executed at each event
-  
-//  static Int_t n(0);
-//  AliInfo(Form("EVENT %10d Event()=%p MCEvent()=%p",n,Event(),MCEvent()));
-//  ++n;
-//
+
+ // static Int_t n(0);
+ // AliInfo(Form("EVENT %10d Event()=%p MCEvent()=%p",n,Event(),MCEvent()));
+ // ++n;
+
   AliCodeTimerAuto("",0);
-  
+
   Binning(); // insure we have a binning...
-  
+
   TIter nextAnalysis(fSubAnalysisVector);
-  AliAnalysisMuMuBase* analysis;  
+  AliAnalysisMuMuBase* analysis;
 
   // Loop over each subanalysis
   while ( ( analysis = static_cast<AliAnalysisMuMuBase*>(nextAnalysis()) ) ) {
@@ -625,20 +888,20 @@ void AliAnalysisTaskMuMu::UserExec(Option_t* /*opt*/)
     analysis->SetEvent(Event(),MCEvent()); // Set the new event properties derived in the analysis
   }
 
-
-
   TString firedTriggerClasses(Event()->GetFiredTriggerClasses());
 
   TIter nextEventCutCombination(CutRegistry()->GetCutCombinations(AliAnalysisMuMuCutElement::kEvent));
   AliAnalysisMuMuCutCombination* cutCombination;
 
+  TIter nextEventCutCombinationMix(CutRegistryMix()->GetCutCombinations(AliAnalysisMuMuCutElement::kEvent));
+  AliAnalysisMuMuCutCombination* cutCombinationMix;
+
   // loop over cut combination on event level. Fill counters
   while ( ( cutCombination = static_cast<AliAnalysisMuMuCutCombination*>(nextEventCutCombination()))){
-    if ( cutCombination->Pass(*fInputHandler) ) {// If event pass the cut
-    
+    if ( cutCombination->Pass(*fInputHandler) )
+    {
       // Fill counters
       FillCounters(cutCombination->GetName(), "EVERYTHING",  "ALL", fCurrentRunNumber);
-      
       // Default counter
       if ( firedTriggerClasses == "" ) FillCounters(cutCombination->GetName(),"EMPTY","ALL",fCurrentRunNumber);
     }
@@ -647,7 +910,7 @@ void AliAnalysisTaskMuMu::UserExec(Option_t* /*opt*/)
   // loop over trigger selected list and cut combination on event level. Fill histos
   TObjArray selectedTriggerClasses;
   selectedTriggerClasses.SetOwner(kTRUE);
-  
+
   GetSelectedTrigClassesInEvent(Event(),selectedTriggerClasses);
 
   TIter next(&selectedTriggerClasses);
@@ -660,7 +923,21 @@ void AliAnalysisTaskMuMu::UserExec(Option_t* /*opt*/)
       if ( cutCombination->Pass(*fInputHandler) ) Fill(cutCombination->GetName(),tname->String().Data());
     }
   }
-  
+
+  if(!fMix) return;
+
+  GetSelectedTrigClassesInEventMix(Event(),selectedTriggerClasses);
+  TIter nextmix(&selectedTriggerClasses);
+  nextmix.Reset();
+
+  while ( ( tname = static_cast<TObjString*>(nextmix()) ) ){
+    nextEventCutCombinationMix.Reset();
+
+    while ( ( cutCombinationMix = static_cast<AliAnalysisMuMuCutCombination*>(nextEventCutCombinationMix())) ){
+      if ( cutCombinationMix->Pass(*fInputHandler) ) FillPools(cutCombinationMix->GetName(),tname->String().Data());
+    }
+  }
+
   // Post output data.
   PostData(1, fHistogramCollection);
   PostData(2, fEventCounters);
@@ -672,53 +949,46 @@ void AliAnalysisTaskMuMu::UserCreateOutputObjects()
 {
   /// Create histograms
   /// Called once
-  
+
   OpenFile(1);
-  
+
   AliDebug(1,Form("fCutRegistry=%p",fCutRegistry));
-  
+
   if ( fCutRegistry ) StdoutToAliDebug(1,fCutRegistry->Print());
-  
-  fHistogramCollection = new AliMergeableCollection("OC");
 
+  fHistogramCollection = new AliMergeableCollection("OC");
   fEventCounters = new AliCounterCollection("CC");
 
   // initialize event counters
-
   TString eventRubric;
   TIter next(CutRegistry()->GetCutCombinations(AliAnalysisMuMuCutElement::kEvent));
   AliAnalysisMuMuCutCombination* cutCombination;
-  
+
   while ( ( cutCombination = static_cast<AliAnalysisMuMuCutCombination*>(next())) ){
     TString cutName = cutCombination->GetName();
     if ( eventRubric.Length() > 0 ) eventRubric += "/";
     eventRubric += cutName;
   }
-  
+
   fEventCounters->AddRubric("event", eventRubric.Data());
-  
   fEventCounters->AddRubric("trigger", 100);
-  
   fEventCounters->AddRubric("centrality", 100);
-    
   fEventCounters->AddRubric("run", 1000000);
-  
-  //____New
+
   if ( fCountInBins ) fEventCounters->AddRubric("bin", 1000000);
-  //_____
-  
+
   // Initialize our subtasks, if any...
-  
   TIter nextAnalysis(fSubAnalysisVector);
   AliAnalysisMuMuBase* analysis;
-  
+
   while ( ( analysis = static_cast<AliAnalysisMuMuBase*>(nextAnalysis()) ) ) analysis->Init(*fEventCounters,*fHistogramCollection,*fBinning,*fCutRegistry);
 
   // finally end the counters initialization
   fEventCounters->Init();
-  
+
   // Post output data.
   PostData(1,fHistogramCollection);
   PostData(2,fEventCounters);
   PostData(3,fBinning);
 }
+
diff --git a/PWG/muon/AliAnalysisTaskMuMu.h b/PWG/muon/AliAnalysisTaskMuMu.h
index f4219f1..09bf77e 100644
--- a/PWG/muon/AliAnalysisTaskMuMu.h
+++ b/PWG/muon/AliAnalysisTaskMuMu.h
@@ -1,29 +1,27 @@
 #ifndef ALIANALYSISTASKMUMU_H
 #define ALIANALYSISTASKMUMU_H
 
-/**
- * \defgroup pwg-muon-mumu pwg-muon-mumu
- *
- * \brief Small sub-framework to analyse muon pairs and more...
- *
- * Started as a simple invariant mass analysis and grew into a bit more general thing...
- *
- * Can now compute the charged particle multiplicy (from SPD tracklets only) in order
- * to be able to correlate it with e.g. J/psi or single mu.
- */
-
-/**
- * \ingroup pwg-muon-mumu
- *
- * \class AliAnalysisTaskMuMu
- *
- * \brief Steering class for mu pairs analysis (and more...)
- *
- * This class acts as a small sub-framework to steer various sub-analysis which
- * share the same MergeableCollection and the same CounterCollection.
- *
- *  \author: L. Aphecetche (Subatech)
- */
+/// \defgroup pwg-muon-mumu pwg-muon-mumu
+///
+/// \brief Small sub-framework to analyse muon pairs and more...
+///
+/// Started as a simple invariant mass analysis and grew into a bit more general thing...
+///
+/// Can now compute the charged particle multiplicy (from SPD tracklets only) in order
+/// to be able to correlate it with e.g. J/psi or single mu.
+///
+///
+/// \ingroup pwg-muon-mumu
+///
+/// \class AliAnalysisTaskMuMu
+///
+/// \brief Steering class for mu pairs analysis (and more...)
+///
+/// This class acts as a small sub-framework to steer various sub-analysis which
+/// share the same MergeableCollection and the same CounterCollection.
+///
+///  \author: L. Aphecetche (Subatech)
+///
 
 #ifndef ALIANALYSISTASKSE_H
 #  include "AliAnalysisTaskSE.h"
@@ -41,6 +39,9 @@ class TList;
 class TObjArray;
 class AliAnalysisMuMuBase;
 class AliAnalysisMuMuCutRegistry;
+class AliMultiInputEventHandler;
+class AliMixInputEventHandler;
+class AliAnalysisManager;
 
 class AliAnalysisTaskMuMu : public AliAnalysisTaskSE
 {
@@ -49,105 +50,131 @@ public:
   virtual ~AliAnalysisTaskMuMu();
 
   AliAnalysisMuMuCutRegistry* CutRegistry() const;
-  
+
+  AliAnalysisMuMuCutRegistry* CutRegistryMix() const;
+
   AliAnalysisMuMuBinning* Binning() const;
 
   void AdoptSubAnalysis(AliAnalysisMuMuBase* analysis);
-  
+
   virtual void DisableHistograms(const char* pattern="*");
-  
+
   void SetCountInBins( const char* binWhat, const char* binQuantity, const char* binFlavor, Bool_t disableHistoLoop=kFALSE );
-  
+
+  Bool_t IsMix() { return fMix; };
+
   void DisableHistoLoop( Bool_t disableHistoLoop=kTRUE ) { fDisableHistoLoop = disableHistoLoop; }
 
   void SetBeamYear(const char* beamYear) { fBeamYear = beamYear; }
-  
+
+  void SetPoolSize(Int_t size);
+
   virtual void FinishTaskOutput();
-  
+
   virtual void NotifyRun();
-  
+
   virtual void Print(Option_t* opt="") const;
-  
+
+  void PrintPools() const;
+
   virtual void Terminate(Option_t *);
-  
+
   void UserCreateOutputObjects();
 
   virtual void UserExec(Option_t* opt);
-  
+
   void UseLegacyCentrality() { fLegacyCentrality = kTRUE; }
-  
+
 private:
-  
+
   void CreateTrackHisto(const char* eventSelection,
                         const char* triggerClassName,
                         const char* hname, const char* htitle,
                         Int_t nbinsx, Double_t xmin, Double_t xmax,
                         Int_t nbinsy=-1, Double_t ymin=0.0, Double_t ymax=0.0,
                         Bool_t separatePlusAndMinus=kFALSE) const;
-  
+
   void CreatePairHisto(const char* eventSelection,
                        const char* triggerClassName,
                        const char* hname, const char* htitle,
                        Int_t nbinsx, Double_t xmin, Double_t xmax,
                        Int_t nbinsy=-1, Double_t ymin=0.0, Double_t ymax=0.0) const;
-  
+
+  void CreateCentralityPools(const char* poolName) const ;
+
   const char* DefaultCentralityName() const;
 
   AliVEvent* Event() const;
-  
-  void FillHistos(const char* eventSelection, const char* triggerClassName, const char* centrality);
-  
+
+  void FillHistos(const char* eventSelection, const char* triggerClassName, const char* centrality, Float_t cent);
+
+  void FillPoolsWithTracks(const char* eventSelection, const char* triggerClassName, Float_t cent);
+
   void FillCounters(const char* eventSelection, const char* triggerClassName, const char* centrality, Int_t currentRun);
-  
+
   void Fill(const char* eventSelection, const char* triggerClassName);
-  
+
+  void FillPools(const char* eventSelection, const char* triggerClassName);
+
   void FillMC();
-  
+
+  TList* FindPool ( Float_t cent , const char* poolName  ) const;
+
   void GetSelectedTrigClassesInEvent(const AliVEvent* event, TObjArray& array);
 
+  void GetSelectedTrigClassesInEventMix(const AliVEvent* event, TObjArray& array);
+
   Bool_t IsHistogrammingDisabled() const;
-  
+
   virtual Bool_t IsHistogramDisabled(const char* hname) const;
-  
+
   Bool_t IsPP() const;
-  
+
 private:
-  
+
   AliAnalysisTaskMuMu(const AliAnalysisTaskMuMu&); // not implemented (on purpose)
   AliAnalysisTaskMuMu& operator=(const AliAnalysisTaskMuMu&); // not implemented (on purpose)
 
   float CentralityFromCentrality(const char* estimator) const;
   float CentralityFromMultSelection(const char* estimator) const;
-  
+
 private:
-  
+
   AliMergeableCollection* fHistogramCollection; //! collection of histograms
+
   AliCounterCollection* fEventCounters; //! event counters
+
   mutable AliAnalysisMuMuBinning* fBinning; // binning for particles
 
   mutable AliAnalysisMuMuCutRegistry* fCutRegistry; // cuts (owner)
-  
+
+  mutable AliAnalysisMuMuCutRegistry* fCutRegistryMix; // cuts (owner)
+
   TString fBeamYear; // beam and year
-  
+
   TList* fHistogramToDisable; // list of regexp of histo name(s) to disable
-  
+
   TObjArray* fSubAnalysisVector; // list of companion analysis
-  
+
   Bool_t fCountInBins; //Flag to count events in bins
-  
-  //____Same nomenclature as in AliAnalysisMuMuBinning.cxx
+
+  Bool_t fMix; //Flag to select which UserExec we want
+
   TString fbinWhat; // Name for the binning to use in the counters (what it is for, i.e. "psi")
 
   TString fbinQuantity; // Name for the binning to use in the counters (quantity, i.e. "ntrcorr")
 
   TString fbinFlavor; // Name for the binning to use in the counters (binning flavor)
-  //______
 
   Bool_t fDisableHistoLoop; //Flag to not enter in the Filling histos Loop without disabling the histogramming (neccesary to have dNhcdEta event info avaliable)
 
   Bool_t fLegacyCentrality; // use old centrality framework
-  
-  ClassDef(AliAnalysisTaskMuMu,28) // a class to analyse muon pairs (and single also ;-) )
+
+  TObjArray* fPool; // Pools
+
+  Int_t fMaxPoolSize; // pool size
+
+  ClassDef(AliAnalysisTaskMuMu,31) // a class to analyse muon pairs (and single also ;-) )
 };
 
 #endif
diff --git a/PWG/muon/CMakeLists.txt b/PWG/muon/CMakeLists.txt
index 21feec4..7d7de5a 100644
--- a/PWG/muon/CMakeLists.txt
+++ b/PWG/muon/CMakeLists.txt
@@ -32,6 +32,7 @@ include_directories(${AliPhysics_SOURCE_DIR}/PWG/muon)
 # Additional includes - alphabetical order except ROOT
 include_directories(${ROOT_INCLUDE_DIRS}
                     ${AliPhysics_SOURCE_DIR}/CORRFW
+                    ${AliPhysics_SOURCE_DIR}/EVENTMIX
                     ${AliPhysics_SOURCE_DIR}/OADB
                     ${AliPhysics_SOURCE_DIR}/OADB/COMMON/MULTIPLICITY
   )
@@ -115,7 +116,7 @@ add_library_tested(${MODULE} SHARED  ${SRCS} G__${MODULE}.cxx)
 
 # Generate the ROOT map
 # Dependecies
-set(LIBDEPS ANALYSISalice AOD CORRFW OADB STEERBase)
+set(LIBDEPS ANALYSISalice AOD CORRFW OADB STEERBase EventMixing)
 generate_rootmap("${MODULE}" "${LIBDEPS}" "${CMAKE_CURRENT_SOURCE_DIR}/${MODULE}LinkDef.h")
 
 # Generate a PARfile target for this library
diff --git a/PWG/muondep/AliAnalysisMuMu.cxx b/PWG/muondep/AliAnalysisMuMu.cxx
index b91fe21..55971ed 100644
--- a/PWG/muondep/AliAnalysisMuMu.cxx
+++ b/PWG/muondep/AliAnalysisMuMu.cxx
@@ -1,5 +1,5 @@
 /**************************************************************************
- * Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
+ * Copyright(c) 1996-1999, ALICE Experiment at CERN, All rights reserved. *
  *                                                                        *
  * Author: The ALICE Off-line Project.                                    *
  * Contributors are mentioned in the code where appropriate.              *
@@ -46,6 +46,7 @@
 #include "TGrid.h"
 #include "TH1.h"
 #include "TH2.h"
+#include "THnSparse.h"
 #include "TProfile.h"
 #include "THashList.h"
 #include "TKey.h"
@@ -95,10 +96,7 @@ fConfig(new AliAnalysisMuMuConfig(config))
 
   GetCollections(fFilename,fDirectory,fMergeableCollection,fCounterCollection,fBinning,fRunNumbers);
 
-  if ( IsSimulation() )
-  {
-    SetParticleNameFromFileName(fFilename);
-  }
+  if ( IsSimulation() ) SetParticleNameFromFileName(fFilename);
 }
 
 
@@ -116,28 +114,18 @@ fAssociatedSimulation2(0x0),
 fParticleName(""),
 fConfig(0x0)
 {
-  // ctor
+  /// ctor
 
   GetFileNameAndDirectory(filename);
 
   GetCollections(fFilename,fDirectory,fMergeableCollection,fCounterCollection,fBinning,fRunNumbers);
 
-  if ( IsSimulation() )
-  {
-    SetParticleNameFromFileName(fFilename);
-  }
+  if ( IsSimulation() ) SetParticleNameFromFileName(fFilename);
 
-  if ( fCounterCollection )
-  {
-    if ( strlen(associatedSimFileName) )
-    {
-      fAssociatedSimulation = new AliAnalysisMuMu(associatedSimFileName);
-    }
+  if ( fCounterCollection ) {
 
-    if ( strlen(associatedSimFileName2) )
-    {
-      fAssociatedSimulation2 = new AliAnalysisMuMu(associatedSimFileName2);
-    }
+    if ( strlen(associatedSimFileName) ) fAssociatedSimulation = new AliAnalysisMuMu(associatedSimFileName);
+    if ( strlen(associatedSimFileName2) ) fAssociatedSimulation2 = new AliAnalysisMuMu(associatedSimFileName2);
 
     fConfig = new AliAnalysisMuMuConfig;
 
@@ -148,16 +136,10 @@ fConfig(0x0)
 //_____________________________________________________________________________
 AliAnalysisMuMu::~AliAnalysisMuMu()
 {
-  // dtor
+  /// dtor
 
-  if ( fAssociatedSimulation )
-  {
-    fAssociatedSimulation->Update();
-  }
-  if ( fAssociatedSimulation2 )
-  {
-    fAssociatedSimulation2->Update();
-  }
+  if ( fAssociatedSimulation ) fAssociatedSimulation->Update();
+  if ( fAssociatedSimulation2 ) fAssociatedSimulation2->Update();
 
   Update();
 
@@ -176,14 +158,17 @@ void AliAnalysisMuMu::BasicCounts(Bool_t detailTriggers,
                                   ULong64_t* totalNmsl,
                                   ULong64_t* totalNmul)
 {
-  // Report of some basic trigger counts (for MB,MUL and MSL)
-  // both before and after physics selection.
-  //
-  // Amount all the triggers available in our counter collection,
-  // we only consider the triggers that are defined in the configuration
-  //
-  // If detailTriggers is kTRUE, will show the detail, including Physics Selection fraction,
-  // for each trigger found (as opposed to just showing info for MB,MSL and MUL triggers)
+/**
+ * @brief Report of some basic trigger counts (for MB,MUL and MSL) both before and after physics selection.
+ * @details Amount all the triggers available in our counter collection,we only consider the triggers that are defined in the configuration.
+ * If detailTriggers is kTRUE, will show the detail, including Physics Selection fraction,
+ * for each trigger found (as opposed to just showing info for MB,MSL and MUL triggers)
+ *
+ * @param detailTriggers
+ * @param totalNmb
+ * @param totalNmsl
+ * @param totalNmul
+ */
 
   if (!fMergeableCollection || !fCounterCollection) return;
 
@@ -204,9 +189,9 @@ void AliAnalysisMuMu::BasicCounts(Bool_t detailTriggers,
   ULong64_t localNmsl(0);
   ULong64_t localNmul(0);
 
-  if ( totalNmb) *totalNmb = 0;
+  if ( totalNmb)  *totalNmb = 0;
   if ( totalNmsl) *totalNmsl = 0;
-  if ( totalNmul ) *totalNmul = 0;
+  if ( totalNmul )*totalNmul = 0;
 
   while ( ( srun = static_cast<TObjString*>(nextRun()) ) )
   {
@@ -241,30 +226,26 @@ void AliAnalysisMuMu::BasicCounts(Bool_t detailTriggers,
 
         details += TString::Format(" PS %5.1f %%",nps*100.0/n);
 
-        if (nps)
-        {
-          ++nofPS;
-        }
-
+        if (nps) ++nofPS;
       }
 
       if ( Config()->Has(Config()->MinbiasTriggerKey(),strigger->String(),IsSimulation() ) )
       {
-        nmb += n;
+        nmb             += n;
         if ( totalNmb) (*totalNmb) += n;
-        localNmb += n;
+        localNmb        += n;
       }
       else if ( Config()->Has(Config()->MuonTriggerKey(),strigger->String(),IsSimulation()))
       {
-        nmsl += n;
+        nmsl             += n;
         if ( totalNmsl) (*totalNmsl) += n;
-        localNmsl += n;
+        localNmsl        += n;
       }
       else if ( Config()->Has(Config()->DimuonTriggerKey(),strigger->String(),IsSimulation()) )
       {
-        nmul += n;
+        nmul              += n;
         if ( totalNmul ) (*totalNmul) += n;
-        localNmul += n;
+        localNmul         += n;
       }
     }
 
@@ -272,18 +253,13 @@ void AliAnalysisMuMu::BasicCounts(Bool_t detailTriggers,
                  nmb,nmsl,nmul,(nofPS == 0 ? "(NO PS AVAIL)": ""));
 
 
-    if ( detailTriggers )
-    {
-      std::cout << details.Data();
-    }
+
+    if ( detailTriggers ) std::cout << details.Data();
+
     std::cout << std::endl;
   }
 
-  if ( !totalNmul && !totalNmsl && !totalNmb )
-  {
-    std::cout << std::endl << Form("%13s MB %10lld MSL %10lld MUL %10lld ","TOTAL",
-                                   localNmb,localNmsl,localNmul) << std::endl;
-  }
+  if ( !totalNmul && !totalNmsl && !totalNmb ) std::cout << std::endl << Form("%13s MB %10lld MSL %10lld MUL %10lld ","TOTAL",localNmb,localNmsl,localNmul) << std::endl;
 
   delete runs;
   delete triggers;
@@ -295,390 +271,237 @@ void AliAnalysisMuMu::BasicCounts(Bool_t detailTriggers,
 //_____________________________________________________________________________
 void AliAnalysisMuMu::CleanAllSpectra()
 {
-    /// Delete all the spectra we may have
-
-    OC()->RemoveByType("AliAnalysisMuMuSpectra");
-    Update();
+  /**
+  * @brief Delete all the spectra we may have
+  */
+  OC()->RemoveByType("AliAnalysisMuMuSpectra");
+  Update();
 }
 
 //_____________________________________________________________________________
 void AliAnalysisMuMu::CleanFNorm()
 {
-    /// Delete all the spectra we may have
+  /**
+  * @brief Delete the FNorm related results we may have
+  */
 
-    OC()->Prune("/FNORM");
-    Update();
+  OC()->Prune("/FNORM");
+  Update();
 }
 
-
 //_____________________________________________________________________________
-TObjArray* AliAnalysisMuMu::CompareJpsiPerCMUUWithBackground(const char* jpsiresults,
-                                                                   const char* backgroundresults)
+void AliAnalysisMuMu::CleanMix()
 {
-  TFile* fjpsi = FileOpen(jpsiresults);
-  TFile* fbck = FileOpen(backgroundresults);
-
-  if (!fjpsi || !fbck) return 0x0;
-
-  TGraph* gjpsi = static_cast<TGraph*>(fjpsi->Get("jpsipercmuu"));
-
-  std::vector<std::string> checks;
-
-  checks.push_back("muminus-CMUU7-B-NOPF-ALLNOTRD");
-  checks.push_back("muplus-CMUU7-B-NOPF-ALLNOTRD");
-  checks.push_back("muminus-CMUSH7-B-NOPF-MUON");
-  checks.push_back("muplus-CMUSH7-B-NOPF-MUON");
-
-  if (!gjpsi) return 0x0;
-
-  TObjArray* a = new TObjArray;
-  a->SetOwner(kTRUE);
-
-  for ( std::vector<std::string>::size_type j = 0; j < checks.size(); ++j )
-  {
-
-    TGraph* gback = static_cast<TGraph*>(fbck->Get(checks[j].c_str()));
-
-    if (!gback) continue;
-
-    if ( gjpsi->GetN() != gback->GetN() )
-    {
-      AliErrorClass("graphs have different number of points !");
-      continue;
-    }
-
-    TGraphErrors* g = new TGraphErrors(gjpsi->GetN());
-
-    for ( int i = 0; i < gjpsi->GetN(); ++i )
-    {
-      double r1,r2,y1,y2;
-
-      gjpsi->GetPoint(i,r1,y1);
-      gback->GetPoint(i,r2,y2);
-
-      if ( r1 != r2 )
-      {
-        AliWarningClass(Form("run[%d]=%d vs %d",i,(int)r1,(int)r2));
-        continue;
-      }
-
-      g->SetPoint(i,y2,y1);
-      //    g->SetPointError(i,gjpsi->GetErrorY(i),gback->GetErrorY(i));
-    }
-
-    g->SetMarkerStyle(25+j);
-    g->SetMarkerSize(1.2);
-    if (j==0)
-    {
-      g->Draw("ap");
-    }
-    else
-    {
-      g->Draw("p");
-    }
-    g->SetLineColor(j+1);
-    g->SetMarkerColor(j+1);
-    g->SetName(checks[j].c_str());
-    a->AddLast(g);
-  }
-
-  return a;
+  /**
+   * @brief Delete all the spectra we may have
+   */
+  OC()->Prune("/MIX");
+  Update();
 }
 
 //_____________________________________________________________________________
-TGraph* AliAnalysisMuMu::CompareJpsiPerCMUUWithSimu(const char* realjpsiresults,
-                                                    const char* simjpsiresults)
+void AliAnalysisMuMu::DrawFitResults(const char* spectraName,
+                                     const char* subresults,
+                                     Bool_t mix,
+                                     Bool_t AccEffCorr
+                                     )const
 {
-  TFile* freal = FileOpen(realjpsiresults);
-  TFile* fsim = FileOpen(simjpsiresults);
-
-  if (!freal || !fsim) return 0x0;
-
-  TGraph* greal = static_cast<TGraph*>(freal->Get("jpsipercmuu"));
-  TGraph* gsim = static_cast<TGraph*>(fsim->Get("jpsipercmuu"));
-
-  TObjArray* a = new TObjArray;
-  a->SetOwner(kTRUE);
-
-  if ( greal->GetN() != gsim->GetN() )
-  {
-    AliErrorClass("graphs have different number of points !");
-    return 0x0;
-  }
-
-  TGraphErrors* g = new TGraphErrors(greal->GetN());
-  TGraphErrors* gratio = new TGraphErrors(greal->GetN());
-
-  for ( int i = 0; i < greal->GetN(); ++i )
-  {
-    double r1,r2,y1,y2;
-
-    greal->GetPoint(i,r1,y1);
-    gsim->GetPoint(i,r2,y2);
-
-    if ( r1 != r2 )
-    {
-      AliWarningClass(Form("run[%d]=%d vs %d",i,(int)r1,(int)r2));
-      continue;
-    }
-
-    double ratio(0.0);
-
-    if ( TMath::Abs(y1)<1E-6 || TMath::Abs(y2)<1E-6)
-    {
-      g->SetPoint(i,0,0);
-      g->SetPointError(i,0,0);
-    }
-    else
-    {
-      g->SetPoint(i,y2,y1);
-      g->SetPointError(i,greal->GetErrorY(i),gsim ->GetErrorY(i));
-      ratio = y2/y1;
-    }
-    gratio->SetPoint(i,r1,ratio);
+  /**
+  * @brief Draw all fit results
+  * @details Draw all results/subresults (i.e fit functions) spectras on a single canvas for every combination of Trigger/eventType/centrality/Pair cut.
+  *
+  * @param particle    particle name
+  * @param binType     [description]
+  * @param subresults  If one wants to draw one/several specific results. Tokenized by ','
+  * @param AccEffCorr  Spectra type
+  */
+
+  if (!OC() || !CC()){
+    AliError("No mergeable/counter collection. Consider Upgrade()");
+    return ;
   }
 
-  g->SetMarkerStyle(25);
-  g->SetMarkerSize(1.2);
-
-  new TCanvas;
-
-  g->Draw("ap");
+  // Get configuration settings
 
-  g->SetLineColor(1);
-  g->SetMarkerColor(1);
-  g->SetName("jpsipercmuurealvssim");
+  TObjArray* pairCutArray    = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+  TObjArray* centralityArray = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
 
-  new TCanvas;
+  TObjArray* triggerArray(0x0);
+  if (!mix) triggerArray = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
+  else                              triggerArray = Config()->GetListElements(Config()->MixTriggerKey(),IsSimulation());
 
-  greal->Draw("alp");
-  gsim->SetLineColor(4);
+  TObjArray* eventTypeArray(0x0);
+  if (!mix) eventTypeArray = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
+  else                              eventTypeArray = Config()->GetListElements(Config()->EventSelectionMixKey(),IsSimulation());
 
-  gsim->Draw("lp");
+  TString refTrigger(Form("%s",Config()->First(Config()->RefMixTriggerKey(),IsSimulation()).Data()));
+  TString refEvent(Form("%s",Config()->First(Config()->RefMixEventSelectionKey(),IsSimulation()).Data()));
 
-  new TCanvas;
-  gratio->Draw("alp");
-
-  return g;
-}
-
-//_____________________________________________________________________________
-void AliAnalysisMuMu::DrawFitResults(const char* particle,
-                                     const char* binType,
-                                     const char* subresults,
-                                     Bool_t AccEffCorr
-                                     )const
-{
-    /// A function to use after JPsi()
-    /// Draw all results/subresults (i.e fit functions) spectras on a single canvas for every combination of Trigger / event Type / centrality / Pair cut.
+  // Iterater for loops
+  TIter nextTrigger(triggerArray);
+  TIter nextEventType(eventTypeArray);
+  TIter nextPairCut(pairCutArray);
+  TIter nextCentrality(centralityArray);
 
-    if (!OC() || !CC())
-        {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-        }
+  // Strings
+  TObjString* strigger;
+  TObjString* seventType;
+  TObjString* spairCut;
+  TObjString* scentrality;
 
+  AliAnalysisMuMuSpectra * spectra=0x0;
 
-    // Get configuration settings
-    TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
-    TObjArray* triggerArray     = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
-    TObjArray* fitfunctionArray = Config()->GetListElements(Config()->FitTypeKey(),IsSimulation());// to add here an entry
-    TObjArray* pairCutArray     = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
-    TObjArray* centralityArray  = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
-    TObjArray* particleArray    = TString(particle).Tokenize(",");
-    TObjArray* binTypeArray     = TString(binType).Tokenize(",");
-    TObjArray* bins;
+  //Loop on particle
+  nextEventType.Reset();
 
-    // Iterater for loops
-    TIter nextTrigger(triggerArray);
-    TIter nextEventType(eventTypeArray);
-    TIter nextPairCut(pairCutArray);
-    TIter nextParticle(particleArray);
-    TIter nextBinType(binTypeArray);
-    TIter nextCentrality(centralityArray);
+  // Loop on each envenType (see MuMuConfig)
+  while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+  {
+    AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
+    nextTrigger.Reset();
 
-    // Strings
-    TObjString* strigger;
-    TObjString* seventType;
-    TObjString* spairCut;
-    TObjString* sparticle;
-    TObjString* sbinType;
-    TObjString* scentrality;
+    // Loop on each trigger (see MuMuConfig)
+    while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
+    {
+      AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
+      nextCentrality.Reset();
 
-    AliAnalysisMuMuSpectra * spectra=0x0;
+      // Loop on each centrality (not the ones in MuMuConfig but the ones set)
+      while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
+      {
+        AliDebug(1,Form("--CENTRALITY %s",scentrality->String().Data()));
+        nextPairCut.Reset();
 
-    //Loop on particle
-    while ( ( sparticle = static_cast<TObjString*>(nextParticle()) ) )
+        // Loop on each paircut (not the ones in MuMuConfig but the ones set)
+        while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
         {
-        AliDebug(1,Form("particle %s",sparticle->String().Data()));
-        nextEventType.Reset();
-
-        // Loop on each envenType (see MuMuConfig)
-        //==============================================================================
-        while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
-            {
-            AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
-            nextTrigger.Reset();
-
-            // Loop on each trigger (see MuMuConfig)
-            //==============================================================================
-            while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
-                {
-                AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
-                nextCentrality.Reset();
-
-                // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-                //==============================================================================
-                while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
-                    {
-                    AliDebug(1,Form("--CENTRALITY %s",scentrality->String().Data()));
-                    nextPairCut.Reset();
-
-                    // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-                    //==============================================================================
-                    while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
-                        {
-                        AliDebug(1,Form("---PAIRCUT %s",spairCut->String().Data()));
-                        nextBinType.Reset();
+          AliDebug(1,Form("---PAIRCUT %s",spairCut->String().Data()));
 
-                        // Loop on each binType (PT or Y)
-                        //==============================================================================
-                        while ( ( sbinType = static_cast<TObjString*>(nextBinType()) ) )
-                            {
-                            AliDebug(1,Form("----TYPE %s",sbinType->String().Data()));
-                            // Output message
-                            cout << "---------------------" << endl;
-                            cout << "Looking for spectras ..."<< endl;
+          cout << "---------------------" << endl;
+          cout << "Looking for spectras ..."<< endl;
 
-                            //________Get spectra
-                            TString spectraPath= Form("/%s/%s/%s/%s/%s-%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),sparticle->String().Data(),sbinType->String().Data());
-                            if (AccEffCorr)spectraPath+="-AccEffCorr";
+          // Get spectra
+          TString spectraPath ="";
+          if(mix)
+            spectraPath = Form("/FitResults/%s_%s/%s/%s/%s/%s/%s",refEvent.Data(),refTrigger.Data(),seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),spectraName);
+          else
+            spectraPath = Form("/FitResults/%s/%s/%s/%s/%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),spectraName);
+          if (AccEffCorr)spectraPath+="-AccEffCorr";
 
-                            AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
-                            if(!spectra){
-                              AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
-                              return;
-                            }
-                            //________
+          AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
+          if(!spectra){
+            AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
+            return;
+          }
 
-                            // Create pointer on fitted spectra. Any kind of capsule do the job
-                            AliAnalysisMuMuSpectraCapsulePbPb * capsule = new AliAnalysisMuMuSpectraCapsulePbPb(spectra,spectraPath,"","");
-                            if(!capsule){
-                              AliError("Could not find spetra !");
-                              return;
-                            }
-                            // Draw results
-                            capsule->DrawResults(particle,subresults);
-                            delete capsule;
-                            }
-                        }
-                    }
-                }
-            }
+          // Create pointer on fitted spectra. Any kind of capsule do the job
+          AliAnalysisMuMuSpectraCapsulePbPb * capsule = new AliAnalysisMuMuSpectraCapsulePbPb(spectra,spectraPath,"","");
+          if(!capsule){
+            AliError("Could not find spetra !");
+            return;
+          }
+          // Draw results
+          TString sspectraName(spectraName);
+          if(sspectraName.Contains("PSI-"))capsule->DrawResults("PSI",subresults);
+          delete capsule;
         }
+      }
+    }
+  }
 
-    delete eventTypeArray ;
-    delete triggerArray ;
-    delete fitfunctionArray ;
-    delete pairCutArray ;
-    delete centralityArray ;
-    delete particleArray ;
-    delete binTypeArray ;
 
-    return ;
+  delete eventTypeArray ;
+  delete triggerArray ;
+  delete pairCutArray ;
+  delete centralityArray ;
+
+  return ;
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::PrintFitParam( const char* particle,
-                                     const char* param,
-                                     const char* binType,
-                                     const char* subresult,
-                                     const char* printDirectoryPath,
-                                     Bool_t AccEffCorr
-                                     )const
+void AliAnalysisMuMu::PrintFitParam( const char* particle,const char* param,const char* binType,const char* subresult,Bool_t AccEffCorr)const
 {
-    /// Draw fit parameter versus bin
-
-    if (!OC() || !CC())
-        {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-        }
-
-
-    // Get configuration settings
-    TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
-    TObjArray* triggerArray     = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
-    TObjArray* fitfunctionArray = Config()->GetListElements(Config()->FitTypeKey(),IsSimulation());// to add here an entry
-    TObjArray* pairCutArray     = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
-    TObjArray* centralityArray  = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
-    TObjArray* paramArray    = TString(param).Tokenize(",");
-    TObjArray* binTypeArray     = TString(binType).Tokenize(",");
-    TObjArray* subresultArray     = TString(subresult).Tokenize(",");
-    TObjArray* bins;
-
-    // Iterater for loops
-    TIter nextTrigger(triggerArray);
-    TIter nextEventType(eventTypeArray);
-    TIter nextPairCut(pairCutArray);
-    TIter nextparam(paramArray);
-    TIter nextBinType(binTypeArray);
-    TIter nextSubResult(subresultArray);
-    TIter nextCentrality(centralityArray);
-
-    // Strings
-    TObjString* strigger;
-    TObjString* seventType;
-    TObjString* spairCut;
-    TObjString* sparam;
-    TObjString* sbinType;
-    TObjString* ssubresult;
-    TObjString* scentrality;
-
-    AliAnalysisMuMuSpectra* spectra=0x0;
-    TObjArray* histoArray = new TObjArray(); // For centrality
-    TH1                   *h =0x0;
-    TH1                   *hcent =0x0;
-    TH1                   *href =0x0;
+/**
+ * @brief Draw fit parameters
+ *
+ * @param particle   particle name
+ * @param param      Tokenized by ','
+ * @param binType    [description]
+ * @param subresult  If one wants to draw one/several specific results. Tokenized by ','
+ * @param AccEffCorr  Spectra type
+ */
+  if (!OC() || !CC()){
+    AliError("No mergeable/counter collection. Consider Upgrade()");
+    return ;
+  }
 
+  // Get configuration settings
+  TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
+  TObjArray* triggerArray     = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
+  TObjArray* fitfunctionArray = Config()->GetListElements(Config()->FitTypeKey(),IsSimulation());
+  TObjArray* pairCutArray     = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+  TObjArray* centralityArray  = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
+  TObjArray* paramArray       = TString(param).Tokenize(",");
+  TObjArray* binTypeArray     = TString(binType).Tokenize(",");
+  TObjArray* subresultArray   = TString(subresult).Tokenize(",");
+  TObjArray* bins;
+
+  // Iterater for loops
+  TIter nextTrigger(triggerArray);
+  TIter nextEventType(eventTypeArray);
+  TIter nextPairCut(pairCutArray);
+  TIter nextparam(paramArray);
+  TIter nextBinType(binTypeArray);
+  TIter nextSubResult(subresultArray);
+  TIter nextCentrality(centralityArray);
+
+  // Strings
+  TObjString* strigger;
+  TObjString* seventType;
+  TObjString* spairCut;
+  TObjString* sparam;
+  TObjString* sbinType;
+  TObjString* ssubresult;
+  TObjString* scentrality;
+
+  AliAnalysisMuMuSpectra* spectra=0x0;
+  TObjArray* histoArray = new TObjArray(); // For centrality
+  TH1*       h          = 0x0;
+  TH1*       hcent      = 0x0;
+  TH1*       href       =0x0;
+
+
+  //Loop on param
+  while ( ( sparam = static_cast<TObjString*>(nextparam()) ) )
+  {
+    AliDebug(1,Form("param %s",sparam->String().Data()));
+    nextEventType.Reset();
 
-    //Loop on param
-    while ( ( sparam = static_cast<TObjString*>(nextparam()) ) )
+    // Loop on each envenType (see MuMuConfig)
+    while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
     {
-      AliDebug(1,Form("param %s",sparam->String().Data()));
-      nextEventType.Reset();
+      AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
+      nextTrigger.Reset();
 
-      // Loop on each envenType (see MuMuConfig)
-      //==============================================================================
-      while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+      // Loop on each trigger (see MuMuConfig)
+      while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
       {
-        AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
-        nextTrigger.Reset();
+        AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
+        nextCentrality.Reset();
 
-        // Loop on each trigger (see MuMuConfig)
-        //==============================================================================
-        while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
+        // Loop on each paircut (not the ones in MuMuConfig but the ones set)
+        while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
         {
-          AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
-          nextCentrality.Reset();
-
-          // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-          //==============================================================================
-          while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
-          {
           AliDebug(1,Form("---PAIRCUT %s",spairCut->String().Data()));
           nextBinType.Reset();
 
           // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-          //==============================================================================
           while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
           {
             AliDebug(1,Form("--CENTRALITY %s",scentrality->String().Data()));
             nextPairCut.Reset();
 
-
             // Loop on each binType (PT or Y)
-            //==============================================================================
             while ( ( sbinType = static_cast<TObjString*>(nextBinType()) ) )
             {
               AliDebug(1,Form("----TYPE %s",sbinType->String().Data()));
@@ -696,17 +519,15 @@ void AliAnalysisMuMu::PrintFitParam( const char* particle,
                 return;
               }
 
-              TCanvas *c = 0x0;
-              TLegend * leg = 0x0;
+              TCanvas*c = 0x0;
+              TLegend*leg = 0x0;
               new TLegend(0.4,0.7,0.70,0.9);
 
-              // if(!sbinType->String().Contains("INTEGRATED")){
-                c = new TCanvas;
-                leg = new TLegend(0.4,0.7,0.70,0.9);
-                c->Divide(1,2,0,0);
-                leg->SetHeader(Form("Fit Parameters %s ",sparam->String().Data()));
-                leg->SetTextSize(0.03);
-              // }
+              c = new TCanvas;
+              leg = new TLegend(0.4,0.7,0.70,0.9);
+              c->Divide(1,2,0,0);
+              leg->SetHeader(Form("Fit Parameters %s ",sparam->String().Data()));
+              leg->SetTextSize(0.03);
 
               if(c) // Same as !INTEGRATED
               {
@@ -770,11 +591,11 @@ void AliAnalysisMuMu::PrintFitParam( const char* particle,
                   AliDebug(1,Form("-----SubResults %s",ssubresult->String().Data()));
                   h = spectra->Plot(param,ssubresult->String().Data(),kFALSE);
 
-                  if(!h || !href )
-                  {
+                  if(!h || !href ) {
                     AliError(Form("Cannot find histos for SubResults  ratio "));
                     return;
                   }
+
                   if(j!=3 &&j!=5 )h->SetMarkerColor(j); //nobody likes green and yellow
                   h->SetMarkerSize(1.);
                   h->SetMarkerStyle(20+j);
@@ -785,8 +606,7 @@ void AliAnalysisMuMu::PrintFitParam( const char* particle,
 
                   leg2->AddEntry(h,Form("Results %d over Result 1",j),"pe");
                   j++;
-                  if (h)
-                  {
+                  if (h) {
                     printf("Replacing %s",h->GetName());
                     OC()->Remove(Form("/%s/%s/%s/%s/FITPARAM/%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),h->GetName()));
                   }
@@ -794,11 +614,11 @@ void AliAnalysisMuMu::PrintFitParam( const char* particle,
                   if ( adoptOK ) std::cout << "+++projection histo " << h->GetName() << " adopted" << std::endl;
                 }
                 leg2->Draw("same");
+
               } else {
                 nextSubResult.Reset();
                 int i= 1;
-                while ( ( ssubresult = static_cast<TObjString*>(nextSubResult()) ) )
-                {
+                while ( ( ssubresult = static_cast<TObjString*>(nextSubResult()) ) ){
                   //Loop over subresults
                   AliDebug(1,Form("-----SubResults %s",ssubresult->String().Data()));
                   h = spectra->Plot(param,ssubresult->String().Data(),kFALSE);
@@ -806,13 +626,10 @@ void AliAnalysisMuMu::PrintFitParam( const char* particle,
                     AliError(Form("Cannot find histo for SubResults %s",ssubresult->String().Data()));
                     return;
                   }
-                  // histoArray->Add(h->Clone());
                 }
               }
             }
           }
-
-          //Output for INTEGRATED
         }
       }
     }
@@ -829,30 +646,317 @@ void AliAnalysisMuMu::PrintFitParam( const char* particle,
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::DrawMinv(const char* type,
-                               const char* particle,
-                               const char* trigger,
-                               const char* eventType,
-                               const char* pairCut,
-                               const char* centrality,
-                               const char* subresultname,
-                               const char* flavour) const
+void AliAnalysisMuMu::DivideRawMixHisto(const char* binType, const char* particle, const char* flavour, Bool_t corrected, Double_t Mmin, Double_t Mmax)
 {
-  /// Draw minv spectra for binning of given type
-
-  if (!OC() || !BIN()) return;
+/**
+ * @brief Divide raw histo with the related mix histo
+ * @details To be run after NormMixEvent (run-by-run) on the merged file.
+ *
+ * Mixed Histograms are selected according to Mix...Key() in config. file. See AliAnalysisMuMuConfig class.
+ *
+ * @param binType    [description]
+ * @param particle   particle name
+ * @param flavour    [description]
+ * @param corrected  If Minv are already AccxEff corrected or not
+ */
+    if(!OC())
+    {
+        AliError("No mergeable. Consider Upgrade()");
+        return;
+    }
+    else
+    {
+        cout <<      " ================================================================ " << endl;
+        cout <<      "                       DivideRawMixHisto                  " << endl;
+        cout <<      " ================================================================ " << endl;
+    }
 
-  TObjArray* bins = BIN()->CreateBinObjArray(particle,type,flavour);
-  if (!bins)
-  {
-    AliError(Form("Could not get %s bins",type));
-    return;
-  }
+    // Get configuration settings
+    TObjArray* eventTypeArray    = Config()->GetListElements(Config()->RefMixEventSelectionKey(),IsSimulation());
+    TObjArray* triggerArray      = Config()->GetListElements(Config()->RefMixTriggerKey(),IsSimulation());
+    TObjArray* eventTypeMixArray = Config()->GetListElements(Config()->EventSelectionMixKey(),IsSimulation());
+    TObjArray* triggerMixArray   = Config()->GetListElements(Config()->MixTriggerKey(),IsSimulation());
+    TObjArray* pairCutArray      = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+    TObjArray* centralityArray   = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
+    TObjArray* binTypeArray      = TString(binType).Tokenize(",");
 
-  Double_t xmin(-1);
-  Double_t xmax(-1);
+    TObjArray* bins;
 
-  TString sparticle(particle);
+    // Iterator for loops
+    TIter nextTrigger(triggerArray);
+    TIter nextTriggerMix(triggerMixArray);
+    TIter nextEventType(eventTypeArray);
+    TIter nextEventTypeMix(eventTypeMixArray);
+    TIter nextPairCut(pairCutArray);
+    TIter nextbinType(binTypeArray);
+    TIter nextCentrality(centralityArray);
+
+    // Strings
+    TObjString* strigger;
+    TObjString* seventType;
+    TObjString* spairCut;
+    TObjString* sbinType;
+    TObjString* scentrality;
+    TObjString* sTriggerMix;
+    TObjString* seventTypeMix;
+
+    // Pointers
+    TH1* hTableMinv[6] = {0x0,0x0,0x0,0x0,0x0,0x0};
+    //                      {hMinvPM,hMinvPP,hMinvMM,hMinvMixPM,hMinvMixPP,hMinvMixMM};
+    TH1* hTableDistRaw[6] = {0x0,0x0,0x0,0x0,0x0,0x0};
+    //                      {hpT,hpTPP,hpTMM,hY,hYPP,hYMM};
+    TH1* hTableDistMix[6] = {0x0,0x0,0x0,0x0,0x0,0x0};
+    //                      {hpTMix,hpTMixPP,hpTMixMM,hYMix,hYMixPP,hYMixMM};
+
+    // For the loop comming
+    TString signFlagMinv[3] ={"","PlusPlus","MinusMinus"};
+    TString signFlagDist[3] ={"","PP","MM"};
+
+    THnSparse* n        =0x0;
+    TObject* o          =0x0;
+    TH1* hRCoef;
+
+    // Get Binning
+    AliAnalysisMuMuBinning* binning(0x0);
+
+    // Loop on each envenTypeMix (see MuMuConfig)
+    while ( ( seventTypeMix = static_cast<TObjString*>(nextEventTypeMix())) ){
+      AliDebug(1,Form("EVENTTYPEMIX %s",seventTypeMix->String().Data()));
+      nextTriggerMix.Reset();
+
+      // Loop on each triggerMix (see MuMuConfig)
+      while ( ( sTriggerMix = static_cast<TObjString*>(nextTriggerMix())) ){
+        AliDebug(1,Form("-TRIGGERMIX %s",sTriggerMix->String().Data()));
+        nextEventType.Reset();
+
+        // Loop on each envenType (see MuMuConfig)
+        while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+        {
+          AliDebug(1,Form("--REFEVENTTYPE %s",seventType->String().Data()));
+          nextTrigger.Reset();
+
+          // Loop on each trigger (see MuMuConfig)
+          while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
+          {
+            AliDebug(1,Form("---REFTRIGGER %s",strigger->String().Data()));
+            nextPairCut.Reset();
+
+            // Loop on each paircut (see MuMuConfig)
+            while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
+            {
+              AliDebug(1,Form("----PAIRCUT %s",spairCut->String().Data()));
+              nextbinType.Reset();
+
+              // Loop on each type (see MuMuConfig)
+              while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+              {
+                AliDebug(1,Form("-----TYPE %s",sbinType->String().Data()));
+                nextCentrality.Reset();
+
+                // Loop on each centrality (see MuMuConfig)
+                while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
+                {
+                  AliDebug(1,Form("------CENTRALITY %s",scentrality->String().Data()));
+                  nextbinType.Reset();
+
+                  // Loop on each centrality (see MuMuConfig)
+                  while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+                  {
+                    AliDebug(1,Form("-------BIN %s",sbinType->String().Data()));
+
+                    // Get binning
+                    if ( fBinning && sbinType->String().Length() > 0 ) binning = fBinning->Project(particle,sbinType->String().Data(),flavour);
+                    else  {
+                      binning = new AliAnalysisMuMuBinning;
+                      binning->AddBin(particle,sbinType->String().Data());
+                    }
+                    if (!binning) {
+                      AliError("oups. binning is NULL");
+                      continue;
+                    }
+
+                    // Create array
+                    TObjArray* bins = binning->CreateBinObjArray(particle);
+                    if (!bins){
+                      AliError(Form("Did not get any bin for particle %s",particle));
+                      continue;
+                    }
+
+                    // Create ID for the fit which will be used to name results
+                    TString idMix(Form("/%s/%s/%s/%s",seventTypeMix->String().Data(),sTriggerMix->String().Data(),scentrality->String().Data(),spairCut->String().Data()));
+                    AliDebug(1,Form("idMix = %s\n",idMix.Data() ));
+                    TString idMinv(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()));
+                    AliDebug(1,Form("idMinv = %s\n",idMinv.Data() ));
+                    TString idDist(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()));
+                    AliDebug(1,Form("idDist = %s\n",idDist.Data() ));
+
+                    // The binning pointer, which point at Pt binning, Y binning etc.
+                    AliAnalysisMuMuBinning::Range* bin;
+                    TIter next(bins);
+
+                    //MAIN PART : Loop on every binning range
+                    while ( ( bin = static_cast<AliAnalysisMuMuBinning::Range*>(next())) )
+                    {
+                      // Get Minv Histo
+                      for (int j = 0; j < 3; ++j) {
+                        TString hnameraw = corrected ? Form("MinvUS+%s%s_AccEffCorr",bin->AsString().Data(),signFlagMinv[j].Data()) : Form("MinvUS+%s%s",bin->AsString().Data(),signFlagMinv[j].Data());
+                        TString hnamemix = corrected ? Form("MinvUS+%s%sMix_AccEffCorr",bin->AsString().Data(),signFlagMinv[j].Data()) : Form("MinvUS+%s%sMix",bin->AsString().Data(),signFlagMinv[j].Data());
+                        // Pointer to the histo from histo collection (Yes it is discusting )
+                        if ( OC()->Histo(idMinv.Data(),hnameraw.Data()) ) hTableMinv[j] = static_cast<TH1*>(OC()->Histo(idMinv.Data(),hnameraw.Data())->Clone());
+                        else { AliError(Form("Could not find histo %s/%s",idMinv.Data(),hnameraw.Data())); continue ; }
+
+                        if ( OC()->Histo(idMinv.Data(),hnamemix.Data()) ) hTableMinv[j+3] = static_cast<TH1*>(OC()->Histo(idMinv.Data(),hnamemix.Data())->Clone());
+                        else { AliError(Form("Could not find histo %s/%s",idMinv.Data(),hnamemix.Data())); continue ; }
+                      }
+
+                      // Get Dist Histo
+                      for (int j = 0; j < 3; ++j) {
+                        // TString hnamePt = corrected ? Form("Pt%s_AccEffCorr_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax) : Form("Pt%s_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax);
+                        TString hnamePt = corrected ? Form("Pt%s_AccEffCorr",signFlagDist[j].Data()) : Form("Pt%s",signFlagDist[j].Data());
+                        // TString hnameY  = corrected ? Form("Y%s_AccEffCorr_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax) : Form("Y%s_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax);
+                        TString hnameY  = corrected ? Form("Y%s_AccEffCorr",signFlagDist[j].Data()) : Form("Y%s",signFlagDist[j].Data());
+
+                        // TString hnamePtMix = corrected ? Form("PtMix%s_AccEffCorr_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax) : Form("PtMix%s_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax);
+                        TString hnamePtMix = corrected ? Form("PtMix%s_AccEffCorr",signFlagDist[j].Data()) : Form("PtMix%s",signFlagDist[j].Data());
+                        // TString hnameYMix  = corrected ? Form("YMix%s_AccEffCorr_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax) : Form("YMix%s_proj_0_%.2f_%.2f",signFlagDist[j].Data(),Mmin,Mmax);
+                        TString hnameYMix  = corrected ? Form("YMix%s_AccEffCorr",signFlagDist[j].Data()) : Form("YMix%s",signFlagDist[j].Data());
+
+                        // Pointer to the histo from histo collection (Yes it is discusting )
+                        if ( OC()->GetObject(idDist.Data(),hnamePt.Data()) ){
+                          hTableDistRaw[j] = static_cast<TH1*>(OC()->Histo(idDist.Data(),hnamePt.Data())->Clone());
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idDist.Data(),hnamePt.Data()));
+                          continue ;
+                        }
+
+                        if ( OC()->GetObject(idDist.Data(),hnameY.Data()) ) {
+                          hTableDistRaw[j+3] = static_cast<TH1*>(OC()->Histo(idDist.Data(),hnameY.Data())->Clone());
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idDist.Data(),hnameY.Data()));
+                          continue ;
+                        }
+
+                        if ( OC()->GetObject(idDist.Data(),hnamePtMix.Data()) ){
+                          hTableDistMix[j] = static_cast<TH1*>(OC()->Histo(idDist.Data(),hnamePtMix.Data())->Clone());
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idDist.Data(),hnamePtMix.Data()));
+                          continue ;
+                        }
+
+                        if ( OC()->GetObject(idDist.Data(),hnameYMix.Data()) ) {
+                          hTableDistMix[j+3] = static_cast<TH1*>(OC()->Histo(idDist.Data(),hnameYMix.Data())->Clone());
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idDist.Data(),hnameYMix.Data()));
+                          continue ;
+                        }
+                      }
+                      // --- remove background and make ratio ---
+
+                      for (int i = 0; i < 3; ++i) {
+                        if ( i==0 ) {
+                          hTableMinv[i]->Add(hTableMinv[i+3],-1); // Norm MinvMix histo
+                          hTableMinv[i]->SetName(Form("%s_wbck",hTableMinv[i]->GetName())); // Norm MinvMix histo
+                        }
+                        else {
+                          hTableMinv[i]->Divide(hTableMinv[i+3]); // Norm pt and rapidy mix histo
+                          hTableMinv[i]->SetName(Form("%s_ratio",hTableMinv[i]->GetName())); // Norm MinvMix histo
+                        }
+                      }
+
+                      for (int i = 0; i < 6; ++i) {
+                        hTableDistRaw[i]->Divide(hTableDistMix[i]); // Norm MinvMix histo
+                        hTableDistRaw[i]->SetName(Form("%s_ratio",hTableDistMix[i]->GetName())); // Norm MinvMix histo
+                      }
+
+                      // save results in mergeable collection
+                      for (int i = 0; i < 6; ++i){
+                        o = 0x0;
+                        // Store mix histo
+                        if ( i<3 ) {
+                          o = fMergeableCollection->GetObject(idMinv.Data(),hTableMinv[i]->GetName());
+                          AliDebug(1,Form("----idMinv=%s o=%p",idMinv.Data(),o));
+
+                          if (o) fMergeableCollection->Remove(Form("%s/%s",idMinv.Data(),hTableMinv[i]->GetName()));
+
+                          Bool_t adoptOK = fMergeableCollection->Adopt(idMinv.Data(),hTableMinv[i]);
+
+                          if ( adoptOK ) std::cout << "\n" << "+++histo " << hTableMinv[i]->GetName() << " adopted in " << idMinv.Data() << std::endl;
+                          else AliError(Form("Could not adopt histo %s",hTableMinv[i]->GetName()));
+                        }
+
+                        o = 0x0;
+                        if ( hTableDistRaw[i] ) {
+                          o = fMergeableCollection->GetObject(idDist.Data(),hTableDistRaw[i]->GetName());
+                          AliDebug(1,Form("----idDist=%s o=%p",idDist.Data(),o));
+
+                          if (o) fMergeableCollection->Remove(Form("%s/%s",idDist.Data(),hTableDistRaw[i]->GetName()));
+
+                          Bool_t adoptOK = fMergeableCollection->Adopt(idDist.Data(),hTableDistRaw[i]);
+
+                          if ( adoptOK ) std::cout << "\n" << "+++histo " << hTableDistRaw[i]->GetName() << " adopted in " << idDist.Data() << std::endl;
+                          else AliError(Form("Could not adopt histo %s",hTableDistRaw[i]->GetName()));
+                        }
+                      }
+
+                       // clean pointers
+                       for (int i = 0; i < 6; ++i)
+                       {
+                          if(hTableMinv[i])hTableMinv[i] = 0x0;
+                          if(hTableDistRaw[i])hTableDistRaw[i] = 0x0;
+                          if(hTableDistMix[i])hTableDistMix[i] = 0x0;
+                       }
+                    }
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+
+    Update();
+
+    delete eventTypeArray;
+    delete eventTypeMixArray;
+    delete triggerMixArray;
+    delete pairCutArray;
+    delete centralityArray;
+    delete triggerArray;
+
+    return;
+}
+
+
+//_____________________________________________________________________________
+void AliAnalysisMuMu::DrawMinv(const char* type,const char* particle,const char* trigger,const char* eventType,const char* pairCut,const char* centrality,const char* subresultname,const char* flavour) const
+{
+  /**
+  * @brief   Draw minv spectra
+  *
+  * @param type          'minv','mpt'...
+  * @param particle      particle name
+  * @param trigger       [description]
+  * @param eventType     [description]
+  * @param pairCut       [description]
+  * @param centrality    [description]
+  * @param subresultname If one wants to draw one/several specific results.
+  * @param flavour       [description]
+  */
+
+  if (!OC() || !BIN()) return;
+
+  TObjArray* bins = BIN()->CreateBinObjArray(particle,type,flavour);
+  if (!bins)
+  {
+    AliError(Form("Could not get %s bins",type));
+    return;
+  }
+
+  Double_t xmin(-1);
+  Double_t xmax(-1);
+
+  TString sparticle(particle);
   if ( sparticle=="PSI" )
   {
     xmin = 2;
@@ -966,9 +1070,15 @@ void AliAnalysisMuMu::DrawMinv(const char* type,
 //_____________________________________________________________________________
 void AliAnalysisMuMu::DrawMinv(const char* type, const char* particle, const char* flavour, const char* subresultname) const
 {
-  /// Draw minv spectra for binning of given type
-
-  //  AliWarning("Reimplement me!");
+  /**
+  * @brief   Draw minv spectra for binning of given type
+  * @details Need to be reimplemented !
+  *
+  * @param type          'minv','mpt'...
+  * @param particle      particle name
+  * @param flavour       [description]
+  * @param subresultname If one wants to draw one/several specific results.
+  */
 
   if (!fConfig)
   {
@@ -1042,330 +1152,328 @@ void AliAnalysisMuMu::ExecuteCanvasEvent(Int_t event, Int_t /*px*/, Int_t /*py*/
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::RAAasGraphic(const char* particle,
-                                   const char* binType,
-                                   const char* externfile,
-                                   const char* externfile2,
-                                   const char* RefCent,
-                                   Bool_t print,
-                                   Bool_t AccEffCorr
-                                   )const
+void AliAnalysisMuMu::RAAasGraphic(const char* particle,const char* binType,const char* externfile,const char* externfile2,const char* RefCent,Bool_t print,Bool_t AccEffCorr)const
 {
-    ///
-    /// Function to use after fitting procedure ( Jpsi() for instance ).
-    /// Loops over all combination of /eventype/trigger/centrality (etc.), compute, store and print RAA on terminal.
-    /// <binType> can be either "PT"/"Y"/"INTEGRATED" for the moment.
-    ///
-    /// Some comments: In case of PT/Y/CENTRALITY(single bin), the method implemented in AliAnalysisMuMuSpectraCapsulePbPb does the job, but for RAAvsCENTRALITY,
-    /// we have to create a new TGraph (see inside for details)
-    ///
-
-    if (!OC() || !CC())
-        {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-        }
-    else
-        {
-        cout <<      " ================================================================ " << endl;
-        cout <<      "                             Computing RAA                             " << endl;
-        cout <<      " ================================================================ " << endl;
-        }
-
-    // Get configuration settings
-    TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
-    TObjArray* triggerArray     = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
-    TObjArray* fitfunctionArray = Config()->GetListElements(Config()->FitTypeKey(),IsSimulation());// to add here an entry
-    TObjArray* pairCutArray     = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
-    TObjArray* centralityArray  = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
-    TObjArray* particleArray    = TString(particle).Tokenize(",");
-    TObjArray* binTypeArray     = TString(binType).Tokenize(",");
-    TObjArray* bins;
-
-    // Iterator for loops
-    TIter nextTrigger(triggerArray);
-    TIter nextEventType(eventTypeArray);
-    TIter nextPairCut(pairCutArray);
-    TIter nextParticle(particleArray);
-    TIter nextbinType(binTypeArray);
-    TIter nextCentrality(centralityArray);
-
-    // Strings
-    TObjString* strigger;
-    TObjString* seventType;
-    TObjString* spairCut;
-    TObjString* sparticle;
-    TObjString* sbinType;
-    TObjString* scentrality;
-
-    // Pointers
-    TGraphErrors* graph=0x0;
-    TGraphErrors* graphErr=0x0;
-    TGraphErrors* graphErrCorr=0x0;
-    TGraphErrors* graphCent=0x0;
-    TGraphErrors* graphCentErr=0x0;
-    TList* list=0x0;
-    AliAnalysisMuMuSpectra spectra=0x0;
-
-    //Loop on particle type
-    while ( ( sparticle = static_cast<TObjString*>(nextParticle()) ) )
-        {
-        AliDebug(1,Form("particle %s",sparticle->String().Data()));
-        nextEventType.Reset();
-        // Loop on each envenType (see MuMuConfig)
-        //==============================================================================
-        while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
-            {
-            AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
-            nextTrigger.Reset();
-            // Loop on each trigger (see MuMuConfig)
-            //==============================================================================
-            while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
-                {
-                AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
-                nextPairCut.Reset();
-                // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-                //==============================================================================
-                while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
-                    {
-                    AliDebug(1,Form("--PAIRCUT %s",spairCut->String().Data()));
-                    nextbinType.Reset();
-                    // Loop on each type (pt or y)
-                    //==============================================================================
-                    while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
-                        {
-                        AliDebug(1,Form("---TYPE %s",sbinType->String().Data()));
+  /**
+   * @brief Compute, store and print R_AA
+   * @details Should be used after a fit process (FitJpsi() for instance). Work is delegated to a AliAnalysisMuMuSpectraCapsule class according to beam year.
+   *
+   * @param particle    particle name
+   * @param binType     [description]
+   * @param externfile  Config. file readed by AliAnalysisMuMuSpectraCapsule classes. See AliAnalysisMuMuSpectraCapsule documentation
+   * @param externfile2 Config. file readed by AliAnalysisMuMuSpectraCapsule classes. See AliAnalysisMuMuSpectraCapsule documentation
+   * @param RefCent     Centrality bin from which we get the number of trigger in the counter collection. V0M_00.00_00.90 by default
+   * @param print       Print error details
+   * @param AccEffCorr  Spectra type
+  */
+  if (!OC() || !CC())
+      {
+      AliError("No mergeable/counter collection. Consider Upgrade()");
+      return ;
+      }
+  else
+      {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                             Computing RAA                             " << endl;
+      cout <<      " ================================================================ " << endl;
+      }
 
-                        //canvas
-                        TCanvas *c1 = new TCanvas;
-                        c1->Draw();
-                        //Divide canvas for pt and y bin
-                        if (!sbinType->String().Contains("INTEGRATED"))
-                        {
-                          Int_t nx(1);
-                          Int_t ny(1);
-                          Int_t nofGraph = centralityArray->GetEntries(); // # of histo
-                          if ( nofGraph == 2 ){
-                            nx=2;
-                            ny=0;
-                          }
-                          else if ( nofGraph > 2 ){
-                            ny = TMath::Nint(TMath::Sqrt(nofGraph));
-                            nx = TMath::Nint((nofGraph/ny) +0.6);
-                          }
-                          c1->Divide(nx,ny);
+  // Get configuration settings
+  TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
+  TObjArray* triggerArray     = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
+  TObjArray* fitfunctionArray = Config()->GetListElements(Config()->FitTypeKey(),IsSimulation());// to add here an entry
+  TObjArray* pairCutArray     = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+  TObjArray* centralityArray  = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
+  TObjArray* particleArray    = TString(particle).Tokenize(",");
+  TObjArray* binTypeArray     = TString(binType).Tokenize(",");
+  TObjArray* bins;
+
+  // Iterator for loops
+  TIter nextTrigger(triggerArray);
+  TIter nextEventType(eventTypeArray);
+  TIter nextPairCut(pairCutArray);
+  TIter nextParticle(particleArray);
+  TIter nextbinType(binTypeArray);
+  TIter nextCentrality(centralityArray);
+
+  // Strings
+  TObjString* strigger;
+  TObjString* seventType;
+  TObjString* spairCut;
+  TObjString* sparticle;
+  TObjString* sbinType;
+  TObjString* scentrality;
+
+  // Pointers
+  TGraphErrors* graph=0x0;
+  TGraphErrors* graphErr=0x0;
+  TGraphErrors* graphErrCorr=0x0;
+  TGraphErrors* graphCent=0x0;
+  TGraphErrors* graphCentErr=0x0;
+  TList* list=0x0;
+  AliAnalysisMuMuSpectra spectra=0x0;
+
+  //Loop on particle type
+  while ( ( sparticle = static_cast<TObjString*>(nextParticle()) ) )
+      {
+      AliDebug(1,Form("particle %s",sparticle->String().Data()));
+      nextEventType.Reset();
+      // Loop on each envenType (see MuMuConfig)
+      //==============================================================================
+      while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+          {
+          AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
+          nextTrigger.Reset();
+          // Loop on each trigger (see MuMuConfig)
+          //==============================================================================
+          while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
+              {
+              AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
+              nextPairCut.Reset();
+              // Loop on each paircut (not the ones in MuMuConfig but the ones set)
+              //==============================================================================
+              while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
+                  {
+                  AliDebug(1,Form("--PAIRCUT %s",spairCut->String().Data()));
+                  nextbinType.Reset();
+                  // Loop on each type (pt or y)
+                  //==============================================================================
+                  while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+                      {
+                      AliDebug(1,Form("---TYPE %s",sbinType->String().Data()));
+
+                      //canvas
+                      TCanvas *c1 = new TCanvas;
+                      c1->Draw();
+                      //Divide canvas for pt and y bin
+                      if (!sbinType->String().Contains("INTEGRATED"))
+                      {
+                        Int_t nx(1);
+                        Int_t ny(1);
+                        Int_t nofGraph = centralityArray->GetEntries(); // # of histo
+                        if ( nofGraph == 2 ){
+                          nx=2;
+                          ny=0;
                         }
-                        else if (sbinType->String().Contains("INTEGRATED")){
-                          graphCent = new TGraphErrors(centralityArray->GetEntries());
-                          graphCent->SetMinimum(0.);
-                          graphCent->SetMaximum(1.2);
-                          graphCentErr = new TGraphErrors(centralityArray->GetEntries());
-                          graphCentErr->SetMinimum(0.);
-                          graphCentErr->SetMaximum(1.2);
+                        else if ( nofGraph > 2 ){
+                          ny = TMath::Nint(TMath::Sqrt(nofGraph));
+                          nx = TMath::Nint((nofGraph/ny) +0.6);
                         }
-                        gStyle->SetOptStat(0);
-
-                        Int_t n=1; // counter
-                        nextCentrality.Reset();
-                        // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-                        //==============================================================================
-                        while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) ) {
-                            AliDebug(1,Form("---CENTRALITY %s",scentrality->String().Data()));
-
-                            //________Get spectra
-                            TString spectraPath= Form("/%s/%s/%s/%s/%s-%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),sparticle->String().Data(),sbinType->String().Data());
-                            if (AccEffCorr)spectraPath+="-AccEffCorr";
-
-                            AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
-                            if(!spectra){//protection
-                              AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
-                              return;
+                        c1->Divide(nx,ny);
+                      }
+                      else if (sbinType->String().Contains("INTEGRATED")){
+                        graphCent = new TGraphErrors(centralityArray->GetEntries());
+                        graphCent->SetMinimum(0.);
+                        graphCent->SetMaximum(1.2);
+                        graphCentErr = new TGraphErrors(centralityArray->GetEntries());
+                        graphCentErr->SetMinimum(0.);
+                        graphCentErr->SetMaximum(1.2);
+                      }
+                      gStyle->SetOptStat(0);
+
+                      Int_t n=1; // counter
+                      nextCentrality.Reset();
+                      // Loop on each centrality (not the ones in MuMuConfig but the ones set)
+                      //==============================================================================
+                      while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) ) {
+                          AliDebug(1,Form("---CENTRALITY %s",scentrality->String().Data()));
+
+                          //________Get spectra
+                          TString spectraPath= Form("/%s/%s/%s/%s/%s-%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),sparticle->String().Data(),sbinType->String().Data());
+                          if (AccEffCorr)spectraPath+="-AccEffCorr";
+
+                          AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
+                          if(!spectra){//protection
+                            AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
+                            return;
+                          }
+                          //________
+
+                          //________Get Trigger sum
+                          Int_t NofMUL = TMath::Nint(CC()->GetSum(Form("trigger:%s/event:%s/centrality:%s",strigger->String().Data(),seventType->String().Data(),RefCent)));
+                          //________
+
+                          AliAnalysisMuMuSpectraCapsulePbPb * capsule = new AliAnalysisMuMuSpectraCapsulePbPb(spectra,spectraPath,externfile,externfile2);
+                          if(!capsule) continue;
+                          AliDebug(1,Form("Spectra = %p",capsule));
+                          if(print)capsule->SetPrintFlag();
+
+                          // Get Graph with RAA results
+                          list = capsule->RAAasGraphic(NofMUL);
+
+                          if(!list) continue;
+                          AliDebug(1,Form("list = %p",list));
+
+                          // Draw Graph according to bin type
+                          if (!sbinType->String().Contains("INTEGRATED")){ // PT/Y/single centrality
+                            // Select subcanvas
+                            c1->cd(n);
+                            //legend
+                            TLegend * leg = new TLegend(0.2,0.8,0.90,0.9);
+                            leg->SetTextSize(0.04);
+                            leg->SetHeader(Form("ALICE, Pb-Pb #sqrt{s_{NN}}=5.02 TeV, L_{int}=222 #mub^{-1}, %s",scentrality->String().Data()));
+                            //Draw it
+                            graph = static_cast<TGraphErrors*>(list->At(0)->Clone());
+                            graphErr = static_cast<TGraphErrors*>(list->At(1)->Clone());
+                            graphErrCorr = static_cast<TGraphErrors*>(list->At(2)->Clone());
+                            if (!graph || ! graphErr) {
+                                printf("Did not find graph in the list");
+                                return;
                             }
-                            //________
 
-                            //________Get Trigger sum
-                            Int_t NofMUL = TMath::Nint(CC()->GetSum(Form("trigger:%s/event:%s/centrality:%s",strigger->String().Data(),seventType->String().Data(),RefCent)));
-                            //________
+                            leg->AddEntry(graph,"Inclusive J/#psi","pe");
+                            leg->AddEntry(graphErr,"Syst. uncertainty","f");
+
+                            //Graph1
+                            graph->GetYaxis()->SetRangeUser(0,1.41);
+                            graph->Draw("ap");
+                            // Graph Syst.
+                            graphErr->SetFillColorAlpha(4,0.);
+                            graphErr->Draw("same5");
+                            leg->Draw();
+
+                            // Global box
+                            Double_t global = graphErrCorr->GetErrorY(0)/100.;
+                            TBox *globalBox =0x0;
+                            if(sbinType->String().Contains("PT"))globalBox= new TBox(11.5,1.-global,12,1+global);
+                            if(sbinType->String().Contains("Y"))globalBox= new TBox(-2.6,1.-global,-2.5,1+global);
+                            globalBox->SetFillColor(4);
+                            globalBox->Draw("F");
+                            printf("Global syst : %f\n",global );
+
+                            TLine *l = 0x0;
+                            if(sbinType->String().Contains("PT"))l = new TLine(0.,1.,12.,1.);
+                            if(sbinType->String().Contains("PT"))l = new TLine(-4.0,1.,-2.5,1.);
+                            l->SetLineStyle(2);
+                            l->Draw("same");
+
+                          }
 
-                            AliAnalysisMuMuSpectraCapsulePbPb * capsule = new AliAnalysisMuMuSpectraCapsulePbPb(spectra,spectraPath,externfile,externfile2);
-                            if(!capsule) continue;
-                            AliDebug(1,Form("Spectra = %p",capsule));
-                            if(print)capsule->SetPrintFlag();
-
-                            // Get Graph with RAA results
-                            list = capsule->RAAasGraphic(NofMUL);
-
-                            if(!list) continue;
-                            AliDebug(1,Form("list = %p",list));
-
-                            // Draw Graph according to bin type
-                            if (!sbinType->String().Contains("INTEGRATED")){ // PT/Y/single centrality
-                              // Select subcanvas
-                              c1->cd(n);
-                              //legend
-                              TLegend * leg = new TLegend(0.2,0.8,0.90,0.9);
-                              leg->SetTextSize(0.04);
-                              leg->SetHeader(Form("ALICE, Pb-Pb #sqrt{s_{NN}}=5.02 TeV, L_{int}=222 #mub^{-1}, %s",scentrality->String().Data()));
-                              //Draw it
-                              graph = static_cast<TGraphErrors*>(list->At(0)->Clone());
-                              graphErr = static_cast<TGraphErrors*>(list->At(1)->Clone());
-                              graphErrCorr = static_cast<TGraphErrors*>(list->At(2)->Clone());
-                              if (!graph || ! graphErr) {
-                                  printf("Did not find graph in the list");
-                                  return;
-                              }
-
-                              leg->AddEntry(graph,"Inclusive J/#psi","pe");
-                              leg->AddEntry(graphErr,"Syst. uncertainty","f");
-
-                              //Graph1
-                              graph->GetYaxis()->SetRangeUser(0,1.41);
-                              graph->Draw("ap");
-                              // Graph Syst.
-                              graphErr->SetFillColorAlpha(4,0.);
-                              graphErr->Draw("same5");
-                              leg->Draw();
-
-                              // Global box
-                              Double_t global = graphErrCorr->GetErrorY(0)/100.;
-                              TBox *globalBox =0x0;
-                              if(sbinType->String().Contains("PT"))globalBox= new TBox(11.5,1.-global,12,1+global);
-                              if(sbinType->String().Contains("Y"))globalBox= new TBox(-2.6,1.-global,-2.5,1+global);
-                              globalBox->SetFillColor(4);
-                              globalBox->Draw("F");
-                              printf("Global syst : %f\n",global );
-
-                              TLine *l = 0x0;
-                              if(sbinType->String().Contains("PT"))l = new TLine(0.,1.,12.,1.);
-                              if(sbinType->String().Contains("PT"))l = new TLine(-4.0,1.,-2.5,1.);
-                              l->SetLineStyle(2);
-                              l->Draw("same");
+                          else {// Integrated case
 
+                            if(!sbinType->String().Contains("INTEGRATED")) {// Protection
+                              cout << "Cannot plot INTEGRATED  ! Check it please :) " << endl;
+                              delete c1;
+                              return;
                             }
 
-                            else {// Integrated case
+                            Double_t x=0;
+                            Double_t y=0;
+                            graph = static_cast<TGraphErrors*>(list->At(0)->Clone());
+                            graphErr = static_cast<TGraphErrors*>(list->At(1)->Clone());
+                            graphErrCorr = static_cast<TGraphErrors*>(list->At(2)->Clone());
 
-                              if(!sbinType->String().Contains("INTEGRATED")) {// Protection
-                                cout << "Cannot plot INTEGRATED  ! Check it please :) " << endl;
-                                delete c1;
+                            if (!graph || ! graphErr) {// Protection
+                                printf("Did not find graph in the list");
                                 return;
-                              }
-
-                              Double_t x=0;
-                              Double_t y=0;
-                              graph = static_cast<TGraphErrors*>(list->At(0)->Clone());
-                              graphErr = static_cast<TGraphErrors*>(list->At(1)->Clone());
-                              graphErrCorr = static_cast<TGraphErrors*>(list->At(2)->Clone());
-
-                              if (!graph || ! graphErr) {// Protection
-                                  printf("Did not find graph in the list");
-                                  return;
-                              }
-
-                              // Get point for each centrality
-                              Double_t dx = graph->GetErrorX(0);
-                              Double_t dy = graph->GetErrorY(0);
-                              Double_t dysys = graphErr->GetErrorY(0);
-                              graph->GetPoint(0,x,y);
-
-                              // Set them to a new graphic
-                              graphCent->SetPoint(n-1,x,y);
-                              graphCent->SetPointError(n-1,dx,dy);
-                              graphCent->SetTitle(graph->GetTitle());
-                              graphCentErr->SetPoint(n-1,x,y);
-                              graphCentErr->SetPointError(n-1,2.5,dysys);
                             }
-                          n++;
-                          delete capsule;
-                        }
-                        cout << "" << endl;
-                        if (sbinType->String().Contains("INTEGRATED")){ //Print
-
-                          graphCent->GetXaxis()->SetTitle("<N_{part}>");
-                          graphCent->GetYaxis()->SetTitle("R_{AA}");
-                          graphCent->GetYaxis()->SetRangeUser(0,1.5);
-                          graphCent->SetMarkerColor(4);
-                          graphCent->SetMarkerStyle(21);
-                          graphCentErr->SetFillColorAlpha(4,0.);
-                          graphCent->SetTitle(Form("%s/%s/%s/%s/%s",seventType->String().Data(),
-                                                   strigger->String().Data(),
-                                                   spairCut->String().Data(),
-                                                   sparticle->String().Data(),
-                                                   sbinType->String().Data()));
-                          TLegend * leg = new TLegend(0.2,0.8,0.90,0.9);
-                          leg->SetHeader("ALICE, Pb-Pb #sqrt{s_{NN}}=5.02 TeV, L_{int}=222 #mub^{-1}, PT/Y integrated");
-                          leg->SetTextSize(0.03);
-                          leg->AddEntry(graphCent,"Inclusive J/#psi","pe");
-                          leg->AddEntry(graphCentErr,"Syst. uncertainty","f");
-
-                          graphCent->Draw("ap");
-                          graphCentErr->Draw("same5");
-                          leg->Draw();
-
-                          // Global box
-                          Double_t global = graphErrCorr->GetErrorY(0)/100.;
-                          TBox *globalBox = globalBox= new TBox(420,1.-global,430,1+global);
-                          globalBox->SetFillColor(4);
-                          globalBox->Draw("F");
-                          printf("Global syst : %f\n",global );
-
-                          TLine *l = new TLine(0.,1.,12.,1.);
-                          l->SetLineStyle(2);
-                          l->Draw("same");
-                        }
-                        //________ Update resultes in Mergeable collection
-                        TString id(Form("/RAA-%s/%s/%s/%s/%s",strigger->String().Data(),seventType->String().Data(),spairCut->String().Data(),sbinType->String().Data(),sparticle->String().Data()));
-                        TObject* o = 0x0;
 
-                        if (graph){// first graph
-
-                          o = fMergeableCollection->GetObject(Form("%s/%s",id.Data(),graph->GetName()));
-                          if (o){
-                            AliWarning(Form("Replacing %s/%s",id.Data(),graph->GetName()));
-                            fMergeableCollection->Remove(Form("%s/%s",id.Data(),graph->GetName()));
+                            // Get point for each centrality
+                            Double_t dx = graph->GetErrorX(0);
+                            Double_t dy = graph->GetErrorY(0);
+                            Double_t dysys = graphErr->GetErrorY(0);
+                            graph->GetPoint(0,x,y);
+
+                            // Set them to a new graphic
+                            graphCent->SetPoint(n-1,x,y);
+                            graphCent->SetPointError(n-1,dx,dy);
+                            graphCent->SetTitle(graph->GetTitle());
+                            graphCentErr->SetPoint(n-1,x,y);
+                            graphCentErr->SetPointError(n-1,2.5,dysys);
                           }
-
-                          Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),graph);
-
-                          if ( adoptOK ) std::cout << "+++RAA graph " << graph->GetName() << " adopted" << std::endl;
-                          else AliError(Form("Could not adopt RAA grap %s",graph->GetName()));
+                        n++;
+                        delete capsule;
+                      }
+                      cout << "" << endl;
+                      if (sbinType->String().Contains("INTEGRATED")){ //Print
+
+                        graphCent->GetXaxis()->SetTitle("<N_{part}>");
+                        graphCent->GetYaxis()->SetTitle("R_{AA}");
+                        graphCent->GetYaxis()->SetRangeUser(0,1.5);
+                        graphCent->SetMarkerColor(4);
+                        graphCent->SetMarkerStyle(21);
+                        graphCentErr->SetFillColorAlpha(4,0.);
+                        graphCent->SetTitle(Form("%s/%s/%s/%s/%s",seventType->String().Data(),
+                                                 strigger->String().Data(),
+                                                 spairCut->String().Data(),
+                                                 sparticle->String().Data(),
+                                                 sbinType->String().Data()));
+                        TLegend * leg = new TLegend(0.2,0.8,0.90,0.9);
+                        leg->SetHeader("ALICE, Pb-Pb #sqrt{s_{NN}}=5.02 TeV, L_{int}=222 #mub^{-1}, PT/Y integrated");
+                        leg->SetTextSize(0.03);
+                        leg->AddEntry(graphCent,"Inclusive J/#psi","pe");
+                        leg->AddEntry(graphCentErr,"Syst. uncertainty","f");
+
+                        graphCent->Draw("ap");
+                        graphCentErr->Draw("same5");
+                        leg->Draw();
+
+                        // Global box
+                        Double_t global = graphErrCorr->GetErrorY(0)/100.;
+                        TBox *globalBox = globalBox= new TBox(420,1.-global,430,1+global);
+                        globalBox->SetFillColor(4);
+                        globalBox->Draw("F");
+                        printf("Global syst : %f\n",global );
+
+                        TLine *l = new TLine(0.,1.,12.,1.);
+                        l->SetLineStyle(2);
+                        l->Draw("same");
+                      }
+                      //________ Update results in Mergeable collection
+                      TString id(Form("/RAA-%s/%s/%s/%s/%s",strigger->String().Data(),seventType->String().Data(),spairCut->String().Data(),sbinType->String().Data(),sparticle->String().Data()));
+                      TObject* o = 0x0;
+
+                      if (graph){// first graph
+
+                        o = fMergeableCollection->GetObject(Form("%s/%s",id.Data(),graph->GetName()));
+                        if (o){
+                          AliWarning(Form("Replacing %s/%s",id.Data(),graph->GetName()));
+                          fMergeableCollection->Remove(Form("%s/%s",id.Data(),graph->GetName()));
                         }
-                        if (graphCent){// second graph
-                          o = fMergeableCollection->GetObject(Form("%s/%s",id.Data(),graphCent->GetName()));
-                          if (o){
-                            AliWarning(Form("Replacing %s/%s",id.Data(),graphCent->GetName()));
-                            fMergeableCollection->Remove(Form("%s/%s",id.Data(),graphCent->GetName()));
-                          }
 
-                          Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),graphCent);
+                        Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),graph);
 
-                          if ( adoptOK ) std::cout << "+++RAA graph " << graphCent->GetName() << " adopted" << std::endl;
-                          else AliError(Form("Could not adopt RAA graph %s",graphCent->GetName()));
+                        if ( adoptOK ) std::cout << "+++RAA graph " << graph->GetName() << " adopted" << std::endl;
+                        else AliError(Form("Could not adopt RAA grap %s",graph->GetName()));
+                      }
+                      if (graphCent){// second graph
+                        o = fMergeableCollection->GetObject(Form("%s/%s",id.Data(),graphCent->GetName()));
+                        if (o){
+                          AliWarning(Form("Replacing %s/%s",id.Data(),graphCent->GetName()));
+                          fMergeableCollection->Remove(Form("%s/%s",id.Data(),graphCent->GetName()));
                         }
-                        //________
-                        }
-                    }
-                }
-            }
-        }
-    delete list;
-    delete eventTypeArray ;
-    delete triggerArray ;
-    delete fitfunctionArray ;
-    delete pairCutArray ;
-    delete centralityArray ;
-    delete particleArray ;
-    delete binTypeArray ;
 
-    return ;
+                        Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),graphCent);
+
+                        if ( adoptOK ) std::cout << "+++RAA graph " << graphCent->GetName() << " adopted" << std::endl;
+                        else AliError(Form("Could not adopt RAA graph %s",graphCent->GetName()));
+                      }
+                      //________
+                      }
+                  }
+              }
+          }
+      }
+  delete list;
+  delete eventTypeArray ;
+  delete triggerArray ;
+  delete fitfunctionArray ;
+  delete pairCutArray ;
+  delete centralityArray ;
+  delete particleArray ;
+  delete binTypeArray ;
 
+  return ;
 }
 
 //_____________________________________________________________________________
-TString
-AliAnalysisMuMu::ExpandPathName(const char* file)
+TString AliAnalysisMuMu::ExpandPathName(const char* file)
 {
-  // An expand method that lives alien URL as they are
+/**
+ * @brief An expand method that lives alien URL as they are
+ *
+ * @param file [description]
+ */
   TString sfile;
 
   if ( !sfile.BeginsWith("alien://") )
@@ -1384,7 +1492,11 @@ AliAnalysisMuMu::ExpandPathName(const char* file)
 //_____________________________________________________________________________
 void AliAnalysisMuMu::TwikiOutputFnorm(const char* series) const
 {
-  /// make a twiki-compatible output of the Fnorm factor(s)
+/**
+ * @brief  Make a twiki-compatible output of the Fnorm factor(s) ( Outdated ?)
+ *
+ * @param series [description]
+ */
   TObjArray* what = TString(series).Tokenize(",");
   TObjString* s;
   TObjArray graphs;
@@ -1498,17 +1610,27 @@ void AliAnalysisMuMu::TwikiOutputFnorm(const char* series) const
 }
 
 //_____________________________________________________________________________
-TFile*
-AliAnalysisMuMu::FileOpen(const char* file)
+TFile* AliAnalysisMuMu::FileOpen(const char* file)
 {
-    /// Open a file after expansion of its name
-
+/**
+ * @brief Open a file after expansion of its name
+ *
+ * @param file [description]
+ * @return [description]
+ */
     return TFile::Open(ExpandPathName(file).Data());
 }
 
 //_____________________________________________________________________________
 TString AliAnalysisMuMu::First(const TString& list) const
 {
+/**
+ * @brief [brief description]
+ * @details [long description]
+ *
+ * @param list [description]
+ * @return [description]
+ */
     TObjArray* a = list.Tokenize(",");
     if ( a->GetLast() < 0 ) return "";
 
@@ -1520,31 +1642,49 @@ TString AliAnalysisMuMu::First(const TString& list) const
 }
 
 //_____________________________________________________________________________
-AliAnalysisMuMuSpectra*
-AliAnalysisMuMu::FitParticle(const char* particle,
-                             const char* trigger,
-                             const char* eventType,
-                             const char* pairCut,
-                             const char* centrality,
-                             const AliAnalysisMuMuBinning& binning,
-                             const char* spectraType,
-                             Bool_t corrected)
+AliAnalysisMuMuSpectra* AliAnalysisMuMu::FitParticle(const char* particle,const char* trigger,const char* eventType,const char* pairCut,const char* centrality,const AliAnalysisMuMuBinning& binning,Bool_t corrected,const TString* fitMethod,const char* flavour,const char* histoType)
 {
-  // Fit the minv/mpt spectra to find the given particle
-  // Returns an array of AliAnalysisMuMuResult objects
-
-  TProfile::Approximate(); //To avoid bins with error=0 due to low statstics
+/**
+ * @brief Fit minv histo
+ * @details Create and store an AliAnalysisMuMuResult classes ( for the moment, only AliAnalysisMuMuJpsiResult is used and implemented)
+ * which is the class who actually does process the fit.
+ *
+ * @param particle     particle name
+ * @param trigger     [description]
+ * @param eventType   [description]
+ * @param pairCut     [description]
+ * @param centrality  [description]
+ * @param binning     [description]
+ * @param corrected   [description]
+ * @param fitMethod   '' or 'mix'
+ * @return            AliAnalysisMuMuSpectra to be handled by the owner
+ */
+  // To avoid bins with error=0 due to low statstics
+  TProfile::Approximate();
 
   static int n(0);
 
-  //Check Binning list
+  Bool_t mix = kFALSE;
+  TString* id(0x0);
+  TString* refTrigger(0x0);
+  TString* refEvent(0x0);
+  TObjString* fitType;
+
+  // Get number of runs and store it in nruns
+  TObjArray   * runs = fCounterCollection->GetKeyWords("run").Tokenize(",");
+  Int_t nruns = runs->GetEntries();
+  delete runs;
+
+  // ---- Some cross check ----
+
+  // Check Binning list
   TObjArray* bins = binning.CreateBinObjArray(particle);
   if (!bins){
     AliError(Form("Did not get any bin for particle %s",particle));
     return 0x0;
   }
 
-  //Check trigger list
+  // Check trigger list
   TObjArray* triggers = fCounterCollection->GetKeyWords("trigger").Tokenize(",");
   if ( !triggers->FindObject(trigger) ){
     AliError(Form("Did not find trigger %s",trigger));
@@ -1554,7 +1694,7 @@ AliAnalysisMuMu::FitParticle(const char* particle,
   }
   delete triggers;
 
-  //Check event list
+  // Check event list
   TObjArray* events = fCounterCollection->GetKeyWords("event").Tokenize(",");
   if ( !events->FindObject(eventType) ){
     AliError(Form("Did not find eventType %s",eventType));
@@ -1566,133 +1706,124 @@ AliAnalysisMuMu::FitParticle(const char* particle,
 
   Int_t ntrigger = TMath::Nint(fCounterCollection->GetSum(Form("trigger:%s/event:%s",trigger,eventType)));
 
-  //Check trigger
-  if  (ntrigger<=0) {
+  // Check trigger
+  if  ( ntrigger<=0 ){
     AliError(Form("No trigger for trigger:%s/event:%s",trigger,eventType));
     delete bins;
     return 0x0;
   }
 
-  //Get number of runs and store it in nruns
-  TObjArray* runs = fCounterCollection->GetKeyWords("run").Tokenize(",");
-  Int_t nruns = runs->GetEntries();
-  delete runs;
+  // ---- Here we select triggers and the fit method (mix or not) ----
 
-  // Create ID for the fit which will be used to name results
-  TString id(Form("/%s/%s/%s/%s",eventType,trigger,centrality,pairCut));
+  // Set mix flag
+  if ( fitMethod->Contains("mix") && !IsSimulation() ) mix = kTRUE;
 
-  //  binning.Print();
+  // Create ID for the fit which will be used to name results
+  if ( !mix ) id = new TString(Form("/%s/%s/%s/%s",eventType,trigger,centrality,pairCut));
+  else {
+    refTrigger = new TString(Form("%s",Config()->First(Config()->RefMixTriggerKey(),IsSimulation()).Data()));
+    refEvent   = new TString(Form("%s",Config()->First(Config()->RefMixEventSelectionKey(),IsSimulation()).Data()));
+    id         = new TString(Form("/MIX/%s_%s/%s/%s/%s/%s",refEvent->Data(),refTrigger->Data(),eventType,trigger,centrality,pairCut));
+  }
 
-  //The result pointer, will be return at the end
+  // The result pointer, will be return at the end
   AliAnalysisMuMuSpectra* spectra(0x0);
-
-  // The binning pointer, which point at Pt binning, Y binning etc.
-  AliAnalysisMuMuBinning::Range* bin;
-  TIter next(bins);
+  TString spectraName(binning.GetName());
+  TString sFlavour(flavour);
+  if( !sFlavour.IsNull()) spectraName += Form("-%s",flavour);
+  if ( corrected )   spectraName += "-AccEffCorr";
 
   // Create an array (fitTypeArray) pointing on AliAnalysisMuMuConfig and store kFitTypeList.  Also create pointers and strings for several pointers
   TObjArray* fitTypeArray = Config()->GetListElements(Config()->FitTypeKey(),IsSimulation());
-  TIter nextFitType(fitTypeArray);// Iterater for every fit types, i.e fitting functions and their config.
-  TObjString* fitType;// To point to the array (??)
-  TString flavour;// Flavour of the binning (ex: "JAVI","IGOR" ...)
-  TString sSpectraType(spectraType);// Make spectratype a string
-
-  // Add some element to ID
-  TString spectraName(binning.GetName());
-  if ( flavour.Length() > 0 ){
-    spectraName += "-";
-    spectraName += flavour;
-  }
-  if ( corrected ){
-    spectraName += "-";
-    spectraName += "AccEffCorr";
-  }
+  TIter nextFitType(fitTypeArray);  // Iterater for every fit types, i.e fitting functions and their config.
 
-  //  Int_t binN(0);
+  // ---- MAIN PART : Loop on every binning range ----
 
-  //MAIN PART : Loop on every binning range
-  //==============================================================================
+  AliAnalysisMuMuBinning::Range* bin;
+  TIter next(bins);
   while ( ( bin = static_cast<AliAnalysisMuMuBinning::Range*>(next())) )
   {
+    Int_t added(0);
+    nextFitType.Reset();
 
-    // Choose correct histo type with <spectraType> and set it in <hname>
+    AliAnalysisMuMuJpsiResult* r    = 0x0;
+
+    Bool_t adoptOk  = kFALSE;
+    Bool_t adoptMix = kFALSE;
+
+    TH1* histo(0x0);
+
+    // ---- Here we select the histo name we want/need to proceed the fit ----
+
+    // Get fitType as a string
+    TString sHistoType(histoType);
+
+    // Select name histo
     TString hname;
-    if (!sSpectraType.CompareTo("minv"))hname = corrected ? Form("MinvUS+%s_AccEffCorr",bin->AsString().Data()) : Form("MinvUS+%s",bin->AsString().Data());
-    else if (!sSpectraType.CompareTo("mpt"))hname = corrected ? Form("MeanPtVsMinvUS%s",bin->AsString().Data()) : Form("MeanPtVsMinvUS%s",bin->AsString().Data());
+    TString mixflag1 = mix ? "_wbck" : "" ;
+     if( sHistoType.Contains("minv"))  hname = corrected ? Form("MinvUS+%s%s_AccEffCorr",bin->AsString().Data(),mixflag1.Data()) : Form("MinvUS+%s%s",bin->AsString().Data(),mixflag1.Data());
+    else if( sHistoType.Contains("mpt") )  hname = corrected ? Form("MeanPtVsMinvUS%s%s",bin->AsString().Data(),mixflag1.Data())     : Form("MeanPtVsMinvUS%s%s",bin->AsString().Data(),mixflag1.Data());
     else {
-      AliError("Wrong spectra type choice: Posibilities are: 'minv' or 'mpt' ");
+      AliError("Wrong spectra type choice: Possibilities are: 'minv' or 'mpt' ");
       return 0x0;
     }
 
     // Print the fitting process on the terminal
     TString isCorr(corrected ? " AccEffCorr " : " ");
+    isCorr += ( mix )  ? " with mixing event method " : " ";
     std::cout << "---------------------------------//---------------------------------" << std::endl;
-    std::cout << "Fitting" << isCorr.Data() << sSpectraType.Data() << " spectra in " << id.Data() << std::endl;
+    std::cout << "Fitting" << isCorr.Data() << sHistoType.Data() << " spectra in " << id->Data() << std::endl;
 
-    // Pointer to the histo from histo collection
-    TH1* histo = OC()->Histo(id.Data(),hname.Data());
-    if (!histo) {
-      AliError(Form("Could not find histo %s",hname.Data()));
+    // Finally gets it
+    if ( OC()->Histo(id->Data(),hname.Data()) ) histo = static_cast<TH1*>(OC()->Histo(id->Data(),hname.Data())->Clone(Form("%s%d",sHistoType.Data(),n++)));
+    if ( !histo ) {
+      AliError(Form("Could not find histo %s/%s",id->Data(),hname.Data()));
       continue;
     }
 
-    // Make a clone of the histo to work with. Pointer changes for every iteration (n++)
-    histo = static_cast<TH1*>(histo->Clone(Form("%s%d",sSpectraType.Data(),n++)));
-
-    const char* particleTmp = IsSimulation() ? GetParticleName() : "JPsi"; //At some point particleTmp should become particle (but for now particle is always = "psi")
-
+    // At some point particleTmp should become particle (but for now particle is always = "psi")
+    const char* particleTmp = IsSimulation() ? GetParticleName() : "JPsi";
     cout << "particleTmp =" << particleTmp << endl;
+    TString sparticleTmp(particleTmp);
 
-    TString sparticleTmp(particleTmp);// Make a string of it
-
-    // Object that fit/work on the histo
-    AliAnalysisMuMuJpsiResult* r = new AliAnalysisMuMuJpsiResult(particleTmp,
-                                                                 *histo, // Result for current bin
-                                                                 trigger,
-                                                                 eventType,
-                                                                 pairCut,
-                                                                 centrality,
-                                                                 *bin);
-
+    // Create the AliAnalysisMuMuResults that will fit the JPsi
+    r = new AliAnalysisMuMuJpsiResult(particleTmp,*histo,trigger,eventType,pairCut,centrality,*bin);
     r->SetNofTriggers(ntrigger);
     r->SetNofRuns(nruns);
-
-    nextFitType.Reset();
-
-    Int_t added(0);
+    if ( !r ){
+      AliError("Cannot create a AliAnalysisMuMuJpsiResult");
+      continue;
+    }
 
     // Loop on every fittype and create a subresult inside the spectra.
-    while ( ( fitType = static_cast<TObjString*>(nextFitType())) )
-    {
-      // In this loop we create a Subresult for each fit inside the Result for current bin (AddFit will do)
-      TString sFitType(fitType->String());// Get fitType as a string
+    while ( ( fitType = static_cast<TObjString*>(nextFitType())) ){
 
-      if ( !sFitType.Contains(sSpectraType.Data()) ) continue;// Checkpoint
-
-      AliDebug(1,Form("<<<<<< fitType=%s bin=%s",sFitType.Data(),bin->Flavour().Data()));
+      AliDebug(1,Form("<<<<<< fitType=%s bin=%s",fitType->String().Data(),bin->Flavour().Data()));
 
       std::cout << "" << std::endl;
       std::cout << "---------------" << "Fit " << added + 1 << "------------------" << std::endl;
-      std::cout << "Fitting " << hname.Data() << " with " << sFitType.Data() << std::endl;
+      if(!mix) std::cout << "Fitting " << hname.Data() << " with " << fitType->String().Data() << std::endl;
+      else     std::cout << "Fitting " << hname.Data() << " with " << fitType->String().Data() << " and after remmoving backround from mixing " << std::endl;
       std::cout << "" << std::endl;
 
-      // Hard coded until find a smart wayto do it
-      if (sFitType.Contains("PSIPSIPRIMENA60NEWVWG") && sFitType.Contains("range=2.0;4.4") && bin->AsString().Contains("PT_BENJ_03.00_04.00") ){
-        cout << "" << endl;
-        cout << " specific histo with specific parameters" << endl;
-        cout << "" << endl;
-        sFitType += ":binNormJPsi=3.15:binNormPsiP=3.67:sigmaJPsi:0.085";
-      }
+      // Look for specific fit param.
+      TObjArray* fitSingle = Config()->GetListElements(Config()->FitSingleKey(),IsSimulation());
+      TIter nextFitSingle(fitSingle);
+      TObjString* specifit;
+      while ( ( specifit = static_cast<TObjString*>(nextFitSingle())) )
+        if (specifit->String().Contains(bin->AsString().Data())) fitType->String() = specifit->String().Data();
+      delete fitSingle;
 
       // Conf. for MC Tails (see function type)
-      if ( sFitType.Contains("mctails",TString::kIgnoreCase) ) //FIXME: Find a univoque way to determine the correctly the fit type
-      {
-        TString sbin = bin->AsString();
-        TString spectraMCName = spectraName;
-        AliAnalysisMuMuBinning::Range* binMC = bin;
+      if ( fitType->String().Contains("mctails",TString::kIgnoreCase) ){
+
+        TString sbin                          = bin->AsString();
+        TString spectraMCName                 = spectraName;
+        AliAnalysisMuMuBinning::Range* binMC  = bin;
+
+        // Javier's Legacy
+        if( (sbin.Contains("MULT") || sbin.Contains("NCH") || sbin.Contains("DNCHDETA") || sbin.Contains("V0A") || sbin.Contains("V0ACENT") || sbin.Contains("V0C") || sbin.Contains("V0M") || sbin.Contains("NTRCORR")|| sbin.Contains("RELNTRCORR")) && !sbin.Contains("NTRCORRPT") && !sbin.Contains("NTRCORRY")){
 
-        if ((sbin.Contains("MULT") || sbin.Contains("NCH") || sbin.Contains("DNCHDETA") || sbin.Contains("V0A") || sbin.Contains("V0ACENT") || sbin.Contains("V0C") || sbin.Contains("V0M") || sbin.Contains("NTRCORR")|| sbin.Contains("RELNTRCORR")) && !sbin.Contains("NTRCORRPT") && !sbin.Contains("NTRCORRY"))
-        {
           //-------has to have a better way to do it
           AliAnalysisMuMuBinning* b = new AliAnalysisMuMuBinning;
           b->AddBin("psi","INTEGRATED");
@@ -1702,39 +1833,35 @@ AliAnalysisMuMu::FitParticle(const char* particle,
           spectraMCName = b->GetName();
           delete b;
 
-          if ( corrected )
-          {
+          if ( corrected ){
             spectraMCName += "-";
             spectraMCName += "AccEffCorr";
           }
-          //-----------
         }
 
-        GetParametersFromMC(sFitType,Form("/%s/%s",centrality,pairCut),spectraMCName.Data(),binMC);
+        GetParametersFromMC(fitType->String(),Form("/%s/%s",centrality,pairCut),spectraMCName.Data(),binMC);
 
-        if (sFitType.Length()>0) added += ( r->AddFit(sFitType.Data()) == kTRUE );
+        added += ( r->AddFit(fitType->String().Data()) == kTRUE );
       }
 
-      //Config. for mpt (see function type)
-      else if ( sFitType.Contains("mpt",TString::kIgnoreCase) && !sFitType.Contains("minv",TString::kIgnoreCase) )
-      {
+      // Config. for mpt (see function type)
+      else if ( fitType->String().Contains("histoType=mpt",TString::kIgnoreCase) && !fitType->String().Contains("histoType=minv",TString::kIgnoreCase) ){
+
         std::cout << "++The Minv parameters will be taken from " << spectraName.Data() << std::endl;
         std::cout << "" << std::endl;
 
-        AliAnalysisMuMuSpectra* minvSpectra = dynamic_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(id.Data(),spectraName.Data()));
+        AliAnalysisMuMuSpectra* minvSpectra = dynamic_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(id->Data(),spectraName.Data()));
 
-        if ( !minvSpectra )
-        {
-          AliError(Form("Cannot fit mean pt: could not get the minv spectra for %s",id.Data()));
-          continue;//return 0x0;
+        if ( !minvSpectra ){
+          AliError(Form("Cannot fit mean pt: could not get the minv spectra for %s",id->Data()));
+          continue;
         }
 
         AliAnalysisMuMuJpsiResult* minvResult = static_cast<AliAnalysisMuMuJpsiResult*>(minvSpectra->GetResultForBin(*bin));
 
-        if ( !minvResult )
-        {
-          AliError(Form("Cannot fit mean pt: could not get the minv result for bin %s in %s",bin->AsString().Data(),id.Data()));
-          continue; //return 0x0;
+        if ( !minvResult ){
+          AliError(Form("Cannot fit mean pt: could not get the minv result for bin %s in %s",bin->AsString().Data(),id->Data()));
+          continue;
         }
 
         TObjArray* minvSubResults = minvResult->SubResults();
@@ -1743,100 +1870,106 @@ AliAnalysisMuMu::FitParticle(const char* particle,
         TString subResultName;
 
         Int_t nSubFit(0);
-        while ( ( fitMinv = static_cast<AliAnalysisMuMuJpsiResult*>(nextSubResult())) )
-        {
+        while ( ( fitMinv = static_cast<AliAnalysisMuMuJpsiResult*>(nextSubResult())) ){
+
           TString fitMinvName(fitMinv->GetName());
           fitMinvName.Remove(fitMinvName.First("_"),fitMinvName.Sizeof()-fitMinvName.First("_"));
 
-          if ( !sFitType.Contains(fitMinvName) ) continue; //FIXME: Ambiguous, i.e. NA60NEWPOL2EXP & NA60NEWPOL2 (now its ok cause only VWG and POL2EXP are used, but care)
+          if ( !fitType->String().Contains(fitMinvName) ) continue;
 
           std::cout << "" << std::endl;
           std::cout <<  "      /-- SubFit " << nSubFit + 1 << " --/ " << std::endl;
           std::cout << "" << std::endl;
 
-          TString sMinvFitType(sFitType);
+          TString sMinvfitType(fitType->String());
 
-          GetParametersFromResult(sMinvFitType,fitMinv);//FIXME: Think about if this is necessary
+          GetParametersFromResult(sMinvfitType,fitMinv);//FIXME: Think about if this is necessary
 
-          added += ( r->AddFit(sMinvFitType.Data()) == kTRUE );
+          added += ( r->AddFit(fitType->String().Data()) == kTRUE );
 
           nSubFit++;
         }
       }
 
-      //Config. for mpt and minv (see function type)
-      else if ( sFitType.Contains("minv&mpt",TString::kIgnoreCase) ) AliWarning("Implement here the method to do the combined minv mpt fits");
-      //FIXME: Shall we use the fitType or spectraType to choose to perform combined fits? Cause we have to check what kind of object is returned by the combined fit in order to decide if we put it in a different spectra(spectraType would be the flag,and here we should update the spectraName) or as a subresult(fitType in this case)
-
-
       //Config. for the rest (see function type)
-      else
-      {
-        if ( sFitType.Contains("PSICB2",TString::kIgnoreCase) || sFitType.Contains("PSINA60NEW",TString::kIgnoreCase)) std::cout << "+Free tails fit... " << std::endl;
-        else if ( sFitType.Contains("PSICOUNT",TString::kIgnoreCase) )  std::cout << Form("+Just counting %s...",GetParticleName()) << std::endl;
-        else std::cout << "+Using predefined tails... " << std::endl;
+      else {
 
-        if ( sFitType.Contains("minvJPsi") && !sparticleTmp.Contains("JPsi") ){
+        if ( fitType->String().Contains("PSICB2",TString::kIgnoreCase) || fitType->String().Contains("PSINA60NEW",TString::kIgnoreCase)) std::cout << "+Free tails fit... " << std::endl;
+        else if ( fitType->String().Contains("PSICOUNT",TString::kIgnoreCase) )                                                 std::cout << Form("+Just counting %s...",GetParticleName()) << std::endl;
+        else                                                                                                           std::cout << "+Using predefined tails... " << std::endl;
+
+        if ( fitType->String().Contains("minvJPsi") && !sparticleTmp.Contains("JPsi") ){
           std::cout << "This fitting funtion is set to fit JPsi: Skipping fit..." << std::endl;
           continue;
         }
-        if ( sFitType.Contains("minvPsiP") && !sparticleTmp.Contains("PsiP") ){
+
+        if ( fitType->String().Contains("minvPsiP") && !sparticleTmp.Contains("PsiP") ){
           std::cout << "This fitting funtion is set to fit PsiP: Skipping fit..." << std::endl;
           continue;
         }
         // Here we call  FINALLY the fit functions
-        added += ( r->AddFit(sFitType.Data()) == kTRUE );
+        added += ( r->AddFit(fitType->String().Data()) == kTRUE );
       }
 
       std::cout << "-------------------------------------" << std::endl;
       std::cout << "" << std::endl;
     }
+    if ( !added ) continue;
 
-    if ( !added ) continue;// checkpoint
-
-
-    flavour = bin->Flavour();// Get <flavour>
+    // Get <flavour>
+    flavour = bin->Flavour();
 
     // Implement <spectra> and set its name
     if (!spectra){
 
       TString spectraSaveName = spectraName;
 
-      if ( !sSpectraType.CompareTo("mpt") ){
+      // Check if we fit meanPt
+      nextFitType.Reset();
+      Bool_t meanptVSminvFlag = kFALSE;
+      while ( ( fitType = static_cast<TObjString*>(nextFitType())) ){
+        meanptVSminvFlag = fitType->String().Contains("histoType=mpt");
+      }
+      if ( meanptVSminvFlag){
         spectraSaveName += "-";
         spectraSaveName += "MeanPtVsMinvUS";
       }
-
       spectra = new AliAnalysisMuMuSpectra(spectraSaveName.Data());
     }
 
-    Bool_t adoptOk = spectra->AdoptResult(*bin,r); // We adopt the Result for current bin into the spectra
-
-    if ( adoptOk ) std::cout << "Result " << r->GetName() << " adopted in spectra " << spectra->GetName() << std::endl;
-    else AliError(Form("Error adopting result %s in spectra %s",r->GetName(),spectra->GetName()));
+    // We adopt the Result for current bin into the spectra
+    if ( r ) adoptOk = spectra->AdoptResult(*bin,r);
 
+    if ( r && spectra && adoptOk ) printf("Result %s adopted in spectra %s  \n",r->GetName(),spectra->GetName());
+    else AliError(Form("Error adopting result "));
 
     if ( IsSimulation() ) {
       std::cout << "Computing AccEff Value Spectra " << std::endl;
       SetNofInputParticles(*r);
     }
-
-      //    binN++;
-  } // loop on bins
+  }
 
   delete fitTypeArray;
   delete bins;
+  if (refTrigger) delete  refTrigger;
+  if (refEvent)   delete  refEvent;
+  delete  id;
 
   return spectra;
 }
 
 //_____________________________________________________________________________
-void
-AliAnalysisMuMu::GetParametersFromMC(TString& fitType, const char* pathCentrPairCut, const char* spectraName, AliAnalysisMuMuBinning::Range* bin) const
+void AliAnalysisMuMu::GetParametersFromMC(TString& fitType, const char* pathCentrPairCut, const char* spectraName, AliAnalysisMuMuBinning::Range* bin) const
 {
-    /// Get the parameters from the associated simulation. Is intended to be used in minv fits, where we need the tails from JPsi (and Psi')
-    // We can choose between the 2 associated simulations (a JPsi and Psi' ones) by setting the sim variable to "sim1" (fAssociatedSimulation by default) or "sim2" (fAssociatedSimulation2)
-
+/**
+ * @brief   Get fit tails parameters from the associated simulations file.
+ * @details Intended to be used in minv fits, where we need the tails from JPsi (and Psi').
+ *
+ * @param fitType          'NA60NEW','CB2','INDEPTAILS' implemented at the moment
+ * @param pathCentrPairCut [description]
+ * @param spectraName      [description]
+ * @param bin              [description]
+ */
     if ( !SIM() && !SIM2() )
         {
         AliError("Cannot get MC tails without associated simulation(s) file(s) !");
@@ -1921,11 +2054,15 @@ AliAnalysisMuMu::GetParametersFromMC(TString& fitType, const char* pathCentrPair
 }
 
 //_____________________________________________________________________________
-void
-AliAnalysisMuMu::GetParametersFromResult(TString& fitType, AliAnalysisMuMuJpsiResult* minvResult) const
+void AliAnalysisMuMu::GetParametersFromResult(TString& fitType, AliAnalysisMuMuJpsiResult* minvResult) const
 {
-    // Gets the parameters from a result, is intended to be used for mean pt fits where we need the signal and backgroud parameters
-
+/**
+ * @brief   Get parameters from a result
+ * @details intended to be used for mean pt fits where we need the signal and backgroud parameters
+ *
+ * @param fitType    'NA60NEW','CB2','INDEPTAILS' implemented at the moment
+ * @param minvResult [description]
+ */
     AliWarning("Re-implement me !!!"); //FIXME: The parameters to get will depend on the fit function and also in this way is not suitable for other particles (ie Upsilon)(Find a way to get the particle(s) name)
 
     TString msg("");
@@ -2076,8 +2213,14 @@ AliAnalysisMuMu::GetParametersFromResult(TString& fitType, AliAnalysisMuMuJpsiRe
 //_____________________________________________________________________________
 ULong64_t AliAnalysisMuMu::GetTriggerScalerCount(const char* triggerList, Int_t runNumber)
 {
-    /// Get the expected (from OCDB scalers) trigger count
-
+/**
+ * @brief Get the expected (from OCDB scalers) trigger count
+ *
+ * @param triggerList Tokenize by ','
+ * @param runNumber   [description]
+ *
+ * @return Counts
+ */
     AliAnalysisTriggerScalers ts(runNumber,Config()->OCDBPath());
 
     TObjArray* triggers = TString(triggerList).Tokenize(",");
@@ -2100,21 +2243,28 @@ ULong64_t AliAnalysisMuMu::GetTriggerScalerCount(const char* triggerList, Int_t
 }
 
 //_____________________________________________________________________________
-AliAnalysisMuMuSpectra* AliAnalysisMuMu::GetSpectra(const char* what, const char* flavour) const
+AliAnalysisMuMuSpectra* AliAnalysisMuMu::GetSpectraFromConfig(const char* binType, const char* flavour) const
 {
-    /// get a given spectra
-
-    TString swhat(what);
+/**
+ * @brief Pointer to given spectra
+ * @details The spectra path is selected according to first keys in the config. file. Spectra name should be 'PSI-<binType>'
+ *
+ * @param binType    [description]
+ * @param flavour    [description]
+ *
+ * @return Pointer to the spectra
+ */
+    TString sbinType(binType);
     TString sflavour(flavour);
-    swhat.ToUpper();
+    sbinType.ToUpper();
     sflavour.ToUpper();
 
     TString spectraName(Form("/%s/%s/%s/%s/PSI-%s",
-                             Config()->First(Config()->EventSelectionKey(),kFALSE).Data(),
-                             Config()->First(Config()->DimuonTriggerKey(),kFALSE).Data(),
-                             Config()->First(Config()->CentralitySelectionKey(),kFALSE).Data(),
-                             Config()->First(Config()->PairSelectionKey(),kFALSE).Data(),
-                             swhat.Data()));
+                             Config()->First(Config()->EventSelectionKey(),IsSimulation()).Data(),
+                             Config()->First(Config()->DimuonTriggerKey(),IsSimulation()).Data(),
+                             Config()->First(Config()->CentralitySelectionKey(),IsSimulation()).Data(),
+                             Config()->First(Config()->PairSelectionKey(),IsSimulation()).Data(),
+                             sbinType.Data()));
 
     cout << "spectraName : " << spectraName.Data() << endl;
 
@@ -2123,641 +2273,77 @@ AliAnalysisMuMuSpectra* AliAnalysisMuMu::GetSpectra(const char* what, const char
       spectraName += sflavour.Data();
     }
 
-    return SPECTRA(spectraName.Data());
-}
-
-//_____________________________________________________________________________
-AliAnalysisMuMuSpectra* AliAnalysisMuMu::GetMCSpectra(const char* what , const char* EventSelection,  const char* DimuonTrigger,
-  const char* Centrality, const char* PairSelectionKey, const char* flavour) const
-{
-    /// get a given spectra
-
-    TString swhat(what);
-    TString sflavour(flavour);
-    swhat.ToUpper();
-    sflavour.ToUpper();
-
-    TString spectraName(Form("/%s/%s/%s/%s/PSI-%s",
-                             EventSelection,
-                             DimuonTrigger,
-                             Centrality,
-                             PairSelectionKey,
-                             swhat.Data()));
-
-    cout << "spectraName MC : " << spectraName.Data() << endl;
-
-    if (sflavour.Length()>0)
-    {
-      spectraName += "-";
-      spectraName += sflavour.Data();
-    }
-
-    return SPECTRA(spectraName.Data());
-}
-
-//_____________________________________________________________________________
-TH1* AliAnalysisMuMu::PlotAccEfficiency(const char* whatever)
-{
-    //FIXME::Make it general
-    if ( !IsSimulation() )
-        {
-        AliError("Could not get AccxEff histo: Not simulation file");
-        return 0x0;
-        }
-
-    TString path(Form("/%s/%s/%s/%s",
-                      Config()->First(Config()->EventSelectionKey(),kTRUE).Data(),
-                      Config()->First(Config()->DimuonTriggerKey(),kTRUE).Data(),
-                      Config()->First(Config()->CentralitySelectionKey(),kTRUE).Data(),
-                      Config()->First(Config()->PairSelectionKey(),kTRUE).Data()));
-
-    AliAnalysisMuMuSpectra* s = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(Form("%s/%s",path.Data(),whatever)));
-    if ( !s )
-        {
-        AliError(Form("No AccEff spectra %s found in %s",whatever,path.Data()));
-        return 0x0;
-        }
-
-    return s->Plot(Form("AccEff%s",GetParticleName()),"PSICOUNT",kFALSE);//_2.2_3.9
-
-}
-
-//_____________________________________________________________________________
-void AliAnalysisMuMu::ComputeRelativeValueAndSESystematics(const char* quantity,const char* flavour,const char* value2Test, const char* binListToExclude, const char* fNormType, const char* evSelInt, const char* evSelDiff, const char* triggerCluster)
-{
-    /// Compute the relative (bin/integrated) Jpsi yield or <pT> in "quantity,flavour" bins from the mean value of the relative values of the tests used for the systematic uncertainty of signal extraction computation. Store also the systematic uncertainty tests.
-    ///
-    /// Important considerations:
-    ///   - No corrections can be applied to the yields or x-axis with this method
-    ///
-    ///   - The analysed file must contain the CMUL, CINT, CMSL, CMSL&0MUL and CINT&0MSL triggers to work correctly.
-    ///
-    ///   - The analysed file must contain the event selection PSALL (for the integrated signal extraction) and the one used in the yield analysis (i.e. PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00) to work correctly.
-    ///
-    /// Parameters:
-    ///   - what,quantity and flavour defines the binning to test (output will be 1 plot per bin)
-    /// value2test is the observable we want to test ( i.e. NJpsi(bin)/integratedNJpsi, <pt>(bin)/integrated<pt>... )
-    ///   - value2test == yield -> NJpsi(bin)/integratedNJpsi
-    ///   - value2test == mpt -> <pt>(bin)/integrated<pt>
-    ///   - relative: kTRUE if relative yield (y/y_int) wants to be computed. Note that here the ratio is computed from the mean values of subresults (ymean/ymean_int) and is not the mean value of subresults ratios
-    ///   - fNormType: Desired FNorm to use: "offline", "global" or "mean"
-    ///   - evSelInt: Event selection to compute integrated NofJpsi
-    ///   - evSelDiff: Event selection to compute diferential NofJpsi
-    ///   - triggercluster: cluster where the CMSL trigger is ("MUON" for pA but for pp2012 could be also "ALLNOTRD" for certain runs, the option "MUON-ALLNOTRD" accounts for both at the same time). By default is "MUON".
-
-
-    TString sfNormType(fNormType);
-    TString sevSelInt(evSelInt);
-    TString sevSelDiff(evSelDiff);
-
-    if ( IsSimulation() )
-        {
-        AliError("Cannot compute J/Psi yield: Is a simulation file");
-        return;
-        }
-    TString dimuonTriggerClassName = Config()->First(Config()->DimuonTriggerKey(),kFALSE);
-    TString centralitySelection = Config()->First(Config()->CentralitySelectionKey(),kFALSE);
-    TString pairSelection = Config()->First(Config()->PairSelectionKey(),kFALSE);
-
-    TString intPath(Form("%s/%s/%s/%s",
-                         sevSelInt.Data(),
-                         dimuonTriggerClassName.Data(),
-                         centralitySelection.Data(),
-                         pairSelection.Data())); //Path to get/store integrated results from Mergeable Collection
-
-    TString diffPath(Form("%s/%s/%s/%s",
-                          sevSelDiff.Data(),
-                          dimuonTriggerClassName.Data(),
-                          centralitySelection.Data(),
-                          pairSelection.Data())); //Path to get/store differential results from Mergeable Collection
-
-    TString striggerCluster(triggerCluster);
-    if ( striggerCluster.Contains("MUON") && !striggerCluster.Contains("ALLNOTRD") ) striggerCluster = "MUON";
-    else if ( striggerCluster.Contains("ALLNOTRD") && !striggerCluster.Contains("MUON") ) striggerCluster = "ALLNOTRD";
-    else if ( striggerCluster.Contains("MUON") && striggerCluster.Contains("ALLNOTRD") ) striggerCluster = "MUON-ALLNOTRD";
-    else
-        {
-        AliError("Unknown trigger cluster");
-        return;
-        }
-
-    TString svalue2Test(value2Test);
-    TString shName("");
-    TString sObsInt("");
-    TString sObsBin("");
-    TString sflavour(flavour);
-    TString squantity(quantity);
-    squantity.ToUpper();
-
-    TH1* hMB(0x0);
-    Double_t nEqMBTot(0.),nEqMBTotError(0.);
-    if ( !svalue2Test.CompareTo("yield",TString::kIgnoreCase) )
-        {
-        sObsInt = "PSI-INTEGRATED-AccEffCorr";
-        sObsBin = Form("PSI-%s-AccEffCorr",squantity.Data());
-        svalue2Test = "NofJPsi";
-        shName = "N^{J/#psi}_{bin}/N^{J/#psi}_{int}";
-
-        TH1* hMBTot = OC()->Histo(Form("/FNORM-%s/%s/V0A/hNEqMB",striggerCluster.Data(),sevSelInt.Data()));
-        if ( !hMBTot )
-            {
-            AliWarning(Form("No eq Nof MB events found in %s: Yield will not be calculated",Form("/FNORM-%s/%s/V0A/hNEqMB",striggerCluster.Data(),sevSelInt.Data())));
-            }
-        nEqMBTot = hMBTot->GetBinContent(1);
-        nEqMBTotError = hMBTot->GetBinError(1);
-
-
-        if ( sfNormType.Contains("offline") )
-            {
-            hMB = OC()->Histo(Form("/FNORM-%s/%s/V0A/hNofEqMBVS%s",striggerCluster.Data(),sevSelDiff.Data(),quantity));
-            if ( !hMB )
-                {
-                AliWarning(Form("Histo hNofEqMBVS%s not found: Yield will not be calculated",quantity));
-                }
-
-            std::cout << " Using Fnorm from offline method " << std::endl;
-            std::cout <<  std::endl;
-            }
-        else if ( sfNormType.Contains("global") )
-            {
-            hMB = OC()->Histo(Form("/FNORM-%s/%s/V0A/hNofEqMBVS%sFromGlobal",striggerCluster.Data(),sevSelDiff.Data(),quantity));
-            if ( !hMB )
-                {
-                AliError(Form("Histo hNofEqMBVS%sFromGlobal not found: Yield will not be calculated",quantity));
-                }
-
-            std::cout << " Using Fnorm from global method " << std::endl;
-            std::cout <<  std::endl;
-            }
-        else if ( sfNormType.Contains("mean") )
-            {
-            hMB = OC()->Histo(Form("/FNORM-%s/%s/V0A/hNofEqMBVS%sFromMean",striggerCluster.Data(),sevSelDiff.Data(),quantity));
-            if ( !hMB )
-                {
-                AliError(Form("Histo hNofEqMBVS%sFromMean not found: Yield will not be calculated",quantity));
-                }
-
-            std::cout << " Using mean Fnorm " << std::endl;
-            std::cout <<  std::endl;
-            }
-        else
-            {
-            AliWarning("Dont know what Fnorm use: Yield will not be calculated");
-            }
-
-        }
-    else if ( !svalue2Test.CompareTo("mpt",TString::kIgnoreCase) )
-        {
-        sObsInt = "PSI-INTEGRATED-AccEffCorr-MeanPtVsMinvUS";
-        sObsBin = Form("PSI-%s-AccEffCorr-MeanPtVsMinvUS",squantity.Data());
-        svalue2Test = "MeanPtJPsi";
-        shName = "<p_{t}>^{bin}/<p_{t}>^{int}";
-        }
-    else
-        {
-        AliError("unrecognized value to test");
-        return;
-        }
-
-    TString id(Form("/TESTSYST/%s/%s",sevSelInt.Data(),sevSelDiff.Data()));
-
-    //________Get the integrated results
-    AliAnalysisMuMuSpectra* sInt = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(Form("/%s/%s",intPath.Data(),sObsInt.Data())));
-    if ( !sInt )
-        {
-        AliError(Form("No integrated spectra %s found in %s",sObsInt.Data(),intPath.Data()));
-        return;
-        }
-
-    TObjArray* bin = BIN()->CreateBinObjArray("psi","integrated","");
-    if ( !bin )
-        {
-        AliError("No integrated bin found");
-        return;
-        }
-    AliAnalysisMuMuBinning::Range* r = static_cast<AliAnalysisMuMuBinning::Range*>(bin->At(0));
-
-    AliAnalysisMuMuJpsiResult* resInt =  static_cast<AliAnalysisMuMuJpsiResult*>(sInt->GetResultForBin(*r));
-    if ( !resInt )
-        {
-        AliError(Form("No integrated result found in spectra %s at %s",sObsInt.Data(),intPath.Data()));
-        return;
-        }
-    TObjArray* sresIntArray = resInt->SubResults();
-
-    delete bin;
-    //_________________________
-
-
-    bin = BIN()->CreateBinObjArray("psi",squantity.Data(),sflavour.Data());
-    if ( !bin )
-        {
-        AliError(Form("%s-%s-%s binning does not exist","psi",squantity.Data(),sflavour.Data()));
-        return;
-        }
-
-    //_______ Exclude desired bins
-    TIter nextBinTest(bin);
-
-    TString sbinListToExclude(binListToExclude);
-    TObjArray* abinListToExclude = sbinListToExclude.Tokenize(",");
-    TIter nextBinToExclude(abinListToExclude);
-    Int_t excl(0);
-    while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(nextBinTest()) ) ) //Bin loop
-        {
-        nextBinToExclude.Reset();
-        TObjString* s(0x0);
-        while ( (s = static_cast<TObjString*>(nextBinToExclude())) )
-            {
-            if ( !r->AsString().CompareTo(s->GetString().Data()) )
-                {
-                std::cout << "Removing bin " << s->GetString().Data() << std::endl;
-                bin->RemoveAt(excl);
-                }
-            }
-        excl++;
-        }
-    std::cout <<  std::endl;
-    bin->Compress();
-    //_________________
-
-
-    //______Create arrays to store values inside
-    Int_t nbin = bin->GetEntries();
-    Int_t nsres = sresIntArray->GetEntries();
-    TObjArray* sResultNameArray= new TObjArray();
-    sResultNameArray->SetOwner();
-    std::vector<std::vector<double> > valuesArr;
-    valuesArr.resize(nbin+1, std::vector<double>(nsres,0));
-    std::vector<std::vector<double> > valuesErrorArr;
-    valuesErrorArr.resize(nbin+1, std::vector<double>(nsres,0));
-    //_________________________
-
-
-    //________Get the integrated values from results
-    TIter nextIntSubResult(sresIntArray);
-    AliAnalysisMuMuResult* sresInt(0x0);
-
-    TString testSig(""); //Strings for testing the name of the subresult to extract the number of tests for the systematics
-    TString testSPsip("");
-    TString testSresIntNameSig("");
-    TString testSresIntNameSPsip("");
-
-    Int_t nFitsSameSignal(0);
-    Int_t j(0);
-    while ( ( sresInt = static_cast<AliAnalysisMuMuResult*>(nextIntSubResult()) ) ) //Integrated SubResult loop
-        {
-        TString sresIntName(sresInt->GetName());
-
-        valuesArr[0][j] = sresInt->GetValue(svalue2Test.Data());
-        valuesErrorArr[0][j] = sresInt->GetErrorStat(svalue2Test.Data());
-        sResultNameArray->Add(new TObjString(sresIntName.Data()));
-
-        if ( j ==0 ) // Get the first and last part of name of the first subresult
-            {
-            testSresIntNameSig = sresIntName.Data();
-            testSresIntNameSPsip = sresIntName.Data();
-
-            testSresIntNameSig.Remove(3,testSresIntNameSig.Sizeof()-3); // Get the first 3 characters which correspond to the signal shape (e.g CB2, NA6(0) ...)
-            testSresIntNameSPsip.Remove(0,testSresIntNameSPsip.Sizeof()-6); // Get the last 5 characters which correspond to the Psi' sigma (e.g. SP0.9 ...)
-            }
-
-        if ( sresIntName.Contains(testSresIntNameSig.Data()) && sresIntName.Contains(testSresIntNameSPsip.Data()) ) //This counts the number of times a fit with the same signal and same SigmaPsiP is repeated. This will be the number of tests for a given signal.
-            {
-            nFitsSameSignal++;
-            }
-        j++;
-        }
-
-    std::cout << "Number of tests per signal/SigmaPsi' combination = " << nFitsSameSignal << std::endl;
-    std::cout <<  std::endl;
-    //____________________________________
-
-    //__________Get the bin per bin results and the values
-    AliAnalysisMuMuSpectra* sBin = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(Form("/%s/%s",diffPath.Data(),sObsBin.Data())));
-    if ( !sBin )
-        {
-        AliError(Form("No integrated spectra %s found in %s",sObsBin.Data(),diffPath.Data()));
-        delete bin;
-        delete sResultNameArray;
-        return;
-        }
-
-
-    TIter nextBin(bin);
-    AliAnalysisMuMuJpsiResult* sresBin(0x0);
-    Int_t i(1);
-    while ( ( r = static_cast<AliAnalysisMuMuBinning::Range*>(nextBin()) ) ) //Bin loop
-        {
-        sresBin =  static_cast<AliAnalysisMuMuJpsiResult*>(sBin->GetResultForBin(*r));
-        if ( !sresBin )
-            {
-            AliError(Form("No result found in spectra %s at %s for bin %s",sObsInt.Data(),diffPath.Data(),r->AsString().Data()));
-            delete bin;
-            delete sResultNameArray;
-            return;
-            }
-
-        TObjArray* sresBinArray = sresBin->SubResults();
-
-        if ( nsres != sresBinArray->GetEntries() )
-            {
-            AliError("Integrated and bins spectra have different number of subresults");
-            delete bin;
-            delete sResultNameArray;
-            return;
-            }
-
-        TIter nextSubResult(sresBinArray);
-        j = 0;
-        while ( (sresBin = static_cast<AliAnalysisMuMuJpsiResult*>(nextSubResult())) ) // Subresults loop
-            {
-            valuesArr[i][j] = sresBin->GetValue(svalue2Test.Data());
-            valuesErrorArr[i][j] = sresBin->GetErrorStat(svalue2Test.Data());
-
-            j++;
-
-            } //End Subresults loop
-        i++;
-
-        } //End bin loop
-    //___________________________
-
-
-    //____________Compute the value ratios and systematic uncertainties on the ratios bin by bin
-
-    //______ Create histos to store signal extraction systematic uncertainties
-    TH1* hsyst = new TH1F(Form("%s_Systematics",value2Test),Form("%s Systematics results",value2Test),nbin,0,nbin);
-    //_________________________________
-
-    //______ Create histos to store relative Jpsi yield or <p_T> vs bins
-    Int_t size = bin->GetEntriesFast();
-    Double_t* axis = new Double_t[size+1];
-    TIter next(bin);
-    AliAnalysisMuMuBinning::Range* b;
-    TH1* hy(0x0);
-    i = 0;
-    while ( ( b = static_cast<AliAnalysisMuMuBinning::Range*>(next()) ) )
-        {
-        axis[i] = b->Xmin();
-        ++i;
-        }
-
-    b = static_cast<AliAnalysisMuMuBinning::Range*>(bin->At(size-1));
-
-    axis[i] = b->Xmax();
-
-    if ( !svalue2Test.CompareTo("NofJPsi",TString::kIgnoreCase) )
-        {
-        hy = new TH1D(Form("hMeanJPsiYieldVS%sRelative",quantity),Form("Relative J/#psi yield vs %s;%s;Y^{J/#psi}/Y^{J/#psi}_{int}",quantity,quantity)
-                      ,size,axis);
-        }
-    else if ( !svalue2Test.CompareTo("MeanPtJPsi",TString::kIgnoreCase) )
-        {
-        hy = new TH1D(Form("hMeanJPsiMPtVS%sRelative",quantity),Form("Relative J/#psi <p_{T}> vs %s;%s;<p_{T}>^{J/#psi}/<p_{T}>^{J/#psi}_{int}",quantity,quantity)
-                      ,size,axis);
-        }
-
-    if ( !hy )
-        {
-        AliError("No histogram created to store the results");
-        return;
-        }
-    delete[] axis;
-    //_________________________________
-
-    TString binName("");
-    for ( Int_t b = 1 ; b <= size ; b++ ) //Bin loop
-        {
-
-        binName = static_cast<AliAnalysisMuMuBinning::Range*>(bin->At(b-1))->AsString().Data();
-        //    TString savePath(Form("%s/%s",id.Data(),binName.Data()));
-
-        Int_t binUCTotal(1);
-
-        TH1* hratiosBin = new TH1D(Form("SystTests_%s_Bkg_%s",sObsBin.Data(),binName.Data()),
-                                   Form("%s Systematics tests for %s",binName.Data(),shName.Data()),j*nFitsSameSignal,0,
-                                   j*nFitsSameSignal);
-
-        for ( Int_t k = 0 ; k < j ; k++ ) // Subresults loop for integrated values
-            {
-            //__Get the name of the signal and the Psi' sigma for the integrated result
-            TString signalNameInt(sResultNameArray->At(k)->GetName());
-            TString sPsiPNameInt(signalNameInt.Data());
-
-            signalNameInt.Remove(3,signalNameInt.Sizeof()-3); // Get the first 3 characters which correspond to the signal shape (e.g CB2, NA6(0) ...)
-            sPsiPNameInt.Remove(0,sPsiPNameInt.Sizeof()-6); // Get the last 5 characters which correspond to the Psi' sigma (e.g. SP0.9 ...)
-            //__
-
-            //      Int_t sizeName = signalName.Sizeof();
-            //      signalName.Remove(2,sizeName-3);
-            //      Int_t binUC(1);
-
-            for ( Int_t l = 0; l < j ; l++) //Subresults loop for bins values
-                {
-                TString binSignalName(sResultNameArray->At(l)->GetName());
-
-                Double_t ratio,ratioError(0.);
-
-                ratio = valuesArr[b][l] / valuesArr[0][k];
-                //          ratioError = TMath::Sqrt( TMath::Power(valuesErrorArr[b][l] / valuesArr[0][k],2.) + TMath::Power(valuesArr[b][l]*valuesErrorArr[0][k] / TMath::Power(valuesArr[0][k],2.),2.) );
-
-                if ( (valuesErrorArr[b][l] != 0) && (valuesErrorArr[0][k] != 0) ) // We only give an error!=0 if the errors of the int and bin values are both !=0 (Otherwise it means that there was a problem with the fit so we fix the error to 0 to skip the test later on)
-                    {
-                    ratioError = ratio*TMath::Sqrt( TMath::Power(valuesErrorArr[b][l] / valuesArr[b][l],2.) + TMath::Power(valuesErrorArr[0][k] / valuesArr[0][k],2.) );
-                    }
-
-                if ( binSignalName.Contains(signalNameInt.Data()) && binSignalName.Contains(sPsiPNameInt.Data()) ) // In this case the integrated and bin values have the same signal shape and Psi' sigma, so the result is stored
-                    {
-                    hratiosBin->GetXaxis()->SetBinLabel(binUCTotal,Form("%s/%s",sResultNameArray->At(l)->GetName(),sResultNameArray->At(k)->GetName()));
-
-                    hratiosBin->SetBinContent(binUCTotal,ratio);
-                    hratiosBin->SetBinError(binUCTotal,ratioError);
-
-                    binUCTotal++;
-                    }
-
-                }
-
-            }
-        //____ Take the Eq Nof MB events from the histos
-        Double_t nMBRatio(1.),nMBRatioError(0.);
-        if ( !svalue2Test.CompareTo("NofJPsi",TString::kIgnoreCase) )
-            {
-            for (Int_t i = 1 ; i <= hMB->GetNbinsX() ; i++ )
-                {
-
-                if ( !binName.CompareTo(hMB->GetXaxis()->GetBinLabel(i)) )
-                    {
-                    Double_t eqMBBin = hMB->GetBinContent(i);
-
-                    nMBRatio = nEqMBTot/eqMBBin;
-                    nMBRatioError = nMBRatio*TMath::Sqrt( TMath::Power(nEqMBTotError/nEqMBTot,2.) + TMath::Power(hMB->GetBinError(i)/eqMBBin,2.) );
-                    }
-
-                }
-            }
-        //_____________________
-
-        //________Mean, error on the mean and systematic uncertainty(signal extraction) computation for bin
-        //__Mean computation
-        Double_t num(0.),deno(0.);
-        for ( Int_t m = 1 ; m <= hratiosBin->GetNbinsX() ; m++ )
-            {
-            Double_t value = hratiosBin->GetBinContent(m); // Bin/Int value
-            Double_t error = hratiosBin->GetBinError(m); // Before this was divided by TMath::Sqrt(value);
-
-            if ( !(error>0.0 ) ) continue; // Skip values with error=0 (There were problems with the fit)
-
-            num += value; // We do not weight the values anymore with TMath::Power(weight,2.);
-            deno += 1.; // We do not weight the values anymore with 1./TMath::Power(weight,2.);
-            }
-
-        Double_t mean = num/deno;
-        Double_t jpsiMean = mean*nMBRatio ; //Compute relative Jpsi yield
-        //__
-
-        //__Error on the mean
-        Int_t nofvalidResults(0),nofTests(0);
-        Double_t w2err2(0.),sumw(0.);
-        for ( Int_t n = 1 ; n <= hratiosBin->GetNbinsX() ; n++ )
-            {
-            Double_t value = hratiosBin->GetBinContent(n);
-            Double_t error = hratiosBin->GetBinError(n);
-            Double_t weight = 1.; // We do not weight the values anymore with (error*error)/value;
-
-            nofTests++;
-
-            if ( !(error>0.0 ) ) continue; // Skip values with error=0 (There were problems with the fit)
-
-            w2err2 += weight*weight*error*error;
-            sumw += 1./weight;
-
-            nofvalidResults++;
-            }
-
-        std::cout << std::endl;
-        std::cout << "Bin " << b << " number of valid tests = " << nofvalidResults << "(" << nofvalidResults*100./nofTests << "%)" << std::endl;
-        std::cout << std::endl;
-
-        Double_t errorMean = TMath::Sqrt(w2err2*nofvalidResults)/sumw;
-        Double_t jpsiErrorMean = jpsiMean*TMath::Sqrt( TMath::Power(errorMean/mean,2.) + TMath::Power(nMBRatioError/nMBRatio,2.) ); //Compute relative Jpsi yield error
-        //__
-
-        Double_t val(0.),err(0.);
-        if ( !svalue2Test.CompareTo("NofJPsi",TString::kIgnoreCase) )
-            {
-            val = jpsiMean;
-            err = jpsiErrorMean;
-            }
-        else if ( !svalue2Test.CompareTo("MeanPtJPsi",TString::kIgnoreCase) )
-            {
-            val = mean;
-            err = errorMean;
-            }
-
-        hy->SetBinContent(b,val);
-        hy->SetBinError(b,err);
-        hy->GetXaxis()->SetBinLabel(b,binName.Data());
-
-        //__Systematic uncertainty
-        Double_t v1(0.),v2(0.),sum(0.);
-        for ( Int_t l = 1 ; l <= hratiosBin->GetNbinsX() ; l++ )
-            {
-            Double_t value = hratiosBin->GetBinContent(l);
-            Double_t error = hratiosBin->GetBinError(l); // Before this was divided by TMath::Sqrt(value);
-
-            if ( !(error>0.0 ) ) continue; // Skip values with error=0 (There were problems with the fit)
-
-            Double_t wi = 1.; // We do not wight anymore with 1./TMath::Power(error,2.);
-            v1 += wi;
-            v2 += wi*wi;
-            Double_t diff = value - mean;
-            sum += wi*diff*diff;
-
-            }
-
-        Double_t syst = TMath::Sqrt( (v1/(v1*v1-v2)) * sum);
-        //__
-
-        hsyst->GetXaxis()->SetBinLabel(b,binName.Data());
-        hsyst->SetBinContent(b,(syst*100.)/mean);
-        //________
-
-        //___
-        TF1* meanF = new TF1("mean","[0]",0,j*nFitsSameSignal);
-        meanF->SetParameter(0,mean);
-
-        TF1* meanFPS = new TF1("meanPS","[0]",0,j*nFitsSameSignal);
-        meanFPS->SetParameter(0,mean+syst);
-        meanFPS->SetLineStyle(2);
-
-        TF1* meanFMS = new TF1("meanMS","[0]",0,j*nFitsSameSignal);
-        meanFMS->SetParameter(0,mean-syst);
-        meanFMS->SetLineStyle(2);
-
-        hratiosBin->GetListOfFunctions()->Add(meanF);
-        hratiosBin->GetListOfFunctions()->Add(meanFPS);
-        hratiosBin->GetListOfFunctions()->Add(meanFMS);
-
-        //___ Save the signal extraction systematic uncertainty histo for each bin
-        TH1* o = OC()->Histo(Form("%s",id.Data()),hratiosBin->GetName());
-
-        if (o)
-            {
-            AliWarning(Form("Replacing %s/%s",id.Data(),hratiosBin->GetName()));
-            OC()->Remove(Form("%s/%s",id.Data(),hratiosBin->GetName()));
-            }
-
-        Bool_t adoptOK = OC()->Adopt(id.Data(),hratiosBin);
-
-        if ( adoptOK ) std::cout << "+++syst histo " << hratiosBin->GetName() << " adopted" << std::endl;
-        else AliError(Form("Could not adopt syst histo %s",hratiosBin->GetName()));
-        //__________________
-        }
-    //_____________________________________________________________________________
-
-
-    //___ Save the signal extraction systematic uncertainty histo for all the bins
-    TH1* o = OC()->Histo(Form("%s",id.Data()),hsyst->GetName());
-
-    if (o)
-        {
-        AliWarning(Form("Replacing %s/%s",id.Data(),hsyst->GetName()));
-        OC()->Remove(Form("%s/%s",id.Data(),hsyst->GetName()));
-        }
-
-    Bool_t adoptOK = OC()->Adopt(id.Data(),hsyst);
+    return SPECTRA(spectraName.Data());
+}
 
-    if ( adoptOK ) std::cout << "+++syst histo " << hsyst->GetName() << " adopted" << std::endl;
-    else AliError(Form("Could not adopt syst histo %s",hsyst->GetName()));
-    //__________________
+//_____________________________________________________________________________
+AliAnalysisMuMuSpectra* AliAnalysisMuMu::GetSpectra(const char* binType , const char* EventSelection,  const char* DimuonTrigger,
+  const char* Centrality, const char* PairSelectionKey, const char* flavour) const
+{
+/**
+ * @brief Pointer to a given spectra
+ * @details More specific method
+ *
+ * @param binType [description]
+ * @param flavour [description]
+ *
+ * @return AliAnalysisMuMuSpectra
+ */
+    TString sbinType(binType);
+    TString sflavour(flavour);
+    sbinType.ToUpper();
+    sflavour.ToUpper();
 
+    TString spectraName(Form("/%s/%s/%s/%s/PSI-%s",
+                             EventSelection,
+                             DimuonTrigger,
+                             Centrality,
+                             PairSelectionKey,
+                             sbinType.Data()));
 
-    //___ Save the Jpsi relative yield or <pT> histo
-    o = OC()->Histo(Form("/RESULTS-%s/%s",striggerCluster.Data(),diffPath.Data()),hy->GetName());
+    cout << "spectraName MC : " << spectraName.Data() << endl;
 
-    if (o)
-        {
-        AliWarning(Form("Replacing %s/%s","/RESULTS-%s/PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00/V0A",hy->GetName()));
-        OC()->Remove(Form("/RESULTS-%s/%s/%s",striggerCluster.Data(),diffPath.Data(),hy->GetName()));
-        }
+    if (sflavour.Length()>0)
+    {
+      spectraName += "-";
+      spectraName += sflavour.Data();
+    }
 
-    adoptOK = OC()->Adopt(Form("/RESULTS-%s/%s",striggerCluster.Data(),diffPath.Data()),hy);
+    return SPECTRA(spectraName.Data());
+}
 
-    if ( adoptOK ) std::cout << "+++Yield histo " << hy->GetName() << " adopted" << std::endl;
-    else AliError(Form("Could not adopt Yield histo %s",hy->GetName()));
-    //__________________
+//_____________________________________________________________________________
+TH1* AliAnalysisMuMu::PlotAccEfficiency(const char* SpectraName)
+{
+/**
+ * @brief Plot AccxEff
+ * @details Search for an AliAnalysisMuMuSpectra according to first entry of each keys in the config. file. FIXME : make it general.
+ *
+ * @param SpectraName [description]
+ * @return TH1 to be handle by the user
+ */
+    if ( !IsSimulation() ){
+      AliError("Could not get AccxEff histo: Not simulation file");
+      return 0x0;
+    }
 
+    TString path(Form("/%s/%s/%s/%s",
+                      Config()->First(Config()->EventSelectionKey(),kTRUE).Data(),
+                      Config()->First(Config()->DimuonTriggerKey(),kTRUE).Data(),
+                      Config()->First(Config()->CentralitySelectionKey(),kTRUE).Data(),
+                      Config()->First(Config()->PairSelectionKey(),kTRUE).Data()));
 
-    delete bin;
-    delete sResultNameArray;
+    AliAnalysisMuMuSpectra* s = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(Form("%s/%s",path.Data(),SpectraName)));
+    if ( !s )
+        {
+        AliError(Form("No AccEff spectra %s found in %s",SpectraName,path.Data()));
+        return 0x0;
+        }
 
-    return;
+    return s->Plot(Form("AccEff%s",GetParticleName()),"PSICOUNT",kFALSE);//_2.2_3.9
 
 }
 
-
 //_____________________________________________________________________________
 UInt_t AliAnalysisMuMu::GetSum(AliCounterCollection& cc, const char* triggerList,
                                const char* eventSelection, Int_t runNumber)
@@ -2767,7 +2353,6 @@ UInt_t AliAnalysisMuMu::GetSum(AliCounterCollection& cc, const char* triggerList
   TObjArray* a = TString(triggerList).Tokenize(" ");
   TIter next(a);
   TObjString* str;
-
   UInt_t n(0);
 
   TString sEventSelection(eventSelection);
@@ -2803,8 +2388,14 @@ void AliAnalysisMuMu::GetCollectionsFromAnySubdir(TDirectory& dir,
                                                     AliCounterCollection*& cc,
                                                     AliAnalysisMuMuBinning*& bin)
 {
-  /// Find, within dir and its sub-directories, the objects OC,CC and BIN
-
+/**
+ * @brief Find, within dir and its sub-directories, the objects OC,CC and BIN
+ *
+ * @param dir [description]
+ * @param oc [description]
+ * @param cc [description]
+ * @param bin [description]
+ */
   TList* keys = dir.GetListOfKeys();
   TIter next(keys);
 
@@ -2846,20 +2437,15 @@ void AliAnalysisMuMu::GetCollectionsFromAnySubdir(TDirectory& dir,
 }
 
 //_____________________________________________________________________________
-Bool_t
-AliAnalysisMuMu::GetCollections(const char* rootfile,
-                                const char* subdir,
-                                AliMergeableCollection*& oc,
-                                AliCounterCollection*& cc,
-                                AliAnalysisMuMuBinning*& bin,
-                                std::set<int>& runnumbers)
+Bool_t AliAnalysisMuMu::GetCollections(const char* rootfile,const char* subdir,AliMergeableCollection*& oc,AliCounterCollection*& cc,AliAnalysisMuMuBinning*& bin,std::set<int>& runnumbers)
 {
-  /// Get access to the mergeable collection, counter collection and binning
-  /// within file rootfile.
-  /// rootfile is a filename, with an optional directory (with the syntax
-  /// (filename.root:directory)
-  /// where the collections are to be found.
-
+/**
+ * @brief Get access to the mergeable collection, counter collection and binning within file rootfile.
+ * @details   rootfile is a filename, with an optional directory (with the syntax filename.root:directory) where the collections are to be found.
+ *
+ * The rootfile should be the outfile of the AliAnalysisTaskMuMu class.
+ *
+ */
   oc = 0x0;
   cc = 0x0;
   bin = 0x0;
@@ -2935,10 +2521,9 @@ AliAnalysisMuMu::GetCollections(const char* rootfile,
 //_____________________________________________________________________________
 Bool_t AliAnalysisMuMu::IsSimulation() const
 {
-    /// whether or not we have MC information
-
-    //  return kFALSE;
-
+/**
+ * @brief whether or not we have MC information
+ */
     if (!fMergeableCollection) return kFALSE;
 
     TList* list = fMergeableCollection->CreateListOfKeys(0);
@@ -2955,239 +2540,581 @@ Bool_t AliAnalysisMuMu::IsSimulation() const
 }
 
 //_____________________________________________________________________________
-Int_t
-AliAnalysisMuMu::Jpsi(const char* what, const char* binningFlavour, Bool_t fitmPt, Bool_t onlyCorrected)
+void AliAnalysisMuMu::NormMixedMinv(const char* binType, const char* particle, const char* flavour, Bool_t corrected, Double_t Mmin, Double_t Mmax)
 {
-    /// Fit the J/psi (and psiprime) peaks for the triggers in fDimuonTriggers list
-    /// what="integrated" => fit only fully integrated MinvUS
-    /// what="pt" => fit MinvUS in pt bins
-    /// what="y" => fit MinvUS in y bins
-    /// what="pt,y" => fit MinvUS in (pt,y) bins
-
-    TStopwatch timer;
-
-    if (!fMergeableCollection)
-        {
-        AliError("No mergeable collection. Consider Upgrade()");
-        return 0;
-        }
+/**
+ * @brief Create normalized mixed unlike-sign minv spectrum.
+ * @details The normalization is made via : int{N_mix_+-} = \int{2*R*\sqrt{N_raw_++ * N_raw_--}}. Raw histograms are selected according to RefMix...Key() in the config. file.
+ *
+ * Mixed Histograms are selected according to Mix...Key() in config. file. See AliAnalysisMuMuConfig class.
+ *
+ * @param binType    [description]
+ * @param particle   particle name
+ * @param flavour    [description]
+ * @param corrected  If Minv are already AccxEff corrected or not
+ */
+    if(!OC())
+    {
+        AliError("No mergeable. Consider Upgrade()");
+        return;
+    }
+    else
+    {
+        cout <<      " ================================================================ " << endl;
+        cout <<      "                       NormMixedMinv                  " << endl;
+        cout <<      " ================================================================ " << endl;
+    }
 
-    Int_t nfits(0);
+    // Get configuration settings
+    TObjArray* eventTypeArray    = Config()->GetListElements(Config()->RefMixEventSelectionKey(),IsSimulation());
+    TObjArray* triggerArray      = Config()->GetListElements(Config()->RefMixTriggerKey(),IsSimulation());
+    TObjArray* eventTypeMixArray = Config()->GetListElements(Config()->EventSelectionMixKey(),IsSimulation());
+    TObjArray* triggerMixArray   = Config()->GetListElements(Config()->MixTriggerKey(),IsSimulation());
+    TObjArray* pairCutArray      = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+    TObjArray* centralityArray   = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
+    TObjArray* binTypeArray      = TString(binType).Tokenize(",");
 
-    TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
-    TObjArray* triggerArray     = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
-    TObjArray* pairCutArray     = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
-    TObjArray* centralityArray  = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
-    TObjArray* whatArray        = TString(what).Tokenize(",");
+    TObjArray* bins;
 
+    // Iterator for loops
     TIter nextTrigger(triggerArray);
+    TIter nextTriggerMix(triggerMixArray);
     TIter nextEventType(eventTypeArray);
+    TIter nextEventTypeMix(eventTypeMixArray);
     TIter nextPairCut(pairCutArray);
-    TIter nextWhat(whatArray);
+    TIter nextbinType(binTypeArray);
     TIter nextCentrality(centralityArray);
 
-    TObjString* trigger;
-    TObjString* eventType;
-    TObjString* pairCut;
-    TObjString* swhat;
-    TObjString* centrality;
+    // Strings
+    TObjString* strigger;
+    TObjString* seventType;
+    TObjString* spairCut;
+    TObjString* sbinType;
+    TObjString* scentrality;
+    TObjString* sTriggerMix;
+    TObjString* seventTypeMix;
 
-    while ( ( swhat = static_cast<TObjString*>(nextWhat()) ) ) {
-      AliAnalysisMuMuBinning* binning(0x0);
+    // For the loop comming
+    TString signFlagMinv[3] ={"","PlusPlus","MinusMinus"};
+    TString signFlagDist[3] ={"","PP","MM"};
 
-      if ( fBinning && swhat->String().Length() > 0 ) {
-        binning = fBinning->Project("psi",swhat->String().Data(),binningFlavour);
-      } else {
-        binning = new AliAnalysisMuMuBinning;
-        binning->AddBin("psi",swhat->String().Data());
-      }
+    THnSparse* n        =0x0;
+    TObject* o          =0x0;
 
-      StdoutToAliDebug(1,std::cout << "++++++++++++ swhat=" << swhat->String().Data() << std::endl;);
+    // Loop on each envenTypeMix (see MuMuConfig)
+    while ( ( seventTypeMix = static_cast<TObjString*>(nextEventTypeMix())) ){
+      AliDebug(1,Form("EVENTTYPEMIX %s",seventTypeMix->String().Data()));
+      nextTriggerMix.Reset();
 
-      std::cout << "" << std::endl;
-      std::cout << "++++++++++++++++++" << "NEW BIN TYPE" << "+++++++++++++++++++" << std::endl;
-      std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;
-      std::cout << "++++++++++++ swhat=" << swhat->String().Data() << "++++++++++++++++++++" << std::endl;
-      std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;
-      std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;
-      std::cout << "" << std::endl;
-      std::cout << "" << std::endl;
+      // Loop on each triggerMix (see MuMuConfig)
+      while ( ( sTriggerMix = static_cast<TObjString*>(nextTriggerMix())) ){
+        AliDebug(1,Form("-TRIGGERMIX %s",sTriggerMix->String().Data()));
+        nextEventType.Reset();
 
-      if (!binning) {
-        AliError("oups. binning is NULL");
-        continue;
-      }
+        // Loop on each envenType (see MuMuConfig)
+        while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+        {
+          AliDebug(1,Form("--REFEVENTTYPE %s",seventType->String().Data()));
+          nextTrigger.Reset();
 
-      StdoutToAliDebug(1,binning->Print(););
-      nextTrigger.Reset();
-      // Loop over all trigger
-      while ( ( trigger = static_cast<TObjString*>(nextTrigger())) ) {
-        AliDebug(1,Form("TRIGGER %s",trigger->String().Data()));
-        nextEventType.Reset();
-        // Loop over all evenType
-        while ( ( eventType = static_cast<TObjString*>(nextEventType())) ){
-          AliDebug(1,Form("--EVENTTYPE %s",eventType->String().Data()));
-          nextPairCut.Reset();
-          // Loop over all paircut
-          while ( ( pairCut = static_cast<TObjString*>(nextPairCut())) ) {
-            AliDebug(1,Form("----PAIRCUT %s",pairCut->String().Data()));
-            nextCentrality.Reset();
-            // Loop over all centrality
-            while ( ( centrality = static_cast<TObjString*>(nextCentrality()) ) ) {
-              AliDebug(1,"----Fitting...");
+          // Loop on each trigger (see MuMuConfig)
+          while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
+          {
+            AliDebug(1,Form("---REFTRIGGER %s",strigger->String().Data()));
+            nextPairCut.Reset();
 
-              TObject* o;
-              TString id(Form("/%s/%s/%s/%s",eventType->String().Data(),
-                              trigger->String().Data(),
-                              centrality->String().Data(),
-                              pairCut->String().Data()));
+            // Loop on each paircut (see MuMuConfig)
+            while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
+            {
+              AliDebug(1,Form("----PAIRCUT %s",spairCut->String().Data()));
+              nextbinType.Reset();
 
-              AliAnalysisMuMuSpectra* spectra(0x0);
+              // Loop on each type (see MuMuConfig)
+              while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+              {
+                AliDebug(1,Form("-----TYPE %s",sbinType->String().Data()));
+                nextCentrality.Reset();
 
-              if ( !onlyCorrected ) {
-                spectra = FitParticle("psi",trigger->String().Data(),eventType->String().Data(),pairCut->String().Data(),centrality->String().Data(),*binning);
+                // Loop on each centrality (see MuMuConfig)
+                while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
+                {
+                  AliDebug(1,Form("------CENTRALITY %s",scentrality->String().Data()));
+                  nextbinType.Reset();
 
-                AliDebug(1,Form("----fitting done spectra = %p",spectra));
+                  // Loop on each centrality (see MuMuConfig)
+                  while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+                  {
+                    AliDebug(1,Form("-------BIN %s",sbinType->String().Data()));
+
+                    // Get Binning
+                    AliAnalysisMuMuBinning* binning(0x0);
+                    if ( fBinning && sbinType->String().Length() > 0 ) binning = fBinning->Project(particle,sbinType->String().Data(),flavour);
+                    else  {
+                      binning = new AliAnalysisMuMuBinning;
+                      binning->AddBin(particle,sbinType->String().Data());
+                    }
+                    if (!binning) {
+                      AliError("oups. binning is NULL");
+                      continue;
+                    }
 
-                if ( spectra ) {
-                  ++nfits;
+                    // Create array
+                    TObjArray* bins = binning->CreateBinObjArray(particle);
+                    if (!bins){
+                      AliError(Form("Did not get any bin for particle %s",particle));
+                      delete binning;
+                      continue;
+                    }
 
-                  o = fMergeableCollection->GetObject(id.Data(),spectra->GetName());
-                  AliDebug(1,Form("----nfits=%d id=%s o=%p",nfits,id.Data(),o));
+                    // Create ID for the fit which will be used to name results
+                    TString idraw(Form("/%s/%s/%s/%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data()));
+                    AliDebug(1,Form("idraw = %s\n",idraw.Data() ));
+                    TString idMix(Form("/%s/%s/%s/%s",seventTypeMix->String().Data(),sTriggerMix->String().Data(),scentrality->String().Data(),spairCut->String().Data()));
+                    AliDebug(1,Form("idMix = %s\n",idMix.Data() ));
+
+                    // The binning pointer, which point at Pt binning, Y binning etc.
+                    AliAnalysisMuMuBinning::Range* bin;
+                    TIter next(bins);
+
+                    // Add some element to ID
+                    TString spectraName(binning->GetName());
+                    if ( strcmp(flavour,"") != 0 ){
+                      spectraName += "-";
+                      spectraName += flavour;
+                    }
+                    if ( corrected ){
+                      spectraName += "-";
+                      spectraName += "AccEffCorr";
+                    }
 
-                  if (o) {
-                    AliWarning(Form("Replacing %s/%s",id.Data(),spectra->GetName()));
-                    fMergeableCollection->Remove(Form("%s/%s",id.Data(),spectra->GetName()));
-                  }
+                    //MAIN PART : Loop on every binning range
+                    while ( ( bin = static_cast<AliAnalysisMuMuBinning::Range*>(next())) )
+                    {
+                      // ---- Here we get all the histos we need ----
+                      TH1* hTableMinv[6]    = {0x0,  0x0,  0x0,  0x0,  0x0,  0x0};
+                      //                      {hMinvPM,  hMinvPP,  hMinvMM,  hMinvMixPM,  hMinvMixPP,  hMinvMixMM};
+                      TH1* hTableDistRaw[6] = {0x0,  0x0,  0x0,  0x0,  0x0,  0x0};
+                      //                      {hpT,  hpTPP,  hpTMM,  hY,  hYPP,  hYMM};
+                      TH1* hTableDistMix[6] = {0x0,  0x0,  0x0,  0x0,  0x0,  0x0};
+                      //                      {hpTMix,  hpTMixPP,  hpTMixMM,  hYMix,  hYMixPP,  hYMixMM};
+                      TH1* hRCoef;
+
+                      // Get Minv Histo
+                      for (int j = 0; j < 3; ++j) {
+                        TString hnameraw = corrected ? Form("MinvUS+%s%s_AccEffCorr",bin->AsString().Data(),signFlagMinv[j].Data()) : Form("MinvUS+%s%s",bin->AsString().Data(),signFlagMinv[j].Data());
+                        TString hnamemix = corrected ? Form("MinvUS+%s%sMix_AccEffCorr",bin->AsString().Data(),signFlagMinv[j].Data()) : Form("MinvUS+%s%sMix",bin->AsString().Data(),signFlagMinv[j].Data());
+                        // Pointer to the histo from histo collection (Yes it is discusting )
+                        if ( OC()->Histo(idraw.Data(),hnameraw.Data()) ) hTableMinv[j] = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnameraw.Data())->Clone());
+                        else {
+                          AliError(Form("Could not find histo %s/%s",idraw.Data(),hnameraw.Data()));
+                          continue ;
+                        }
 
-                  Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),spectra);
+                        if ( OC()->Histo(idMix.Data(),hnamemix.Data()) ) hTableMinv[j+3] = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnamemix.Data())->Clone());
+                        else {
+                          AliError(Form("Could not find histo %s/%s",idMix.Data(),hnamemix.Data()));
+                          continue;
+                        }
+                      }
+
+                      // Get Dist Histo
+                      for (int j = 0; j < 3; ++j) {
+                        TString hnamePt = corrected ? Form("Pt%s_AccEffCorr",signFlagDist[j].Data()) : Form("Pt%s",signFlagDist[j].Data());
+                        TString hnameY  = corrected ? Form("Y%s_AccEffCorr",signFlagDist[j].Data()) : Form("Y%s",signFlagDist[j].Data());
+
+                        TString hnamePtMix = corrected ? Form("PtMix%s_AccEffCorr",signFlagDist[j].Data()) : Form("PtMix%s",signFlagDist[j].Data());
+                        TString hnameYMix  = corrected ? Form("YMix%s_AccEffCorr",signFlagDist[j].Data()) : Form("YMix%s",signFlagDist[j].Data());
+
+                        // Pointer to the histo from histo collection (Yes it is discusting )
+                        if ( OC()->GetObject(idraw.Data(),hnamePt.Data()) ){
+                          // hTableDistRaw[j] = OC()->Histo(idraw.Data(),hnamePt.Data());
+                          n = static_cast<THnSparse*>(OC()->GetObject(idraw.Data(),hnamePt.Data()));
+                          Int_t binmin = n->GetAxis(1)->FindBin(Mmin);
+                          Int_t binmax = n->GetAxis(1)->FindBin(Mmax);
+                          n->GetAxis(1)->SetRange(binmin,binmax);
+                          hTableDistRaw[j] = n->Projection(0,"e");
+                          hTableDistRaw[j]->SetName(Form("%s_%.2f_%.2f",hTableDistRaw[j]->GetName(),Mmin,Mmax)) ;
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idraw.Data(),hnamePt.Data()));
+                          continue ;
+                        }
 
-                  if ( adoptOK ) std::cout << "+++Spectra " << spectra->GetName() << " adopted" << std::endl;
-                  else AliError(Form("Could not adopt spectra %s",spectra->GetName()));
+                        if ( OC()->GetObject(idraw.Data(),hnameY.Data()) ) {
+                          // hTableDistRaw[j+3] = OC()->Histo(idraw.Data(),hnameY.Data());
+                          n = static_cast<THnSparse*>(OC()->GetObject(idraw.Data(),hnameY.Data()));
+                          Int_t binmin = n->GetAxis(1)->FindBin(Mmin);
+                          Int_t binmax = n->GetAxis(1)->FindBin(Mmax);
+                          n->GetAxis(1)->SetRange(binmin,binmax);
+                          hTableDistRaw[j+3] = n->Projection(0,"e");
+                          hTableDistRaw[j+3]->SetName(Form("%s_%.2f_%.2f",hTableDistRaw[j+3]->GetName(),Mmin,Mmax)) ;
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idraw.Data(),hnameY.Data()));
+                          continue ;
+                        }
 
-                  StdoutToAliDebug(1,spectra->Print(););
-                } else AliError("Error creating spectra");
-              }
+                        if ( OC()->GetObject(idMix.Data(),hnamePtMix.Data()) ){
+                          // hTableDistMix[j] = OC()->Histo(idMix.Data(),hnamePtMix.Data());
+                          n = static_cast<THnSparse*>(OC()->GetObject(idMix.Data(),hnamePtMix.Data()));
+                          Int_t binmin = n->GetAxis(1)->FindBin(Mmin);
+                          Int_t binmax = n->GetAxis(1)->FindBin(Mmax);
+                          n->GetAxis(1)->SetRange(binmin,binmax);
+                          hTableDistMix[j] = n->Projection(0,"e");
+                          hTableDistMix[j]->SetName(Form("%s_%.2f_%.2f",hTableDistMix[j]->GetName(),Mmin,Mmax)) ;
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idMix.Data(),hnamePtMix.Data()));
+                          continue ;
+                        }
 
-              AliDebug(1,"----Fitting corrected spectra...");
-              AliAnalysisMuMuSpectra* spectraCorr = FitParticle("psi",trigger->String().Data(),eventType->String().Data(),pairCut->String().Data(),centrality->String().Data(),*binning,"minv",kTRUE);
+                        if ( OC()->GetObject(idMix.Data(),hnameYMix.Data()) ) {
+                          // hTableDistMix[j+3] = OC()->Histo(idMix.Data(),hnameYMix.Data());
+                          n = static_cast<THnSparse*>(OC()->GetObject(idMix.Data(),hnameYMix.Data()));
+                          Int_t binmin = n->GetAxis(1)->FindBin(Mmin);
+                          Int_t binmax = n->GetAxis(1)->FindBin(Mmax);
+                          n->GetAxis(1)->SetRange(binmin,binmax);
+                          hTableDistMix[j+3] = n->Projection(0,"e");
+                          hTableDistMix[j+3]->SetName(Form("%s_%.2f_%.2f",hTableDistMix[j+3]->GetName(),Mmin,Mmax)) ;
+                        } else {
+                          AliError(Form("Could not find GetObject %s/%s",idMix.Data(),hnameYMix.Data()));
+                          continue ;
+                        }
+                      }
+
+                      // Check if we have all the histo we need
+                      Bool_t missAnHisto = kFALSE;
+                      for (int i = 0; i < 6; ++i){
+                        if(!hTableMinv[i] || !hTableDistRaw[i] || !hTableDistMix[i]) missAnHisto=kTRUE;
+                      }
+                      if(missAnHisto){
+                        AliError(Form("One histo is missing ... go to next bin\n"));
+                        for (int i=0; i<6; i++){ if (hTableMinv[i]!=0x0) delete hTableMinv[i];  }
+                        for (int i=0; i<6; i++){ if (hTableDistRaw[i]!=0x0) delete hTableDistRaw[i]; }
+                        for (int i=0; i<6; i++){ if (hTableDistMix[i]!=0x0) delete hTableDistMix[i]; }
+                        continue;
+                      }
+
+                      // ---- First part : compute the R Factor ----
+                      hRCoef = static_cast<TH1*>(hTableMinv[3]->Clone());
+                      hRCoef->SetName(Form("RCoefficient_%s",bin->AsString().Data()));
+                      hRCoef->SetTitle("R Coefficient versus M");
+                      hRCoef->GetYaxis()->SetTitle("R");
+
+                      // Copy and Multiply like sign histograms
+                      TH1* hMinvMixPPCopy = static_cast<TH1*>(hTableMinv[4]->Clone());
+                      hMinvMixPPCopy->Multiply(hTableMinv[5]);
+
+                      // Compute and fill square roots of like-signs histo
+                      Int_t nEntries = hMinvMixPPCopy->GetEntries();
+                      for (int j = 0; j < nEntries ; j++) {
+                        Double_t binContent = hMinvMixPPCopy->GetBinContent(j);
+                        Double_t binError   = hMinvMixPPCopy->GetBinError(j);
+                        if( binContent !=0 ) hMinvMixPPCopy->SetBinContent(j,TMath::Sqrt(binContent));
+                        if( binContent !=0 && binError !=0 ) hMinvMixPPCopy->SetBinError(j,TMath::Sqrt(binContent)*(binError/binContent));
+                      }
+
+                      // Final R Factor
+                      hRCoef->Divide(hMinvMixPPCopy);
+                      hRCoef->Scale(0.5);
+
+                      // Save results in mergeable collection
+                      if ( hRCoef ) {
+                        o = fMergeableCollection->GetObject(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hRCoef->GetName());
+                        AliDebug(1,Form("----idMix=MIX_%s_%s%s o=%p",seventType->String().Data(),strigger->String().Data(),idMix.Data(),o));
+
+                        if (o) fMergeableCollection->Remove(Form("/MIX/%s_%s%s/%s",seventType->String().Data(),strigger->String().Data(),idMix.Data(),hRCoef->GetName()));
+
+                        Bool_t adoptOK = fMergeableCollection->Adopt(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hRCoef);
+                        if(!adoptOK) AliError(Form("Could not adopt histo %s",hRCoef->GetName()));
+                      } else {
+                        for (int i=0; i<6; i++){ if (hTableMinv[i]!=0x0) delete hTableMinv[i]; }
+                        for (int i=0; i<6; i++){ if (hTableDistRaw[i]!=0x0) delete hTableDistRaw[i]; }
+                        for (int i=0; i<6; i++){ if (hTableDistMix[i]!=0x0) delete hTableDistMix[i]; }
+                        delete hMinvMixPPCopy;
+                        continue;
+                      }
+
+                      // ---- normalize unlike-sign mixed minv histo ----
+
+                      // Copy and Multiply like sign histograms
+                      TH1* hMinvPPCopy = static_cast<TH1*>(hTableMinv[1]->Clone());
+                      hMinvPPCopy->Multiply(hTableMinv[2]);
+                      nEntries = hMinvPPCopy->GetEntries();
+
+                      // Compute and fill square roots of like-signs histo
+                      for (int i = 0; i < nEntries ; i++){
+                        Double_t binContent = hMinvPPCopy->GetBinContent(i);
+                        Double_t binError   = hMinvPPCopy->GetBinError(i);
+                        if( binContent !=0 )                 hMinvPPCopy->SetBinContent(i,TMath::Sqrt(binContent));
+                        if( binContent !=0 && binError !=0 ) hMinvPPCopy->SetBinError(i,TMath::Sqrt(binContent)*(binError/binContent));
+                      }
+
+                      // Multiply by 2R
+                      hMinvPPCopy->Multiply(hRCoef);
+                      hMinvPPCopy->Scale(2.);
+
+                      Double_t intMix = 0;
+                      Double_t intRaw = 0;
+
+                      Int_t bmin  = hTableMinv[3]->GetXaxis()->FindBin(Mmin);
+                      Int_t bmax  = hTableMinv[3]->GetXaxis()->FindBin(Mmax);
+                      intMix      = hTableMinv[3]->Integral(bmin,bmax);
+
+                      Int_t bmin2 = hMinvPPCopy->GetXaxis()->FindBin(Mmin);
+                      Int_t bmax2 = hMinvPPCopy->GetXaxis()->FindBin(Mmax);
+                      intRaw      = hMinvPPCopy->Integral(bmin2,bmax2);
+
+                      if ( intMix !=0. && intRaw !=0. && intRaw/intMix !=0. ) {
+                        for (int i = 0; i < 6; ++i) {
+                          if ( i<3 ) hTableMinv[i+3]->Scale(intRaw/intMix); // Norm MinvMix histo
+                          hTableDistMix[i]->Scale(intRaw/intMix); // Norm pt and rapidy mix histo
+                        }
+                      } else {
+                        AliError(Form("\n Cannot compute integral from one of the histos since intRaw = %f and intMix = %f \n",intRaw,intMix));
+                        for (int i=0; i<6; i++){ if (hTableMinv[i]!=0x0) delete hTableMinv[i]; }
+                        for (int i=0; i<6; i++){ if (hTableDistRaw[i]!=0x0) delete hTableDistRaw[i]; }
+                        for (int i=0; i<6; i++){ if (hTableDistMix[i]!=0x0) delete hTableDistMix[i]; }
+                        delete hMinvMixPPCopy;
+                        delete hMinvPPCopy;
+                        continue;
+                      }
+
+                      // ---- save results in mergeable collection ----
+
+                      for (int i = 0; i < 6; ++i){
+                        o = 0x0;
+                        if ( hTableMinv[i] ) {
+                          o = fMergeableCollection->GetObject(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTableMinv[i]->GetName());
+                          AliDebug(1,Form("----idMix=MIX_%s_%s%s o=%p",seventType->String().Data(),strigger->String().Data(),idMix.Data(),o));
+
+                          if (o) fMergeableCollection->Remove(Form("/MIX/%s_%s%s/%s",seventType->String().Data(),strigger->String().Data(),idMix.Data(),hTableMinv[i]->GetName()));
+
+                          Bool_t adoptOK = fMergeableCollection->Adopt(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTableMinv[i]);
+                          if(! adoptOK) AliError(Form("Cannot adopt histo %s ",hTableMinv[i]->GetName()));
+                        }
+                        o = 0x0;
+                        if ( hTableDistRaw[i] ) {
+                          o = fMergeableCollection->GetObject(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTableDistRaw[i]->GetName());
+                          AliDebug(1,Form("----idMix=MIX_%s_%s%s o=%p",seventType->String().Data(),strigger->String().Data(),idMix.Data(),o));
 
-              AliDebug(1,Form("----fitting done corrected spectra = %p",spectraCorr));
+                          if (o) fMergeableCollection->Remove(Form("/MIX/%s_%s%s/%s",seventType->String().Data(),strigger->String().Data(),idMix.Data(),hTableDistRaw[i]->GetName()));
 
-              // save results in mergeable collection
-              o = 0x0;
-              if ( spectraCorr ) {
-              ++nfits;
+                          Bool_t adoptOK = fMergeableCollection->Adopt(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTableDistRaw[i]);
+                          if(! adoptOK) AliError(Form("Cannot adopt histo %s ",hTableDistRaw[i]->GetName()));
+                        }
+                        o = 0x0;
+                        if ( hTableDistMix[i] ) {
+                          o = fMergeableCollection->GetObject(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTableDistMix[i]->GetName());
+                          AliDebug(1,Form("----idMix=MIX_%s_%s%s o=%p",seventType->String().Data(),strigger->String().Data(),idMix.Data(),o));
 
-              o = fMergeableCollection->GetObject(id.Data(),spectraCorr->GetName());
-              AliDebug(1,Form("----nfits=%d id=%s o=%p",nfits,id.Data(),o));
+                          if (o) fMergeableCollection->Remove(Form("/MIX/%s_%s%s/%s",seventType->String().Data(),strigger->String().Data(),idMix.Data(),hTableDistMix[i]->GetName()));
 
-              if (o) {
-                AliWarning(Form("Replacing %s/%s",id.Data(),spectraCorr->GetName()));
-                fMergeableCollection->Remove(Form("%s/%s",id.Data(),spectraCorr->GetName()));
+                          Bool_t adoptOK = fMergeableCollection->Adopt(Form("/MIX/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTableDistMix[i]);
+                          if(! adoptOK) AliError(Form("Cannot adopt histo %s ",hTableDistMix[i]->GetName()));
+                        }
+                      }
+                    }
+                    delete binning;
+                    delete bins;
+                  }
+                }
               }
+            }
+          }
+        }
+      }
+    }
 
-              Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),spectraCorr);
+    Update();
 
-              if ( adoptOK ) std::cout << "+++Spectra " << spectraCorr->GetName() << " adopted" << std::endl;
-              else AliError(Form("Could not adopt spectra %s",spectraCorr->GetName()));
+    delete eventTypeArray;
+    delete eventTypeMixArray;
+    delete triggerMixArray;
+    delete pairCutArray;
+    delete centralityArray;
+    delete triggerArray;
 
-              StdoutToAliDebug(1,spectraCorr->Print(););
-              } else AliError("Error creating spectra");
+    return;
+}
+
+//_____________________________________________________________________________
+Int_t AliAnalysisMuMu::FitJpsi(const char* binType, const char* flavour, const TString fitMethod, const char* histoType )
+{
+/**
+ * @brief  Fit the J/psi and Psi(2S) pick.
+ * @details Fit process delegated to AliAnalysisMuMu::FitParticle().
+ *
+ * @param binType  [description]
+ * @param flavour  [description]
+ * @param fitMethod '' or 'mix'
+ * @return number of proceeded fits
+ */
+  TStopwatch timer;
+
+  if (!fMergeableCollection) {
+    AliError("No mergeable collection. Consider Upgrade()");
+    return 0;
+  } else {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                       FitJpsi                  " << endl;
+      cout <<      " ================================================================ " << endl;
+  }
 
+  const char* particle = "psi";
 
-              if (fitmPt) {
-                AliDebug(1,"----Fitting mean pt...");
+  Int_t nfits(0);
 
-                std::cout << "" << std::endl;
-                std::cout << "" << std::endl;
+  TObjArray* pairCutArray    = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+  TObjArray* centralityArray = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
+  TObjArray* binTypeArray    = TString(binType).Tokenize(",");
 
-                if ( !onlyCorrected ){
-                  std::cout << "++++++++++++ Fitting mean Pt for " << swhat->String().Data() << " " << "slices" << std::endl; //Uncomment
-                  if ( spectra ) {
-                      AliAnalysisMuMuSpectra* spectraMeanPt = FitParticle("psi",
-                                                                          trigger->String().Data(),
-                                                                          eventType->String().Data(),
-                                                                          pairCut->String().Data(),
-                                                                          centrality->String().Data(),
-                                                                          *binning,"mpt"/*,*spectra*/);
-                      AliDebug(1,Form("----fitting done spectra = %p",spectraMeanPt));
-                      o = 0x0;
+  TObjArray* TriggerArray(0x0);
+  if ( !fitMethod.Contains("mix") ) TriggerArray = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
+  else                              TriggerArray = Config()->GetListElements(Config()->MixTriggerKey(),IsSimulation());
 
-                      if ( spectraMeanPt ){
-                        ++nfits; //Review this
+  TObjArray* eventTypeArray(0x0);
+  if ( !fitMethod.Contains("mix") ) eventTypeArray = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
+  else                              eventTypeArray = Config()->GetListElements(Config()->EventSelectionMixKey(),IsSimulation());
 
-                        o = fMergeableCollection->GetObject(id.Data(),spectraMeanPt->GetName());
-                        AliDebug(1,Form("----nfits=%d id=%s o=%p",nfits,id.Data(),o));
+  TString refTrigger(Form("%s",Config()->First(Config()->RefMixTriggerKey(),IsSimulation()).Data()));
+  TString refEvent(Form("%s",Config()->First(Config()->RefMixEventSelectionKey(),IsSimulation()).Data()));
 
-                        if (o) {
-                          AliWarning(Form("Replacing %s/%s",id.Data(),spectraMeanPt->GetName()));
-                          fMergeableCollection->Remove(Form("%s/%s",id.Data(),spectraMeanPt->GetName()));
-                        }
+  TIter nextTrigger(TriggerArray);
+  TIter nextEventType(eventTypeArray);
+  TIter nextPairCut(pairCutArray);
+  TIter nextbinType(binTypeArray);
+  TIter nextCentrality(centralityArray);
 
-                        Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),spectraMeanPt);
+  TObjString* trigger;
+  TObjString* eventType;
+  TObjString* pairCut;
+  TObjString* sbinType;
+  TObjString* centrality;
 
-                        if ( adoptOK ) std::cout << "+++Spectra " << spectraMeanPt->GetName() << " adopted" << std::endl;
-                        else AliError(Form("Could not adopt spectra %s",spectraMeanPt->GetName()));
+  while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+  {
+    AliAnalysisMuMuBinning* binning(0x0);
 
-                      } else AliError("Error creating spectra");
+    if ( fBinning && sbinType->String().Length() > 0 ) {
+      binning = fBinning->Project(particle,sbinType->String().Data(),flavour);
+    } else {
+      binning = new AliAnalysisMuMuBinning;
+      binning->AddBin(particle,sbinType->String().Data());
+    }
 
-                  } else std::cout << "Mean pt fit failed: No inv mass spectra for " << swhat->String().Data() << " " << "slices" << std::endl; //Uncomment
-                }
-                std::cout << "++++++++++++ Fitting corrected mean Pt for" << " " << swhat->String().Data() << " " << "slices" << std::endl;
+    StdoutToAliDebug(1,std::cout << "++++++++++++ binning=" << sbinType->String().Data() << std::endl;);
 
-                if ( spectraCorr ){
+    std::cout << "" << std::endl;
+    std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;
+    std::cout << "+++++++++++++++++++ binning  = " << sbinType->String().Data() << std::endl;
+    std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++" << std::endl;
+    std::cout << "" << std::endl;
+    std::cout << "" << std::endl;
 
-                  AliAnalysisMuMuSpectra* spectraMeanPtCorr = FitParticle("psi",trigger->String().Data(),eventType->String().Data(),pairCut->String().Data(),centrality->String().Data(),*binning,"mpt"/*,*spectraCorr*/,kTRUE);
+    if (!binning) {
+      AliError("oups. binning is NULL");
+      continue;
+    }
 
-                  AliDebug(1,Form("----fitting done spectra = %p",spectraMeanPtCorr));
+    StdoutToAliDebug(1,binning->Print(););
 
-                  o = 0x0;
+    // Loop over all trigger
+    while ( ( trigger = static_cast<TObjString*>(nextTrigger())) ) {
+      AliDebug(1,Form("--TRIGGER %s",trigger->String().Data()));
+      nextEventType.Reset();
 
-                  if ( spectraMeanPtCorr ) {
-                    ++nfits; //Review this
+      // Loop over all evenType
+      while ( ( eventType = static_cast<TObjString*>(nextEventType())) ){
+        AliDebug(1,Form("----EVENTTYPE %s",eventType->String().Data()));
+        nextPairCut.Reset();
 
-                    o = fMergeableCollection->GetObject(id.Data(),spectraMeanPtCorr->GetName());
+        // Loop over all paircut
+        while ( ( pairCut = static_cast<TObjString*>(nextPairCut())) ) {
+          AliDebug(1,Form("------PAIRCUT %s",pairCut->String().Data()));
+          nextCentrality.Reset();
 
-                    AliDebug(1,Form("----nfits=%d id=%s o=%p",nfits,id.Data(),o));
+          // Loop over all centrality
+          while ( ( centrality = static_cast<TObjString*>(nextCentrality()) ) ) {
+            AliDebug(1,"------Fitting...");
 
-                    if (o) {
-                      AliWarning(Form("Replacing %s/%s",id.Data(),spectraMeanPtCorr->GetName()));
-                      fMergeableCollection->Remove(Form("%s/%s",id.Data(),spectraMeanPtCorr->GetName()));
-                    }
+            // Select stored path
+            TObject* o;
+            TString id = "";
+            if(fitMethod.Contains("mix"))
+              id = Form("/FitResults/%s_%s/%s/%s/%s/%s",refEvent.Data(),refTrigger.Data(),eventType->String().Data(),trigger->String().Data(),centrality->String().Data(),pairCut->String().Data());
+            else
+              id = Form("/FitResults/%s/%s/%s/%s",eventType->String().Data(),trigger->String().Data(),centrality->String().Data(),pairCut->String().Data());
+
+            printf("\n ----- id:%s -----\n",id.Data() );
+            AliAnalysisMuMuSpectra* spectra(0x0);
+            AliAnalysisMuMuSpectra* spectraCorr(0x0);
+
+            // ---- The main part. The fit method is called ----
+
+            AliDebug(1,"------Fitting spectra...");
+            spectra = FitParticle(particle,trigger->String().Data(),eventType->String().Data(),pairCut->String().Data(),centrality->String().Data(),*binning,kFALSE,&fitMethod,flavour,histoType);
+            AliDebug(1,Form("------fitting done spectra = %p",spectra));
+
+            AliDebug(1,"------Fitting corrected spectra...");
+            spectraCorr = FitParticle(particle,trigger->String().Data(),eventType->String().Data(),pairCut->String().Data(),centrality->String().Data(),*binning,kTRUE,&fitMethod,flavour,histoType);
+            AliDebug(1,Form("------fitting done corrected spectra = %p",spectraCorr));
+
+            // ----
+
+            // --- save results in mergeable collection ---
+            if ( spectra ) {
+              ++nfits;
+
+              o = fMergeableCollection->GetObject(id.Data(),spectra->GetName());
+              AliDebug(1,Form("----nfits=%d id=%s o=%p",nfits,id.Data(),o));
+
+              if (o) {
+                AliWarning(Form("Replacing %s/%s",id.Data(),spectra->GetName()));
+                fMergeableCollection->Remove(Form("%s/%s",id.Data(),spectra->GetName()));
+              }
+
+              Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),spectra);
+
+              if ( adoptOK ) std::cout << "+++Spectra " << spectra->GetName() << " adopted" << std::endl;
+              else AliError(Form("Could not adopt spectra %s",spectra->GetName()));
+
+              StdoutToAliDebug(1,spectra->Print(););
+            } else AliError("Error creating spectra");
 
-                    Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),spectraMeanPtCorr);
+            o = 0x0;
+            if ( spectraCorr ) {
+              ++nfits;
+
+              o = fMergeableCollection->GetObject(id.Data(),spectraCorr->GetName());
+              AliDebug(1,Form("----nfits=%d id=%s o=%p",nfits,id.Data(),o));
 
-                    if ( adoptOK ) std::cout << "+++Spectra " << spectraMeanPtCorr->GetName() << " adopted" << std::endl;
-                    else AliError(Form("Could not adopt spectra %s",spectraMeanPtCorr->GetName()));
-                    } else AliError("Error creating spectra");
-                } else std::cout << "Corrected mean pt fit failed: No corrected inv mass spectra for " << swhat->String().Data() << " " << "slices" << std::endl;
+              if (o) {
+                AliWarning(Form("Replacing %s/%s",id.Data(),spectraCorr->GetName()));
+                fMergeableCollection->Remove(Form("%s/%s",id.Data(),spectraCorr->GetName()));
               }
+
+              Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),spectraCorr);
+
+              if ( adoptOK ) std::cout << "+++Spectra " << spectraCorr->GetName() << " adopted" << std::endl;
+              else AliError(Form("Could not adopt spectra %s",spectraCorr->GetName()));
+
+              StdoutToAliDebug(1,spectraCorr->Print(););
             }
+            else AliError("Error creating spectra");
           }
         }
       }
     }
+  }
 
-    delete whatArray;
-    delete triggerArray;
-    delete eventTypeArray;
-    delete pairCutArray;
-    delete centralityArray;
-
-    StdoutToAliDebug(1,timer.Print(););
-
-    if (nfits)
-        {
-        Update();
-        //    ReOpen(fFilename,"UPDATE");
-        //    fMergeableCollection->Write("MC",TObjArray::kOverwrite);// | TObjArray::kSingleKey);
-        //    ReOpen(fFilename,"READ");
-        }
+  delete eventTypeArray;
+  delete TriggerArray;
+  delete pairCutArray;
+  delete centralityArray;
 
+  StdoutToAliDebug(1,timer.Print(););
 
-    return nfits;
+  if (nfits) Update();
 
+  return nfits;
 }
 
 //_____________________________________________________________________________
@@ -3196,6 +3123,17 @@ TGraph* AliAnalysisMuMu::PlotEventSelectionEvolution(const char* trigger1, const
                                                      Bool_t drawFills,
                                                      Bool_t asRejection) const
 {
+/**
+ * @brief Plot relative Event Selection Evolution
+ *
+ * @param trigger1    [description]
+ * @param event1      [description]
+ * @param trigger2    [description]
+ * @param event2      [description]
+ * @param drawFills   [description]
+ * @param asRejection [description]
+ * @return TGraph to be handle by the user
+ */
     if (!CC()) return 0x0;
 
     const std::set<int>& runnumbers = RunNumbers();
@@ -3315,27 +3253,28 @@ TGraph* AliAnalysisMuMu::PlotEventSelectionEvolution(const char* trigger1, const
 //_____________________________________________________________________________
 void AliAnalysisMuMu::ShowList(const char* title, const TString& list, const char separator) const
 {
-    /// Show a list of strings
-    TObjArray* parts = list.Tokenize(separator);
+  /**
+   * @brief convenient method to show a string as a list providing the separator.
+   */
+  TObjArray* parts = list.Tokenize(separator);
 
-    std::cout << title << " (" << parts->GetEntries() << ") : " << std::endl;
+  std::cout << title << " (" << parts->GetEntries() << ") : " << std::endl;
 
-    TIter next(parts);
-    TObjString* str;
+  TIter next(parts);
+  TObjString* str;
 
-    while ( ( str = static_cast<TObjString*>(next()) ) ){
-      std::cout << "    " << str->String().Data() << std::endl;
-    }
+  while ( ( str = static_cast<TObjString*>(next()) ) ) std::cout << "    " << str->String().Data() << std::endl;
 
-    if ( parts->GetEntries()==0) std::cout << endl;
+  if ( parts->GetEntries()==0) std::cout << endl;
 
-    delete parts;
+  delete parts;
 }
 
 //_____________________________________________________________________________
 void AliAnalysisMuMu::Print(Option_t* opt) const
 {
   /// printout
+
   std::cout << "Reading from file : " << fFilename.Data() << std::endl;
 
   TString copt(opt);
@@ -3353,8 +3292,7 @@ void AliAnalysisMuMu::Print(Option_t* opt) const
 
   std::cout << std::endl;
   Int_t i(0);
-  for ( std::set<int>::const_iterator it = RunNumbers().begin(); it != RunNumbers().end(); ++it )
-  {
+  for ( std::set<int>::const_iterator it = RunNumbers().begin(); it != RunNumbers().end(); ++it ){
     std::cout << (*it);
     if ( fCorrectionPerRun ) std::cout << Form("(%e)",fCorrectionPerRun->GetY()[i]);
     std::cout << ",";
@@ -3391,144 +3329,509 @@ void AliAnalysisMuMu::Print(Option_t* opt) const
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::PrintNofParticle(const char* particle, const char* what, const char* binType, Bool_t AccEffCorr) const
+void AliAnalysisMuMu::PrintNofWhat(const char* what, const char* spectraName, Bool_t mix, Bool_t AccEffCorr) const
 {
-    ///
-    /// Function to use after JPsi(). It loops over all combination of centrality/enventype/ trigger (etc.) and
-    /// print RAA on terminal accordingly. Fnorm / <T_AA> / other constants are written in AliAnalysisMuMuSpectraCapsulePbPb.
-    /// <binType> can be either "PT" or "Y" for the moment. This method reads sigma_pp value
-    /// from extern file who's line must be written as :
-    ///
-    /// intervalLow  intervalHight  sigma_pp  dsigma_pp  dsigma_pp_Correl  dsigma_pp_Uncorrel  AccEff  dAccEff;
-    ///
-    /// WATCH OUT FOR UNITS !! Function is written for cross-section in microbarn in externFile
-    ///
-    /// note : For now, this method is set for a single centrality bin 0-90
-    /// TODO : Make it work with different centrality, i.e  need to read also an extra externfile with value who are function of centrality (<T_AA> for instance...)
-    ///
-    ///
-
-
-    if (!OC() || !CC())
-        {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-        }
-    else
-        {
-        cout <<      " ================================================================ " << endl;
-        cout <<      "                       Number of "<< particle << endl;
-        cout <<      " ================================================================ " << endl;
-        }
+    /**
+    * @brief            Print number of particle. Method to use after FitJPsi() or any other fit process.
+    * @details          Delegate to AliAnalysisMuMuCapsulePbPb::PrintNumberOfWhat().
+    * @param particle   particle name
+    * @param what Quantity stored in the AliAnalysisMuMuSpectra
+    */
+
+
+    if (!OC() || !CC()){
+      AliError("No me rgeable/counter collection. Consider Upgrade()");
+      return ;
+    } else {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                       Number of "<< what << endl;
+      cout <<      " ================================================================ " << endl;
+    }
 
     // Get configuration settings
-    TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
-    TObjArray* triggerArray     = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
-    TObjArray* fitfunctionArray = Config()->GetListElements(Config()->FitTypeKey(),IsSimulation());// to add here an entry
-    TObjArray* pairCutArray     = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
-    TObjArray* centralityArray  = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
-    TObjArray* particleArray    = TString(particle).Tokenize(",");
-    TObjArray* binTypeArray     = TString(binType).Tokenize(",");
-    TObjArray* bins;
 
-    // Iterator for loops
-    TIter nextTrigger(triggerArray);
-    TIter nextEventType(eventTypeArray);
-    TIter nextPairCut(pairCutArray);
-    TIter nextParticle(particleArray);
-    TIter nextbinType(binTypeArray);
-    TIter nextCentrality(centralityArray);
+    TObjArray* pairCutArray    = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+    TObjArray* centralityArray = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
 
-    // Strings
-    TObjString* strigger;
-    TObjString* seventType;
-    TObjString* spairCut;
-    TObjString* sparticle;
-    TObjString* sbinType;
-    TObjString* scentrality;
+    TObjArray* triggerArray(0x0);
+    if (!mix) triggerArray = Config()->GetListElements(Config()->DimuonTriggerKey(),IsSimulation());
+    else                              triggerArray = Config()->GetListElements(Config()->MixTriggerKey(),IsSimulation());
 
-    //Loop on particle type
-    while ( ( sparticle = static_cast<TObjString*>(nextParticle()) ) )
-        {
-        AliDebug(1,Form("particle %s",sparticle->String().Data()));
-        nextEventType.Reset();
-        // Loop on each envenType (see MuMuConfig)
-        //==============================================================================
-        while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
-            {
-            AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
-            nextTrigger.Reset();
-            // Loop on each trigger (see MuMuConfig)
-            //==============================================================================
-            while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
-                {
-                AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
-                nextCentrality.Reset();
-                // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-                //==============================================================================
-                while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
-                    {
-                    AliDebug(1,Form("--CENTRALITY %s",scentrality->String().Data()));
-                    nextPairCut.Reset();
-                    // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-                    //==============================================================================
-                    while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
-                        {
-                        AliDebug(1,Form("---PAIRCUT %s",spairCut->String().Data()));
-                        nextbinType.Reset();
-                        // Loop on each type (pt or y)
-                        //==============================================================================
-                        while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
-                            {
-                            AliDebug(1,Form("----TYPE %s",sbinType->String().Data()));
+    TObjArray* eventTypeArray(0x0);
+    if (!mix) eventTypeArray = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
+    else                              eventTypeArray = Config()->GetListElements(Config()->EventSelectionMixKey(),IsSimulation());
+
+    TString refTrigger(Form("%s",Config()->First(Config()->RefMixTriggerKey(),IsSimulation()).Data()));
+    TString refEvent(Form("%s",Config()->First(Config()->RefMixEventSelectionKey(),IsSimulation()).Data()));
+
+    TObjArray* bins;
 
-                            //________Get spectra
-                            TString spectraPath= Form("/%s/%s/%s/%s/%s-%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),sparticle->String().Data(),sbinType->String().Data());
-                            if (AccEffCorr)spectraPath+="-AccEffCorr";
+    // Iterator for loops
+    TIter nextTrigger(triggerArray);
+    TIter nextEventType(eventTypeArray);
+    TIter nextPairCut(pairCutArray);
+    TIter nextCentrality(centralityArray);
 
-                            AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
+    // Strings
+    TObjString* strigger;
+    TObjString* seventType;
+    TObjString* spairCut;
+    TObjString* sparticle;
+    TObjString* scentrality;
 
-                            if(!spectra){
-                              AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
-                              continue;
-                            }
-                            //________
+    nextEventType.Reset();
+    // Loop on each envenType (see MuMuConfig)
+    //==============================================================================
+    while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+    {
+      AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
+      nextTrigger.Reset();
+      // Loop on each trigger (see MuMuConfig)
+      //==============================================================================
+      while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
+      {
+      AliDebug(1,Form("-TRIGGER %s",strigger->String().Data()));
+      nextCentrality.Reset();
+      // Loop on each centrality (not the ones in MuMuConfig but the ones set)
+      //==============================================================================
+      while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
+      {
+        AliDebug(1,Form("--CENTRALITY %s",scentrality->String().Data()));
+        nextPairCut.Reset();
+        // Loop on each paircut (not the ones in MuMuConfig but the ones set)
+        //==============================================================================
+        while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
+        {
+          AliDebug(1,Form("---PAIRCUT %s",spairCut->String().Data()));
 
-                            // Create pointer on fitted spectra
-                            AliAnalysisMuMuSpectraCapsulePbPb * capsule = new AliAnalysisMuMuSpectraCapsulePbPb(spectra,spectraPath,"","");
+          //________Get spectra
+          TString spectraPath = "";
+          if(mix)
+            spectraPath = Form("/FitResults/%s_%s/%s/%s/%s/%s/%s",refEvent.Data(),refTrigger.Data(),seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),spectraName);
+          else
+            spectraPath = Form("/FitResults/%s/%s/%s/%s/%s",seventType->String().Data(),strigger->String().Data(),scentrality->String().Data(),spairCut->String().Data(),spectraName);
+          if (AccEffCorr)spectraPath+="-AccEffCorr";
 
-                            if(!capsule){
-                              AliError("Could not find spetra !");
-                              continue;
-                            }
+          AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
 
-                            AliDebug(1,Form("Spectra = %p",capsule));
+          if(!spectra){
+            AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
+            continue;
+          }
+          //________
 
-                            capsule->PrintNofWhat(what);
-                            delete capsule;
-                            }
-                        }
-                    }
-                }
-            }
+          // Create pointer on fitted spectra
+          AliAnalysisMuMuSpectraCapsulePbPb * capsule = new AliAnalysisMuMuSpectraCapsulePbPb(spectra,spectraPath,"","");
+          AliDebug(1,Form("capsule = %p",capsule));
+          if(!capsule){
+            AliError("Could not find spetra !");
+            continue;
+          }
+
+          capsule->PrintNofWhat(what);
+          delete capsule;
         }
+      }
+    }
+  }
 
-    delete eventTypeArray ;
-    delete triggerArray ;
-    delete fitfunctionArray ;
-    delete pairCutArray ;
-    delete centralityArray ;
-    delete particleArray ;
-    delete binTypeArray ;
 
-    return ;
+  delete eventTypeArray ;
+  delete triggerArray ;
+  delete pairCutArray ;
+  delete centralityArray ;
+
+  return ;
 
 }
 
+// //_____________________________________________________________________________
+// void PrintControlPlotForMixing(const char* particle, const char* what, const char* binType, Bool_t AccEffCorr) const
+// {
+
+//    if(!OC())
+//     {
+//         AliError("No mergeable. Consider Upgrade()");
+//         return;
+//     }
+//     else
+//     {
+//         cout <<      " ================================================================ " << endl;
+//         cout <<      "                       PrintControlPlotForMixing                  " << endl;
+//         cout <<      " ================================================================ " << endl;
+//     }
+
+//     // Get configuration settings
+//     TObjArray* eventTypeArray    = Config()->GetListElements(Config()->RefMixEventSelectionKey(),IsSimulation());
+//     TObjArray* triggerArray      = Config()->GetListElements(Config()->RefMixTriggerKey(),IsSimulation());
+//     TObjArray* eventTypeMixArray = Config()->GetListElements(Config()->EventSelectionMixKey(),IsSimulation());
+//     TObjArray* triggerMixArray   = Config()->GetListElements(Config()->MixTriggerKey(),IsSimulation());
+//     TObjArray* pairCutArray      = Config()->GetListElements(Config()->PairSelectionKey(),IsSimulation());
+//     TObjArray* centralityArray   = Config()->GetListElements(Config()->CentralitySelectionKey(),IsSimulation());
+//     TObjArray* binTypeArray      = TString(binType).Tokenize(",");
+
+//     TObjArray* bins;
+
+//     // Iterator for loops
+//     TIter nextTrigger(triggerArray);
+//     TIter nextTriggerMix(triggerMixArray);
+//     TIter nextEventType(eventTypeArray);
+//     TIter nextEventTypeMix(eventTypeMixArray);
+//     TIter nextPairCut(pairCutArray);
+//     TIter nextbinType(binTypeArray);
+//     TIter nextCentrality(centralityArray);
+
+//     // Strings
+//     TObjString* strigger;
+//     TObjString* seventType;
+//     TObjString* spairCut;
+//     TObjString* sbinType;
+//     TObjString* scentrality;
+//     TObjString* sTriggerMix;
+//     TObjString* seventTypeMix;
+
+//     // Get Binning
+//     AliAnalysisMuMuBinning* binning(0x0);
+
+//     // Loop on each envenTypeMix (see MuMuConfig)
+//     while ( ( seventTypeMix = static_cast<TObjString*>(nextEventTypeMix())) ){
+//       AliDebug(1,Form("EVENTTYPEMIX %s",seventTypeMix->String().Data()));
+//       nextTriggerMix.Reset();
+
+//       // Loop on each triggerMix (see MuMuConfig)
+//       while ( ( sTriggerMix = static_cast<TObjString*>(nextTriggerMix())) ){
+//         AliDebug(1,Form("-TRIGGERMIX %s",sTriggerMix->String().Data()));
+//         nextEventType.Reset();
+
+//         // Loop on each envenType (see MuMuConfig)
+//         while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+//         {
+//           AliDebug(1,Form("--REFEVENTTYPE %s",seventType->String().Data()));
+//           nextTrigger.Reset();
+
+//           // Loop on each trigger (see MuMuConfig)
+//           while ( ( strigger = static_cast<TObjString*>(nextTrigger())) )
+//           {
+//             AliDebug(1,Form("---REFTRIGGER %s",strigger->String().Data()));
+//             nextPairCut.Reset();
+
+//             // Loop on each paircut (see MuMuConfig)
+//             while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
+//             {
+//               AliDebug(1,Form("----PAIRCUT %s",spairCut->String().Data()));
+//               nextbinType.Reset();
+
+//               // Loop on each type (see MuMuConfig)
+//               while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+//               {
+//                 AliDebug(1,Form("-----TYPE %s",sbinType->String().Data()));
+//                 nextCentrality.Reset();
+
+//                 // Loop on each centrality (see MuMuConfig)
+//                 while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
+//                 {
+//                   AliDebug(1,Form("------CENTRALITY %s",scentrality->String().Data()));
+//                   nextbinType.Reset();
+
+//                   // Loop on each centrality (see MuMuConfig)
+//                   while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+//                   {
+//                     AliDebug(1,Form("-------BIN %s",sbinType->String().Data()));
+
+//                     // Pointers
+//                     TH1    * hMinvPM    =0x0;
+//                     TH1    * hMinvPP    =0x0;
+//                     TH1    * hMinvMM    =0x0;
+//                     TH1    * hMinvMixPM =0x0;
+//                     TH1    * hMinvMixPP =0x0;
+//                     TH1    * hMinvMixMM =0x0;
+//                     TH1    * hminvTable[6] = {hMinvPM,hMinvPP,hMinvMM,hMinvMixPM,hMinvMixPP,hMinvMixMM}
+
+//                     TH1    * hpTPM      =0x0;
+//                     TH1    * hpTPP      =0x0;
+//                     TH1    * hpTMM      =0x0;
+//                     TH1    * hpTMixPM   =0x0;
+//                     TH1    * hpTMixPP   =0x0;
+//                     TH1    * hpTMixMM   =0x0;
+//                     TH1    * hptTable[6] = {hpTPM,hpTPP,hpTMM,hpTMixPM,hpTMixPP,hpTMixMM}
+
+
+//                     TH1    * hyP        =0x0;
+//                     TH1    * hyPP       =0x0;
+//                     TH1    * hyMM       =0x0;
+//                     TH1    * hyMixP     =0x0;
+//                     TH1    * hyMixPP    =0x0;
+//                     TH1    * hyMixMM    =0x0;
+//                     TH1    * hyTable[6] = {hyPM,hyPP,hyMM,hyMixPM,hyMixPP,hyMixMM}
+
+//                     TObject* o          =0x0;
+
+//                     // Get binning
+//                     if ( fBinning && sbinType->String().Length() > 0 ) binning = fBinning->Project(particle,sbinType->String().Data(),flavour);
+//                     else  {
+//                       binning = new AliAnalysisMuMuBinning;
+//                       binning->AddBin(particle,sbinType->String().Data());
+//                     }
+//                     if (!binning) {
+//                       AliError("oups. binning is NULL");
+//                       continue;
+//                     }
+
+//                     // Create array
+//                     TObjArray* bins = binning->CreateBinObjArray(particle);
+//                     if (!bins){
+//                       AliError(Form("Did not get any bin for particle %s",particle));
+//                       continue;
+//                     }
+//                     // Create ID for the fit which will be used to name results
+//                     TString idMix(Form("/%s/%s/%s/%s",seventTypeMix->String().Data(),sTriggerMix->String().Data(),scentrality->String().Data(),spairCut->String().Data()));
+//                     AliDebug(1,Form("idMix = %s\n",idMix.Data() ));
+
+//                     TString id(Form("/MIX/Histo/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()));
+//                     AliDebug(1,Form("id = %s\n",id.Data() ));
+
+//                     // The binning pointer, which point at Pt binning, Y binning etc.
+//                     AliAnalysisMuMuBinning::Range* bin;
+//                     TIter next(bins);
+
+//                     // Add some element to ID
+//                     TString spectraName(binning->GetName());
+//                     if ( strcmp(flavour,"") != 0 ){
+//                       spectraName += "-";
+//                       spectraName += flavour;
+//                     }
+//                     if ( corrected ){
+//                       spectraName += "-";
+//                       spectraName += "AccEffCorr";
+//                     }
+
+//                     //MAIN PART : Loop on every binning range
+//                     while ( ( bin = static_cast<AliAnalysisMuMuBinning::Range*>(next())) )
+//                     {
+
+//                       // Choose correct histo type with <spectraType> and set it in <hname>
+//                       TString hnameMixPM = corrected ? Form("MinvUS+%sMix_AccEffCorr",bin->AsString().Data())           :  Form("MinvUS+%sMix",bin->AsString().Data());
+//                       TString hnameMixPP = corrected ? Form("MinvUS+%sPlusPlusMix_AccEffCorr",bin->AsString().Data())   :  Form("MinvUS+%sPlusPlusMix",bin->AsString().Data());
+//                       TString hnameMixMM = corrected ? Form("MinvUS+%sMinusMinusMix_AccEffCorr",bin->AsString().Data()) :  Form("MinvUS+%sMinusMinusMix",bin->AsString().Data());
+
+//                       TString hnamePM    = corrected ? Form("MinvUS+%s_AccEffCorr",bin->AsString().Data())              :  Form("MinvUS+%s",bin->AsString().Data());
+//                       TString hnamePP    = corrected ? Form("MinvUS+%sPlusPlus_AccEffCorr",bin->AsString().Data())      :  Form("MinvUS+%sPlusPlus",bin->AsString().Data());
+//                       TString hnameMM    = corrected ? Form("MinvUS+%sMinusMinus_AccEffCorr",bin->AsString().Data())    :  Form("MinvUS+%sMinusMinus",bin->AsString().Data());
+
+//                       TString hnamePtPM    = corrected ? Form("Pt_AccEffCorr")      :  Form("Pt");
+//                       TString hnameMixPtPM = corrected ? Form("PtMix_AccEffCorr")   :  Form("PtMix");
+//                       TString hnamePtPP    = corrected ? Form("PtPP_AccEffCorr")    :  Form("PtPP");
+//                       TString hnameMixPtPP = corrected ? Form("PtMixPP_AccEffCorr") :  Form("PtMixPP");
+//                       TString hnamePtMM    = corrected ? Form("PtMM_AccEffCorr")    :  Form("PtMM");
+//                       TString hnameMixPtMM = corrected ? Form("PtMixMM_AccEffCorr") :  Form("PtMixMM");
+
+//                       TString hnameYPM    = corrected ? Form("Y_AccEffCorr")      :  Form("Y");
+//                       TString hnameMixYPM = corrected ? Form("YMix_AccEffCorr")   :  Form("YMix");
+//                       TString hnameYPP    = corrected ? Form("YPP_AccEffCorr")    :  Form("YPP");
+//                       TString hnameMixYPP = corrected ? Form("YMixPP_AccEffCorr") :  Form("YMixPP");
+//                       TString hnameYMM    = corrected ? Form("YMM_AccEffCorr")    :  Form("YMM");
+//                       TString hnameMixYMM = corrected ? Form("YMixMM_AccEffCorr") :  Form("YMixMM");
+
+//                       // Pointer to the histo from histo collection (Yes it is discusting )
+//                       if ( OC()->Histo(idMix.Data(),hnameMixPM.Data()) ) hMinvMixPM = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixPM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixPM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixPP.Data()) ) hMinvMixPP = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixPP.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixPP.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixMM.Data()) ) hMinvMixMM = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixMM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixMM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnamePM.Data()) )    hMinvPM    = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnamePM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnamePM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnamePP.Data()) )    hMinvPP    = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnamePP.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnamePP.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnameMM.Data()) )    hMinvMM    = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnameMM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnameMM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnamePtPM.Data()) )    hpT      = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnamePtPM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnamePtPM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnamePtPP.Data()) )    hpTPP    = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnamePtPP.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnamePtPP.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnamePtMM.Data()) )    hpTMM    = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnamePtMM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnamePtMM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixPtPM.Data()) ) hpTMix   = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixPtPM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixPtPM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixPtPP.Data()) ) hpTMixPP = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixPtPP.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixPtPP.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixPtMM.Data()) ) hpTMixMM = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixPtMM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixPtMM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnameYPM.Data()) )    hy        = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnameYPM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnameYPM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnameYPP.Data()) )    hyPP      = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnameYPP.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnameYPP.Data())); continue ; }
+
+//                       if ( OC()->Histo(idraw.Data(),hnameYMM.Data()) )    hyMM      = static_cast<TH1*>(OC()->Histo(idraw.Data(),hnameYMM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idraw.Data(),hnameYMM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixYPM.Data()) ) hyMix     = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixYPM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixYPM.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixYPP.Data()) ) hyMixPP   = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixYPP.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixYPP.Data())); continue ; }
+
+//                       if ( OC()->Histo(idMix.Data(),hnameMixYMM.Data()) ) hyMixMM   = static_cast<TH1*>(OC()->Histo(idMix.Data(),hnameMixYMM.Data())->Clone());
+//                       else { AliError(Form("Could not find histo %s/%s",idMix.Data(),hnameMixYMM.Data())); continue ; }
+
+
+//                       // ---- First part : compute the R Factor ----
+//                       hRCoef = static_cast<TH1*>(hMinvMixPM->Clone());
+//                       if(!hRCoef){
+//                         AliError(Form("cannot clone %s",hnameMixPM.Data()));
+//                         continue;
+//                       }
+//                       hRCoef->Reset();
+//                       hRCoef->SetName("RCoefficient");
+//                       hRCoef->SetTitle("R Coefficient versus M");
+//                       hRCoef->GetYaxis()->SetTitle("R");
+//                       hRCoef->GetYaxis()->SetTitle("R");
+
+//                       // Fill hRCoef for entries bellow 5 from hMinvMixPM
+//                       Int_t nEntries = hMinvMixPM->GetEntries();
+//                       for (int i = 0; i <  nEntries ; i++){
+//                         Double_t binContent = hMinvMixPM->GetBinContent(i);
+//                         Double_t binError   = hMinvMixPM->GetBinError(i);
+//                         if( binContent !=0 ) hRCoef->SetBinContent(i,binContent);
+//                         if( binContent !=0 && binError !=0 ) hRCoef->SetBinError(i,binError);
+//                       }
+
+//                       // Copy and Multiply like sign histograms
+//                       TH1* hMinvMixPPCopy = static_cast<TH1*>(hMinvMixPP->Clone());
+//                       hMinvMixPPCopy->Multiply(hMinvMixMM);
+
+//                       // Compute and fill square roots of like-signs histo
+//                       nEntries = hMinvMixPPCopy->GetEntries();
+//                       for (int j = 0; j < nEntries ; j++){
+//                         Double_t binContent = hMinvMixPPCopy->GetBinContent(j);
+//                         Double_t binError   = hMinvMixPPCopy->GetBinError(j);
+//                         if( binContent !=0 ) hMinvMixPPCopy->SetBinContent(j,TMath::Sqrt(binContent));
+//                         if( binContent !=0 && binError !=0 ) hMinvMixPPCopy->SetBinError(j,TMath::Sqrt(binContent)*(binError/binContent));
+//                       }
+
+//                       // Final R Factor
+//                       hRCoef->Divide(hMinvMixPPCopy);
+//                       hRCoef->Scale(0.5);
+
+//                       // save results in mergeable collection
+//                       if ( hRCoef ) {
+//                         o = fMergeableCollection->GetObject(Form("/MIX/Histo/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hRCoef->GetName());
+//                         AliDebug(1,Form("----idMix=MIX_%s_%s%s o=%p",seventType->String().Data(),strigger->String().Data(),idMix.Data(),o));
+
+//                         if (o) {
+//                           fMergeableCollection->Remove(Form("/MIX/Histo/%s_%s%s/%s",seventType->String().Data(),strigger->String().Data(),idMix.Data(),hRCoef->GetName()));
+//                         }
+
+//                         Bool_t adoptOK = fMergeableCollection->Adopt(Form("/MIX/Histo/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hRCoef);
+
+//                         if ( adoptOK ) std::cout << "+++histo " << hRCoef->GetName() << " adopted " << std::endl;
+//                         else AliError(Form("Could not adopt histo %s",hRCoef->GetName()));
+//                       }
+
+//                       // ---- normalize unlike-sign mixed minv histo ----
+
+//                       // Change Names
+//                       TString hName(hMinvMixPM->GetName());
+//                       TString hTitle(hMinvMixPM->GetTitle());
+//                       hMinvMixPM->SetName(Form("%s_normalized",hName.Data()));
+//                       hMinvMixPM->SetTitle(Form("%s Normalized",hTitle.Data()));
+
+//                       // Copy and Multiply like sign histograms
+//                       TH1* hMinvPPCopy = static_cast<TH1*>(hMinvPP->Clone());
+//                       hMinvPPCopy->Multiply(hMinvMM);
+//                       nEntries = hMinvPPCopy->GetEntries();
+
+//                       // Compute and fill square roots of like-signs histo
+//                       for (int i = 0; i < nEntries ; i++){
+//                         Double_t binContent = hMinvPPCopy->GetBinContent(i);
+//                         Double_t binError   = hMinvPPCopy->GetBinError(i);
+//                         if( binContent !=0 )                 hMinvPPCopy->SetBinContent(i,TMath::Sqrt(binContent));
+//                         if( binContent !=0 && binError !=0 ) hMinvPPCopy->SetBinError(i,TMath::Sqrt(binContent)*(binError/binContent));
+//                       }
+
+//                       // Multiply by 2R
+//                       hMinvPPCopy->Multiply(hRCoef);
+//                       hMinvPPCopy->Scale(2.);
+
+//                       Double_t intMix = 0;;
+//                       Double_t intRaw = 0;;
+
+//                       // Get integral values
+//                       Int_t bmin  = hMinvMixPM->GetXaxis()->FindBin(2.);
+//                       Int_t bmax  = hMinvMixPM->GetXaxis()->FindBin(8.);
+//                       intMix      = hMinvMixPM->Integral(bmin,bmax);
+
+//                       Int_t bmin2 = hMinvPPCopy->GetXaxis()->FindBin(2.);
+//                       Int_t bmax2 = hMinvPPCopy->GetXaxis()->FindBin(8.);
+//                       intRaw      = hMinvPPCopy->Integral(bmin2,bmax2);
+
+//                       TH1* hTable[9] = {hMinvMixPM,hMinvMixPP,hMinvMixMM,hpTMix,hpTMixPP,hpTMixMM,hyMix,hyMixPP,hyMixMM};
+
+//                       if ( intMix !=0. && intRaw !=0. && intRaw/intMix !=0. ) {
+//                         for (int i = 0; i < 9; ++i) hTable[i]->Scale(intRaw/intMix);
+//                       } else {
+//                         AliError("\n Cannot compute integral from one of the histos \n");
+//                         continue;
+//                       }
+
+//                       // save results in mergeable collection
+//                       for (int i = 0; i < 9; ++i){
+//                         o = 0x0;
+//                         if ( hTable[i] ) {
+
+//                           o = fMergeableCollection->GetObject(Form("/MIX/Histo/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTable[i]->GetName());
+//                           AliDebug(1,Form("----idMix=MIX_%s_%s%s o=%p",seventType->String().Data(),strigger->String().Data(),idMix.Data(),o));
+
+//                           if (o) fMergeableCollection->Remove(Form("/MIX/Histo/%s_%s%s/%s",seventType->String().Data(),strigger->String().Data(),idMix.Data(),hTable[i]->GetName()));
+
+//                           Bool_t adoptOK = fMergeableCollection->Adopt(Form("/MIX/Histo/%s_%s%s",seventType->String().Data(),strigger->String().Data(),idMix.Data()),hTable[i]);
+
+//                           if ( adoptOK ) std::cout << "+++histo " << hTable[i]->GetName() << " adopted " << std::endl;
+//                           else AliError(Form("Could not adopt histo %s",hTable[i]->GetName()));
+//                         }
+//                       }
+//                     }
+//                   }
+//                 }
+//               }
+//             }
+//           }
+//         }
+//       }
+//     }
+
+//     Update();
+
+//     delete eventTypeArray;
+//     delete eventTypeMixArray;
+//     delete triggerMixArray;
+//     delete pairCutArray;
+//     delete centralityArray;
+//     delete triggerArray;
+
+//     return;
+
+// }
+
 //_____________________________________________________________________________
 TFile* AliAnalysisMuMu::ReOpen(const char* filename, const char* mode) const
 {
-  /// Tries to reopen the file with a new mode
+  /**
+   * @brief Tries to reopen the file with a new mode
+   */
 
   TFile* f = static_cast<TFile*>(gROOT->GetListOfFiles()->FindObject(filename));
   if (f)delete f;
@@ -3546,7 +3849,13 @@ TFile* AliAnalysisMuMu::ReOpen(const char* filename, const char* mode) const
 //_____________________________________________________________________________
 Bool_t AliAnalysisMuMu::SetCorrectionPerRun(const TGraph& corr, const char* formula)
 {
-    /// Sets the graph used to correct values per run
+/**
+ * @brief Sets the graph used to correct values per run
+ *
+ * @param corr    [description]
+ * @param formula [description]
+ *
+ */
     delete fCorrectionPerRun;
     fCorrectionPerRun=0x0;
 
@@ -3554,39 +3863,30 @@ Bool_t AliAnalysisMuMu::SetCorrectionPerRun(const TGraph& corr, const char* form
 
     Int_t i(0);
 
-    for ( std::set<int>::const_iterator it = RunNumbers().begin(); it != RunNumbers().end(); ++it )
-        {
-        Int_t corrRun = TMath::Nint(corr.GetX()[i]);
-        if (corrRun != *it)
-            {
-            AliError(Form("%d-th run mistmatch %d vs %d",i,corrRun,*it));
+    for ( std::set<int>::const_iterator it = RunNumbers().begin(); it != RunNumbers().end(); ++it ){
+      Int_t corrRun = TMath::Nint(corr.GetX()[i]);
 
-            return kFALSE;
-            }
-        ++i;
-        }
+      if (corrRun != *it){
+        AliError(Form("%d-th run mistmatch %d vs %d",i,corrRun,*it));
+        return kFALSE;
+      }
+      ++i;
+    }
 
     fCorrectionPerRun = new TGraphErrors(corr.GetN());
 
     TFormula* tformula(0x0);
-    if ( strlen(formula) > 0 )
-        {
-        tformula = new TFormula("SetCorrectionPerRunFormula",formula);
-        }
+    if ( strlen(formula) > 0 ) tformula = new TFormula("SetCorrectionPerRunFormula",formula);
 
     i = 0;
 
-    for ( std::set<int>::const_iterator it = RunNumbers().begin(); it != RunNumbers().end(); ++it )
-        {
-        Double_t y = corr.GetY()[i];
+    for ( std::set<int>::const_iterator it = RunNumbers().begin(); it != RunNumbers().end(); ++it ){
+      Double_t y = corr.GetY()[i];
 
-        if ( tformula )
-            {
-            y = tformula->Eval(y);
-            }
-        fCorrectionPerRun->SetPoint(i,corr.GetX()[i],y);
-        ++i;
-        }
+      if ( tformula ) y = tformula->Eval(y);
+      fCorrectionPerRun->SetPoint(i,corr.GetX()[i],y);
+      ++i;
+    }
 
     delete formula;
 
@@ -3594,25 +3894,11 @@ Bool_t AliAnalysisMuMu::SetCorrectionPerRun(const TGraph& corr, const char* form
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::SetNofInputParticles(AliAnalysisMuMuJpsiResult& r)
-{
-    /// Set the "NofInput" variable(s) of one result, equivalent to compute AccxEff
-
-    TString hname(Form("MinvUS+%s",r.Bin().AsString().Data()));
-    TString EventSelectionKey =Config()->First(Config()->EventSelectionKey(),IsSimulation());
-    TString Centrality        =Config()->First(Config()->CentralitySelectionKey(),IsSimulation());
-    TString DimuonTrigger     =Config()->First(Config()->DimuonTriggerKey(),IsSimulation());
-
-    TH1* hinput = fMergeableCollection->Histo(Form("/%s/%s/%s/%s/INYRANGE",AliAnalysisMuMuBase::MCInputPrefix(),EventSelectionKey.Data(),DimuonTrigger.Data(),Centrality.Data()),hname.Data());
-
-    if (!hinput)AliError(Form("Got a simulation file where I did not find histogram /%s/%s/%s/%s/INYRANGE/%s",AliAnalysisMuMuBase::MCInputPrefix(),EventSelectionKey.Data(),DimuonTrigger.Data(),Centrality.Data(),hname.Data()));
-    else r.SetNofInputParticles(*hinput);
-}
-
-//_____________________________________________________________________________
 AliAnalysisMuMuSpectra* AliAnalysisMuMu::SPECTRA(const char* fullpath) const
 {
-  /// Shortcut method to get to a spectra
+  /**
+   * @brief Shortcut method to get to a spectra
+   */
   if (!OC()) return 0x0;
 
   return static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(fullpath));
@@ -3621,6 +3907,13 @@ AliAnalysisMuMuSpectra* AliAnalysisMuMu::SPECTRA(const char* fullpath) const
 //_____________________________________________________________________________
 void AliAnalysisMuMu::SelectRunByTrigger(const char* triggerList)
 {
+  /**
+  *   [AliAnalysisMuMu::SelectRunByTrigger description]
+  *   @brief   Old function with a lot of hard coded things, not sure what it does... Maybe outdated
+  *   @details [long   description]
+  *
+  *   @param   triggerList [description]
+  */
   if (!fMergeableCollection || !fCounterCollection) return;
 
   TObjArray* runs = fCounterCollection->GetKeyWords("run").Tokenize(",");
@@ -3648,10 +3941,7 @@ void AliAnalysisMuMu::SelectRunByTrigger(const char* triggerList)
 
       while ( ( strigger = static_cast<TObjString*>(nextTrigger()) ) )
       {
-        if ( !striggerList.Contains(strigger->String().Data()) )
-            {
-            continue;
-            }
+        if ( !striggerList.Contains(strigger->String().Data()) ) continue;
 
         ULong64_t n = TMath::Nint(fCounterCollection->GetSum(Form("trigger:%s/event:%s/run:%d",
                                                                   strigger->String().Data(),"PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00",srun->String().Atoi())));
@@ -3676,9 +3966,14 @@ void AliAnalysisMuMu::TriggerCountCoverage(const char* triggerList,
                                            Bool_t compact,
                                            Bool_t orderByTriggerCount)
 {
-  // Give the fraction of triggers (in triggerList) relative
-  // to what is expected in the scalers
-
+/**
+ *   [AliAnalysisMuMu::TriggerCountCoverage description]
+ *   @brief   Give the fraction of triggers (in triggerList) relative to what is expected in the scalers
+ *
+ *   @param   triggerList         [description]
+ *   @param   compact             [description]
+ *   @param   orderByTriggerCount [description]
+ */
   TGrid::Connect("alien://"); // to insure the "Trying to connect to server... message does not pollute our output later on...
 
   AliLog::EType_t oldLevel = static_cast<AliLog::EType_t>(AliLog::GetGlobalLogLevel());
@@ -3707,10 +4002,7 @@ void AliAnalysisMuMu::TriggerCountCoverage(const char* triggerList,
   {
     msg.Form("RUN %09d ",srun->String().Atoi());
 
-    if (!compact)
-    {
-        msg += "\n";
-    }
+    if (!compact) msg += "\n";
 
     ULong64_t nmax(0);
 
@@ -3718,10 +4010,7 @@ void AliAnalysisMuMu::TriggerCountCoverage(const char* triggerList,
 
     while ( ( strigger = static_cast<TObjString*>(nextTrigger()) ) )
     {
-      if ( !striggerList.Contains(strigger->String().Data()) )
-      {
-        continue;
-      }
+      if ( !striggerList.Contains(strigger->String().Data()) ) continue;
 
       ULong64_t n = TMath::Nint(fCounterCollection->GetSum(Form("trigger:%s/event:%s/run:%d",
                                                             strigger->String().Data(),"ALL",srun->String().Atoi())));
@@ -3741,21 +4030,12 @@ void AliAnalysisMuMu::TriggerCountCoverage(const char* triggerList,
         msg += TString::Format("fraction %5.1f %%",n*100.0/expected);
       }
 
-      if (!compact)
-      {
-        msg += "\n";
-      }
+      if (!compact) msg += "\n";
     }
-    if (nmax>0)
-    {
-      if (!orderByTriggerCount)
-      {
-        std::cout << msg.Data() << std::endl;
-      }
-      else
-      {
-        messages.insert(std::make_pair(nmax,static_cast<std::string>(msg.Data())));
-      }
+
+    if (nmax>0){
+      if (!orderByTriggerCount) std::cout << msg.Data() << std::endl;
+      else messages.insert(std::make_pair(nmax,static_cast<std::string>(msg.Data())));
     }
   }
 
@@ -3764,8 +4044,7 @@ void AliAnalysisMuMu::TriggerCountCoverage(const char* triggerList,
   ULong64_t current(0);
   Int_t n(0);
 
-  for ( it = messages.rbegin(); it != messages.rend(); ++it )
-  {
+  for ( it = messages.rbegin(); it != messages.rend(); ++it ){
     ++n;
     current += it->first;
     Double_t percent = ( total > 0.0 ? current*100.0/total : 0.0);
@@ -3776,13 +4055,12 @@ void AliAnalysisMuMu::TriggerCountCoverage(const char* triggerList,
                     total,totalExpected,totalExpected ? total*100.0/totalExpected : 0.0) << std::endl;
 
 
-    for ( it = messages.rbegin(); it != messages.rend(); ++it )
-        {
-        ++n;
-        current += it->first;
-        Double_t percent = ( total > 0.0 ? current*100.0/total : 0.0);
-        std::cout << Form("%10lld",it->first) << " " << it->second << " percentage of total = " << Form("%7.2f %% %3d",percent,n ) << std::endl;
-        }
+    for ( it = messages.rbegin(); it != messages.rend(); ++it ) {
+      ++n;
+      current += it->first;
+      Double_t percent = ( total > 0.0 ? current*100.0/total : 0.0);
+      std::cout << Form("%10lld",it->first) << " " << it->second << " percentage of total = " << Form("%7.2f %% %3d",percent,n ) << std::endl;
+    }
 
     std::cout << Form("--- TOTAL %lld expected %lld fraction %5.1f %%",
                       total,totalExpected,totalExpected ? total*100.0/totalExpected : 0.0) << std::endl;
@@ -3811,12 +4089,8 @@ void AliAnalysisMuMu::Update()
 
   ReOpen(fFilename,"UPDATE");
 
-  if (OC())
-  {
-    if (fDirectory.Length())
-    {
-      gDirectory->cd(fDirectory.Data());
-    }
+  if (OC()){
+    if (fDirectory.Length()) gDirectory->cd(fDirectory.Data());
     OC()->Write("OC",TObject::kSingleKey|TObject::kOverwrite);
   }
 
@@ -3841,79 +4115,70 @@ Bool_t AliAnalysisMuMu::Upgrade()
     /// - from single list to one key per object, if needed
     /// - from histogramCollection to mergeableCollection, if needed
 
-
     AliWarning("Out of date method");
 
     TFile* f = ReOpen(fFilename,"UPDATE");
 
     TList* list = static_cast<TList*>(f->Get("chist"));
 
-    if (list)
-        {
-        // really old file where everything was in a single list
-
-        AliHistogramCollection* hc = static_cast<AliHistogramCollection*>(list->At(0));
-        AliCounterCollection* cc = static_cast<AliCounterCollection*>(list->At(1));
-
-        AliMergeableCollection* mc = hc->Convert();
+    if (list) {
+      // really old file where everything was in a single list
 
-        f->cd();
-
-        mc->Write("MC",TObject::kSingleKey);
-        cc->Write("CC",TObject::kSingleKey);
+      AliHistogramCollection* hc = static_cast<AliHistogramCollection*>(list->At(0));
+      AliCounterCollection* cc = static_cast<AliCounterCollection*>(list->At(1));
 
-        f->Delete("chist;*");
+      AliMergeableCollection* mc = hc->Convert();
 
-        f->Write();
+    AliWarning("Out of date method");
 
-        }
-    else
-        {
-        AliHistogramCollection* hc = static_cast<AliHistogramCollection*>(f->Get("HC"));
+      mc->Write("MC",TObject::kSingleKey);
+      cc->Write("CC",TObject::kSingleKey);
 
-        if ( hc )
-            {
-            // old file with histogram collection instead of mergeable collection
+      f->Delete("chist;*");
 
-            AliMergeableCollection* mc = hc->Convert();
+      f->Write();
 
-            f->cd();
+    } else {
+      AliHistogramCollection* hc = static_cast<AliHistogramCollection*>(f->Get("HC"));
 
-            mc->Write("MC",TObject::kSingleKey);
+      if ( hc ) {
+        // old file with histogram collection instead of mergeable collection
 
-            f->Delete("HC;*");
+        AliMergeableCollection* mc = hc->Convert();
 
-            f->Write();
-            }
-        }
+        f->cd();
 
-    delete f;
+        mc->Write("MC",TObject::kSingleKey);
+        f->Delete("HC;*");
+        f->Write();
+      }
+    }
 
-    return kTRUE;
+  delete f;
+  return kTRUE;
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::PrintDistribution(const char* binType, const char* what, const char* sResName, const char* ColSys, Bool_t divideByBinWidth, Bool_t AccEffCorr)
+void AliAnalysisMuMu::PrintDistribution(const char* binType, const char* what, const char* subresultname, Bool_t divideByBinWidth, Bool_t AccEffCorr)
 {
-    /// Compute what distribution vs binType. Delegate procedure to AliAnalysisSpectra object. It can be compute for an specific subresult (fit with an specific background shape, signal, fitting range... combination) or from the mean of all the subresults.
-    ///
-    /// Parameters:
-    ///   -binType    : INTEGRATED, PT, Y (for now)
-    ///   -what       : The quantity (NofJPsi by default, but could be something else...)
-    ///   -AccEffCorr : Just a tag to select right histograms.
-    ///   -sResName   : subresult name to get the yield from. By default is "" (mean of all subresults)
-
-    if (!OC() || !CC())
-        {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-        }
-    else
-        {
-        cout <<      " ================================================================ " << endl;
-        cout <<      "                       PrintDistribution                          " << endl;
-        cout <<      " ================================================================ " << endl;
-        }
+    /**
+     * @brief    Print distribution vs binType.
+     * @details  Delegate procedure to AliAnalysisSpectra object. DimuonTriggerKey is used to select the trigger.
+     *
+     *  @param   binType          [description]
+     *  @param   what               Quantity stored in the AliAnalysisMuMuSpectra
+     *  @param   subresultname    If one wants to draw one/several specific results.
+     *  @param   divideByBinWidth [description]
+     *  @param   AccEffCorr       Spectra type
+    **/
+    if (!OC() || !CC()){
+      AliError("No mergeable/counter collection. Consider Upgrade()");
+      return ;
+    } else {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                       PrintDistribution                          " << endl;
+      cout <<      " ================================================================ " << endl;
+    }
 
     // Get configuration settings
     TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
@@ -3942,7 +4207,6 @@ void AliAnalysisMuMu::PrintDistribution(const char* binType, const char* what, c
     TObjString* scentrality;
 
     TString striggerMB  = Config()->First(Config()->MinbiasTriggerKey(),IsSimulation());
-    const TString syear(ColSys);
 
     // Pointers
     TH1* h= 0x0;
@@ -3950,79 +4214,84 @@ void AliAnalysisMuMu::PrintDistribution(const char* binType, const char* what, c
 
     //Loop on what type
     while ( ( swhat = static_cast<TObjString*>(nextWhat()) ) )
-        {
-        AliDebug(1,Form("what %s",swhat->String().Data()));
-        nextEventType.Reset();
-        // Loop on each envenType (see MuMuConfig)
+    {
+      AliDebug(1,Form("what %s",swhat->String().Data()));
+      nextEventType.Reset();
+      // Loop on each envenType (see MuMuConfig)
+      //==============================================================================
+      while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
+      {
+        AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
+        nextTrigger.Reset();
+        // Loop on each trigger (see MuMuConfig)
         //==============================================================================
-        while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
-            {
-            AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
-            nextTrigger.Reset();
-            // Loop on each trigger (see MuMuConfig)
+        while ( ( striggerDimuon = static_cast<TObjString*>(nextTrigger())) )
+        {
+          AliDebug(1,Form("-TRIGGER %s",striggerDimuon->String().Data()));
+          nextPairCut.Reset();
+          // Loop on each paircut (not the ones in MuMuConfig but the ones set)
+          //==============================================================================
+          while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
+          {
+            AliDebug(1,Form("--PAIRCUT %s",spairCut->String().Data()));
+            nextbinType.Reset();
+            // Loop on each type (pt or y)
             //==============================================================================
-            while ( ( striggerDimuon = static_cast<TObjString*>(nextTrigger())) )
-                {
-                AliDebug(1,Form("-TRIGGER %s",striggerDimuon->String().Data()));
-                nextPairCut.Reset();
-                // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-                //==============================================================================
-                while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
-                    {
-                    AliDebug(1,Form("--PAIRCUT %s",spairCut->String().Data()));
-                    nextbinType.Reset();
-                    // Loop on each type (pt or y)
-                    //==============================================================================
-                    while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
-                        {
-                        AliDebug(1,Form("---TYPE %s",sbinType->String().Data()));
-
-                        // //canvas
-                        // TCanvas *c1 = new TCanvas;
-                        // c1->Draw();
-                        // gStyle->SetOptStat(0);
+            while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
+            {
+              AliDebug(1,Form("---TYPE %s",sbinType->String().Data()));
 
-                        nextCentrality.Reset();
-                        // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-                        //==============================================================================
-                        while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
-                            {
-                            AliDebug(1,Form("---CENTRALITY %s",scentrality->String().Data()));
+              // //canvas
+              // TCanvas *c1 = new TCanvas;
+              // c1->Draw();
+              // gStyle->SetOptStat(0);
 
-                            //________Get spectra
-                            TString spectraPath= Form("/%s/%s/%s/%s/%s-%s",seventType->String().Data(),striggerDimuon->String().Data(),scentrality->String().Data(),spairCut->String().Data(),"PSI",sbinType->String().Data());
-                            if (AccEffCorr)spectraPath+="-AccEffCorr";
-                            AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
-                            if(!spectra)
-                                {
-                                AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
-                                return;
-                                }
-                            //________
+              nextCentrality.Reset();
+              // Loop on each centrality (not the ones in MuMuConfig but the ones set)
+              //==============================================================================
+              while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
+              {
+                AliDebug(1,Form("---CENTRALITY %s",scentrality->String().Data()));
 
-                            h= spectra->Plot(swhat->String().Data(),sResName,divideByBinWidth);
-                            TCanvas *c = new TCanvas;
-                            c->SetLogy();
-                            h->Draw();
-                            }
-                        }
+                //________Get spectra
+                TString spectraPath= Form("/%s/%s/%s/%s/%s-%s",seventType->String().Data(),striggerDimuon->String().Data(),scentrality->String().Data(),spairCut->String().Data(),"PSI",sbinType->String().Data());
+                if (AccEffCorr)spectraPath+="-AccEffCorr";
+                AliAnalysisMuMuSpectra * spectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(spectraPath.Data()));
+                if(!spectra)
+                    {
+                    AliError(Form("Cannot find spectra with name %s",spectraPath.Data()));
+                    return;
                     }
-                }
+                //________
+
+                h= spectra->Plot(swhat->String().Data(),subresultname,divideByBinWidth);
+                TCanvas *c = new TCanvas;
+                c->SetLogy();
+                h->Draw();
+              }
             }
+          }
         }
+      }
+    }
 
     return;
 }
 
+//_____________________________________________________________________________
 void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t rhigh, const char* binType, const char* binRangeExluded, const char* flavour, Bool_t corrected)
 {
-    /// Compute the raw count of dimuon pair
-    /// Parameters:
-    ///   - rlow,rhigh  : intervall in bin for the raw count
-    ///   -binType       : integrated,pt,y ...see your AddTaskMuMu
-    ///   -flavour       : Default is BENJ
-    ///   -corrected     : For nomenclature
-
+/**
+ *   [AliAnalysisMuMu::ComputeDimuonRawCount description]
+ *   @brief   Compute the raw count of dimuon pair
+ *
+ *   @param   rlow            Low intervale limit in bin for the raw count
+ *   @param   rhigh           High intervale limit in bin for the raw count
+ *   @param   binType         [description]
+ *   @param   binRangeExluded Excluded range inside interval
+ *   @param   flavour         [description]
+ *   @param   corrected       histo type
+ */
     if(!OC())
     {
         AliError("No mergeable. Consider Upgrade()");
@@ -4067,25 +4336,21 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
 
 
     // Loop on each envenType (see MuMuConfig)
-    //==============================================================================
     while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
     {
         AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
         nextTrigger.Reset();
         // Loop on each trigger (see MuMuConfig)
-        //==============================================================================
         while ( ( striggerDimuon = static_cast<TObjString*>(nextTrigger())) )
         {
             AliDebug(1,Form("-TRIGGER %s",striggerDimuon->String().Data()));
             nextPairCut.Reset();
             // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-            //==============================================================================
             while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
             {
                 AliDebug(1,Form("--PAIRCUT %s",spairCut->String().Data()));
                 nextbinType.Reset();
                 // Loop on each type (pt or y)
-                //==============================================================================
                 while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
                 {
                     AliDebug(1,Form("---TYPE %s",sbinType->String().Data()));
@@ -4104,7 +4369,7 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
                         binning->AddBin("psi",sbinType->String().Data());
                     }
 
-                    //Check Binning list
+                    // Check Binning list
                     TObjArray* bins = binning->CreateBinObjArray("psi");
                     if (!bins)
                     {
@@ -4112,7 +4377,6 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
                         return;
                     }
                     // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-                    //==============================================================================
                     while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
                     {
                         AliDebug(1,Form("----CENTRALITY %s",scentrality->String().Data()));
@@ -4133,7 +4397,6 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
                         hraw->GetXaxis()->SetTitle(sbinType->String().Data());
 
                         // Loop on each range in bin
-                        //==============================================================================
                         while ( ( sbin = static_cast<AliAnalysisMuMuBinning::Range*>(next())) )
                         {
                             AliDebug(1,Form("-----Bin range %s",sbin->AsString().Data()));
@@ -4148,8 +4411,7 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
 
                             // Pointer to the histo from histo collection
                             h = OC()->Histo(id.Data(),hname.Data());
-                            if (!h)
-                            {
+                            if (!h){
                                 AliError(Form("Could not find histo %s",hname.Data()));
                                 continue;
                             }
@@ -4167,8 +4429,7 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
                             if(binLow==0 || binHight ==0)continue;
                             // Fill
                             Double_t rawCount =0.;
-                            for (Int_t i = binLow; i < binHight; ++i)
-                            {
+                            for (Int_t i = binLow; i < binHight; ++i){
                                 rawCount = rawCount + h->GetBinContent(i);
                                 AliDebug(1,Form("rawCount for %s in bin [%d]= %f \n",h->GetTitle(),i,rawCount));
                             }
@@ -4177,8 +4438,7 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
                         }
                         TH1* o = OC()->Histo(id.Data(),hraw->GetName());
 
-                        if (o)
-                        {
+                        if (o){
                             AliWarning(Form("Replacing %s/%s",id.Data(),hraw->GetName()));
                             OC()->Remove(Form("%s/%s",id.Data(),hraw->GetName()));
                         }
@@ -4190,39 +4450,39 @@ void AliAnalysisMuMu::ComputeDimuonRawCount(const Double_t rlow, const Double_t
                         else AliError(Form("Could not adopt Yield histo %s",hraw->GetName()));
                         new TCanvas;
                         hraw->DrawCopy("e0");
-
                     }
                     delete binning;
-
                 }
             }
         }
     }
-
     return;
 }
 
+//_____________________________________________________________________________
 void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* particle, const char* what,const char* externfile, const char* externfile2, Bool_t print, Bool_t AccEffCorr)
 {
-    /// Compute the PP Cross section
-    /// Parameters:
-    ///   -particle   : default is PSI
-    ///   -particle   : default is CorrNofJPsi
-    ///   -binType    : integrated,pt,y ...see your AddTaskMuMu
-    ///   -sResName   : For a particular results
-    ///   -flavour    : Default is BENJ
-    ///   -AccEffCorr : For nomenclature
-
-    if(!OC())
-    {
-        AliError("No mergeable. Consider Upgrade()");
-        return;
-    }
-    else
-    {
-        cout <<      " ================================================================ " << endl;
-        cout <<      "                       ComputePPCrossSection                          " << endl;
-        cout <<      " ================================================================ " << endl;
+/**
+ *   [AliAnalysisMuMu::ComputePPCrossSection description]
+ *   @brief   Compute the PP Cross section
+ *   @details Delegate the process to AliAnalysisMuMuCapsulePP.
+ *
+ *   @param   binType     [description]
+ *   @param   particle    particle name
+ *   @param   what        Quantity stored in the AliAnalysisMuMuSpectra
+ *   @param   externfile  Config. file readed by AliAnalysisMuMuSpectraCapsule classes. See AliAnalysisMuMuSpectraCapsule documentation
+ *   @param   externfile2 Config. file readed by AliAnalysisMuMuSpectraCapsule classes. See AliAnalysisMuMuSpectraCapsule documentation
+ *   @param   print       Print more details
+ *   @param   AccEffCorr  Spectra type
+ */
+
+    if(!OC()){
+      AliError("No mergeable. Consider Upgrade()");
+      return;
+    } else {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                       ComputePPCrossSection                          " << endl;
+      cout <<      " ================================================================ " << endl;
     }
 
      // Get configuration settings
@@ -4257,33 +4517,30 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
 
 
     // Loop on each envenType (see MuMuConfig)
-    //==============================================================================
     while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
     {
         AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
         nextTrigger.Reset();
+
         // Loop on each trigger (see MuMuConfig)
-        //==============================================================================
         while ( ( striggerDimuon = static_cast<TObjString*>(nextTrigger())) )
         {
             AliDebug(1,Form("-TRIGGER %s",striggerDimuon->String().Data()));
             nextPairCut.Reset();
+
             // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-            //==============================================================================
             while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
             {
                 AliDebug(1,Form("--PAIRCUT %s",spairCut->String().Data()));
                 nextbinType.Reset();
+
                 // Loop on each type (pt or y)
-                //==============================================================================
                 while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
                 {
                     AliDebug(1,Form("---TYPE %s",sbinType->String().Data()));
                     nextCentrality.Reset();
 
-
                     // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-                    //==============================================================================
                     while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
                     {
                         AliDebug(1,Form("----CENTRALITY %s",scentrality->String().Data()));
@@ -4304,7 +4561,7 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
                         AliAnalysisMuMuSpectraCapsulePP * capsule = new AliAnalysisMuMuSpectraCapsulePP(spectra,spectraPath,externfile,externfile2);
                         if(!capsule) continue;
                         AliDebug(1,Form("Spectra = %p",capsule));
-                        // capsule->PrintConst();
+
                         if(print)capsule->SetPrintFlag();
 
                         // Get Graph with RAA results
@@ -4313,11 +4570,9 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
                         AliDebug(1,Form("list = %p",list));
                         if(!list) continue;
 
-
                         graph = static_cast<TGraphErrors*>(list->At(0)->Clone());
                         graphErr = static_cast<TGraphErrors*>(list->At(1)->Clone());
 
-
                         TF1* fit=0x0;
                         TFitResultPtr Fitpoint=0x0;
 
@@ -4331,7 +4586,7 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
                         //     fit->SetParameters(2.8,0.00,2.9271);
                         //     fit->FixParameter(1,0.00);
                         // }
-                        LoadStyles();
+                        Config()->LoadAliceStyles();
 
                         graph->SetMarkerColor(2);
                         graph->SetMarkerStyle(8);
@@ -4346,6 +4601,7 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
                         // graphErr->SetFillStyle(3001);
                         graphErr->SetTitle(Form("J/#psi cross section"));
 
+
                         if(sbinType->String().Contains("PT")){
                           graphErr->GetXaxis()->SetTitle(Form("#it{p}_{T}(GeV/#it{c})"));
                           graphErr->GetYaxis()->SetTitle(Form("d^{2}#sigma/d#it{y}d#it{p}_{T} (#mub(GeV/#it{c})^{-1})"));
@@ -4358,7 +4614,6 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
                           graphErr->GetYaxis()->SetTitle(Form("d^{2}#sigma/d#it{y}(#muB)"));
                           graphErr->GetYaxis()->SetTitleSize(0.06);
                         }
-
                         graphErr->SetMarkerSize(1.7);
 
                         TCanvas *c = new TCanvas("c","c",4,132,1024,768);
@@ -4397,10 +4652,6 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
                         graph->DrawClone("Psame");
                         leg->DrawClone("same");
                         gPad->RedrawAxis();
-
-
-
-
                     }
                 }
             }
@@ -4413,9 +4664,17 @@ void AliAnalysisMuMu::ComputePPCrossSection(const char* binType, const char* par
 //_____________________________________________________________________________
 TH2* AliAnalysisMuMu::ComputeSPDCorrection(const char* type, const char* eventSel, const char* triggerSel, Bool_t bkgReject)
 {
-    //FIX ME : make it general
-    //
-    //
+/**
+ *   [AliAnalysisMuMu::ComputeSPDCorrection description]
+ *   @brief   Old method with a lot of hard coded lines, not sure of what it does... Needs to be more general
+ *   @details make it general
+ *
+ *   @param   type       [description]
+ *   @param   eventSel   [description]
+ *   @param   triggerSel [description]
+ *   @param   bkgReject  [description]
+ *   @return             [description]
+ */
     TString stype(type);
     TString evtype(eventSel);
     TString trigtype(triggerSel);
@@ -4498,39 +4757,21 @@ TH2* AliAnalysisMuMu::ComputeSPDCorrection(const char* type, const char* eventSe
                     hSPDCorr->SetBinContent(n,-1);
                     }
 
-                }
-            }
-        }
-
-    return hSPDCorr;
-}
-
-//_____________________________________________________________________________
-void AliAnalysisMuMu::ComputeFnorm()
-{
-    /// Compute the CMUL to CINT ratio(s)
-
-    if (!CC()) return;
-
-    //Delete precedent Fnorm
-    OC()->Prune("/FNORM");
-    //Create the object
-    AliAnalysisMuMuFnorm computer(*(CC()),*(Config()),AliAnalysisMuMuFnorm::kMUL,Config()->OCDBPath(),Config()->CompactGraphs());
-    //Compute Fnorm
-    computer.ComputeFnorm();
-    //Let go the ownership
-    AliMergeableCollection* fnorm = computer.DetachMC();
-    //Set the new ownership
-    OC()->Attach(fnorm,"/FNORM/");
-    //Update
-    Update();
+                }
+            }
+        }
+
+    return hSPDCorr;
 }
 
 //_____________________________________________________________________________
 void AliAnalysisMuMu::ComputeNumberOfEvent()
 {
-    /// Compute the CMUL to CINT ratio(s)
-
+/**
+ *   [AliAnalysisMuMu::ComputeNumberOfEvent description]
+ *   @brief   Compute the CMUL to CINT ratio(s)
+ *
+ */
     if (!OC() || !CC()|| !Config())
     {
         AliError("No mergeable/counter collection. Consider Upgrade()");
@@ -4572,24 +4813,26 @@ void AliAnalysisMuMu::ComputeNumberOfEvent()
 //_____________________________________________________________________________
 void AliAnalysisMuMu::ComputeFnormWeightedMeanGraphs(AliAnalysisMuMuFnorm::ETriggerType refTrigger,const char* patternOrList, const char* graphName )
 {
-    /// Compute the FNorm Weighted Mean Graph
-    /// Parameters:
-    ///   - refTrigger    : kMUL, kMB ...
-    ///   - patternOrList : name of the graphs included in the mean proceedur. Two mean graphs are separated by ":" and graphics used to compute a mean graphs are
-    ///                     separated by ',' . For example: FnormOffline2PUPS,FnormOffline1PUPS:FnormOffline2PUPS,FnormOffline1PUPS,FnormScalers1PUPS will compute
-    ///                     one mean graph with  FnormOffline2PUPS - FnormOffline1PUPS, and one mean graph with FnormOffline2PUPS - FnormOffline1PUPS - FnormScalers1PUPS.
-    ///   -  graphName    : name of the output mean graph. Selected by default otherwise
+/**
+ *   [AliAnalysisMuMu::ComputeFnormWeightedMeanGraphs description]
+ *   @brief   Compute the FNorm Weighted Mean Graph.
+ *   @details Delegate to AliAnalysisMuMuFNorm.
+ *
+ *   @param   refTrigger    kMUL, kMB ... See AliAnalysisMuMuFNorm
+ *   @param   patternOrList Name of the graphs included in the mean process. Two mean graphs are separated by ":" and graphics used to compute a mean graphs are
+ *                          separated by ','. Example : "FnormOffline2PUPS,FnormOffline1PUPS:FnormOffline2PUPS,FnormOffline1PUPS,FnormScalers1PUPS" computes
+ *                          mean graph for "FnormOffline2PUPS - FnormOffline1PUPS", another one for "FnormOffline2PUPS - FnormOffline1PUPS - FnormScalers1PUPS".
+ *   @param   graphName     Name of the output mean graph.
+ */
 
     if (!OC() || !CC()|| !Config())
     {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-    }
-    else
-    {
-        cout <<      " ================================================================ " << endl;
-        cout <<      "                     ComputeFnormWeightedMeanGraphs                 " << endl;
-        cout <<      " ================================================================ " << endl;
+      AliError("No mergeable/counter collection. Consider Upgrade()");
+      return ;
+    } else {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                     ComputeFnormWeightedMeanGraphs                 " << endl;
+      cout <<      " ================================================================ " << endl;
     }
 
     //Delete precedent Fnorm
@@ -4604,13 +4847,7 @@ void AliAnalysisMuMu::ComputeFnormWeightedMeanGraphs(AliAnalysisMuMuFnorm::ETrig
     TIter next(slist);
     TObjString* str(0x0);
 
-
-
-    while ( ( str = static_cast<TObjString*>(next()) ) )
-    {
-        computer.WeightedMeanGraphs(str->String().Data(),graphName,OC());
-    }
-
+    while ( ( str = static_cast<TObjString*>(next()) ) ) computer.WeightedMeanGraphs(str->String().Data(),graphName,OC());
 
     AliMergeableCollection* fnorm = computer.DetachMC();
     //Set the new ownership
@@ -4622,29 +4859,22 @@ void AliAnalysisMuMu::ComputeFnormWeightedMeanGraphs(AliAnalysisMuMuFnorm::ETrig
 //_____________________________________________________________________________
 void AliAnalysisMuMu::ComputeFnormScalers(AliAnalysisMuMuFnorm::ETriggerType refTrigger, Bool_t PileUpCorr)
 {
-  /// Compute the MB to REF ratio using the scalers method (from OCDB)
-  ///
-  /// i.e. Fnorm = L0B(MB) x PS(MB) x Fpile-up / ( L0B(REF) x PS(REF) )
-  ///
-  /// where MB is the minbias trigger
-  /// REF is the fReferenceTrigger
-  /// and PS is the fraction of events selected by the physics selection
-  ///
-  /// The correction factor (the two PS and one Fpile-up) are
-  /// taken from graphs computed in other methods
-  ///
-
-
-    if (!OC() || !CC()|| !Config())
-    {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-    }
-    else
-    {
-        cout <<      " ================================================================ " << endl;
-        cout <<      "                     ComputeFnormScalers                 " << endl;
-        cout <<      " ================================================================ " << endl;
+/**
+ *   [AliAnalysisMuMu::ComputeFnormScalers description]
+ *   @brief   Compute the MB to REF ratio using the scalers method (from OCDB)
+ *   @details Delegate to AliAnalysisMuMuFnorm.
+ *
+ *   @param   refTrigger [description]
+ *   @param   PileUpCorr [description]
+ */
+
+    if (!OC() || !CC()|| !Config()){
+      AliError("No mergeable/counter collection. Consider Upgrade()");
+      return ;
+    } else {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                     ComputeFnormScalers                 " << endl;
+      cout <<      " ================================================================ " << endl;
     }
 
     //Delete precedent Fnorm
@@ -4671,17 +4901,16 @@ void AliAnalysisMuMu::ComputeIntFnormFromCounters(AliAnalysisMuMuFnorm::ETrigger
  /// Compute the CMUL to CINT ratio(s) in 1 or 2 steps (Offline method) from the CC(), in bins.
  ///
  /// Important considerations:
+ ///
  ///   - The analysed file must contain the CMUL, CINT, CMSL, CMSL&0MUL and CINT&0MSL triggers to work correctly.
- ///   FIX ME : quantity not define in CC() for "pt" and "y".
+ ///
+ ///    FIX ME : quantity not define in CC() for "pt" and "y".
 
 
-    if (!OC() || !CC()|| !Config())
-    {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-    }
-    else
-    {
+    if (!OC() || !CC()|| !Config()){
+      AliError("No mergeable/counter collection. Consider Upgrade()");
+      return ;
+    } else {
         cout <<      " ================================================================ " << endl;
         cout <<      "                     ComputeIntFnormFromCounters                 " << endl;
         cout <<      " ================================================================ " << endl;
@@ -4703,262 +4932,33 @@ void AliAnalysisMuMu::ComputeIntFnormFromCounters(AliAnalysisMuMuFnorm::ETrigger
     AliMergeableCollection* fnorm = computer.DetachMC();
     //Set the new ownership
     OC()->Attach(fnorm,"/FNORM/Offline/");
-    //Update
     Update();
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::ComputeMeanFnorm(const char* triggerCluster, const char* eventSelection, const char* what,const char* quantity,const char* flavour)
-{
-    /// Compute the mean Fnorm and mean NMB from the "offline" and "rescaled global" methods.
-    ///
-    /// Parameters:
-    ///   -triggercluster: cluster where the CMSL trigger is ("MUON" for pA but for pp2012 could be also "ALLNOTRD" for certain runs, the option "MUON-ALLNOTRD" accounts for both at the same time). By default is "MUON".
-    ///   -eventSelectionFnorm: event selection used for the normalization factor. By default is "PSALL" (only physics selection).
-    ///   -eventSelectionYield: event selection used for the yield analysis. By default is "PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00".
-    ///   -what: what the binning range is about (J/psi, event...). By default is "psi".
-    ///   -quantity: binning type. By default "ntrcorr"
-    ///   -flavour: binning flavour. By default "D2H"
-
-    TString seventSelection(eventSelection);
-    TString striggerCluster(triggerCluster);
-    TString sQuantity(quantity);
-    if ( striggerCluster.Contains("MUON") && !striggerCluster.Contains("ALLNOTRD") ) striggerCluster = "MUON";
-    else if ( striggerCluster.Contains("ALLNOTRD") && !striggerCluster.Contains("MUON") ) striggerCluster = "ALLNOTRD";
-    else if ( striggerCluster.Contains("MUON") && striggerCluster.Contains("ALLNOTRD") ) striggerCluster = "MUON-ALLNOTRD";
-    else
-        {
-        AliError("Unknown trigger cluster");
-        return;
-        }
-
-    TString triggerType(Config()->First(Config()->DimuonTriggerKey(),kFALSE).Data());
-    if ( triggerType.Contains("7-") ) triggerType = "7";
-    else if ( triggerType.Contains("8-") ) triggerType = "8";
-    else
-        {
-        AliError("Unknown trigger type");
-        return;
-        }
-
-    TString colType(Config()->First(Config()->DimuonTriggerKey(),kFALSE).Data());
-    if ( colType.Contains("-B-") ) colType = "B";
-    else if ( colType.Contains("-S-") ) colType = "S";
-    else
-        {
-        AliError("Unknown collision type");
-        return;
-        }
-
-    TH1* hMB = OC()->Histo(Form("/FNORM-%s/%s/V0A/hNofEqMBVS%s",striggerCluster.Data(),seventSelection.Data(),sQuantity.Data()));
-    if ( !hMB )
-        {
-        AliError(Form("Histo hNofEqMBVS%s not found",sQuantity.Data()));
-        return;
-        }
-
-    TH1* hMBG = OC()->Histo(Form("/FNORM-%s/%s/V0A/hNofEqMBVS%sFromGlobal",striggerCluster.Data(),seventSelection.Data(),sQuantity.Data()));
-    if ( !hMBG )
-        {
-        AliError(Form("Histo hNofEqMBVS%sFromGlobal not found",sQuantity.Data()));
-        return;
-        }
-
-    TH1* hFnorm = OC()->Histo(Form("/FNORM-%s/%s/V0A/hFNormVS%s",striggerCluster.Data(),seventSelection.Data(),sQuantity.Data()));
-    if ( !hMB )
-        {
-        AliError(Form("Histo hFNormVS%s not found",sQuantity.Data()));
-        return;
-        }
-
-    TH1* hFnormG = OC()->Histo(Form("/FNORM-%s/%s/V0A/hFNormVS%sFromGlobal",striggerCluster.Data(),seventSelection.Data(),sQuantity.Data()));
-    if ( !hMBG )
-        {
-        AliError(Form("Histo hFNormVS%sFromGlobal not found",sQuantity.Data()));
-        return;
-        }
-
-
-    //  AliAnalysisMuMuBinning* binning = BIN()->Project(what,sQuantity.Data(),flavour);
-    //  if ( !binning )
-    //  {
-    //    AliError(Form("%s-%s-%s binning does not exist",what,sQuantity.Data(),flavour));
-    //    return;
-    //  }
-    //  TObjArray* bin = binning->CreateBinObjArray(what,sQuantity.Data(),flavour);
-
-
-    TString id(Form("/FNORM-%s/%s/V0A",striggerCluster.Data(),seventSelection.Data()));
-
-    TH1* hMBMean = static_cast<TH1*>(hMBG->Clone());
-    hMBMean->SetName(Form("hNofEqMBVS%sFromMean",sQuantity.Data()));
-
-    TH1* hFnormMean = static_cast<TH1*>(hFnorm->Clone());
-    hFnormMean->SetName(Form("hFNormVS%sFromMean",sQuantity.Data()));
-
-    for ( Int_t i = 1 ; i <= hMB->GetNbinsX() ; i++ )
-        {
-        //______Mean NofMB computation
-        Double_t Fn = hMB->GetBinContent(i);
-        Double_t Fng = hMBG->GetBinContent(i);
-
-        Double_t FnE = hMB->GetBinError(i);
-        Double_t FngE = hMBG->GetBinError(i);
-        //
-        //    Double_t meanBin = (Fn + Fng) / 2.;
-        //    Double_t meanBinError = TMath::Sqrt( TMath::Power(FnE/2.,2.) + TMath::Power(FngE/2.,2.) );
-        //    Double_t meanBinSys = TMath::Abs( meanBin - Fn );
-
-        Double_t meanBin = (Fn/TMath::Power(FnE,2.) + Fng/TMath::Power(FngE,2.)) / ( 1./TMath::Power(FnE,2.) + 1./TMath::Power(FngE,2.) );
-        Double_t meanBinError = TMath::Sqrt(1. / ( 1./TMath::Power(FnE,2.) + 1./TMath::Power(FngE,2.) ));
-        Double_t meanBinSys = TMath::Sqrt( ( TMath::Power(Fn - meanBin,2.)/TMath::Power(FnE,2.) + TMath::Power(Fng - meanBin,2.)/TMath::Power(FngE,2.) )/( 1./TMath::Power(FnE,2.) + 1./TMath::Power(FngE,2.) ) );
-
-        std::cout << "Bin : " << hMB->GetXaxis()->GetBinLabel(i) << std::endl;
-
-        std::cout << " Mean NMB = " << meanBin << " +- " << meanBinError << " (stat) " << " +- " << meanBinSys << " (syst (" << (meanBinSys/meanBin)*100
-        << "%))" << std::endl;
-
-        hMBMean->SetBinContent(i,meanBin);
-        hMBMean->SetBinError(i,meanBinError);
-        //______
-
-
-        //______Mean FNorm computation
-        Fn = hFnorm->GetBinContent(i);
-        Fng = hFnormG->GetBinContent(i);
-
-        FnE = hFnorm->GetBinError(i);
-        FngE = hFnormG->GetBinError(i);
-
-        meanBin = (Fn/TMath::Power(FnE,2.) + Fng/TMath::Power(FngE,2.)) / ( 1./TMath::Power(FnE,2.) + 1./TMath::Power(FngE,2.) );
-        meanBinError = TMath::Sqrt(1. / ( 1./TMath::Power(FnE,2.) + 1./TMath::Power(FngE,2.) ));
-        meanBinSys = TMath::Sqrt( ( TMath::Power(Fn - meanBin,2.)/TMath::Power(FnE,2.) + TMath::Power(Fng - meanBin,2.)/TMath::Power(FngE,2.) )/( 1./TMath::Power(FnE,2.) + 1./TMath::Power(FngE,2.) ) );
-
-        //    Double_t nCMULBin = CC()->GetSum(Form("/event:%s/trigger:CMUL%s-%s-NOPF-MUON/centrality:V0A/bin:%s",
-        //                                          seventSelection.Data(),triggerType.Data(),colType.Data(),
-        //                                          static_cast<AliAnalysisMuMuBinning::Range*>(bin->At(i-1))->AsString().Data()));
-        //
-        //    if (printout) std::cout << meanBinSys/nCMULBin << std::endl;
-        //
-        //    Double_t meanFnBin = meanBin/nCMULBin;
-        //    Double_t meanFnBinError = TMath::Sqrt( TMath::Power(meanBinError/nCMULBin,2) + TMath::Power(meanBin/TMath::Power(nCMULBin,2.),2) );
-        //
-        //    if (printout) std::cout << meanBinSys/nCMULBin/meanFnBin << std::endl;
-        //
-        //    if (printout) std::cout << meanFnBin << " +- " << meanFnBinError << std::endl;
-
-        std::cout << " Mean FNorm = " << meanBin << " +- " << meanBinError << " (stat) " << " +- " << meanBinSys << " (syst (" << (meanBinSys/meanBin)*100
-        << "%)" << std::endl;
-        std::cout << std::endl;
-
-        hFnormMean->SetBinContent(i,meanBin);
-        hFnormMean->SetBinError(i,meanBinError);
-        //______
-        }
-
-    TH1* o = fMergeableCollection->Histo(id.Data(),hMBMean->GetName());
-
-    if (o)
-        {
-        AliWarning(Form("Replacing %s/%s",id.Data(),hMBMean->GetName()));
-        fMergeableCollection->Remove(Form("%s/%s",id.Data(),hMBMean->GetName()));
-        }
-
-    Bool_t adoptOK = fMergeableCollection->Adopt(id.Data(),hMBMean);
-
-    if ( adoptOK ) std::cout << "+++FNorm histo " << hMBMean->GetName() << " adopted" << std::endl;
-    else AliError(Form("Could not adopt FNorm histo %s",hMBMean->GetName()));
-
-
-    o = fMergeableCollection->Histo(id.Data(),hFnormMean->GetName());
-
-    if (o)
-        {
-        AliWarning(Form("Replacing %s/%s",id.Data(),hFnormMean->GetName()));
-        fMergeableCollection->Remove(Form("%s/%s",id.Data(),hFnormMean->GetName()));
-        }
-
-    adoptOK = fMergeableCollection->Adopt(id.Data(),hFnormMean);
-
-    if ( adoptOK ) std::cout << "+++FNorm histo " << hFnormMean->GetName() << " adopted" << std::endl;
-    else AliError(Form("Could not adopt FNorm histo %s",hFnormMean->GetName()));
-}
-
-
-//_____________________________________________________________________________
-void AliAnalysisMuMu::PlotYiedWSyst(const char* triggerCluster)
-{
-    // Add syst. to yield and plot it
-    //
-    // FIX ME : make me more general
-    TString striggerCluster(triggerCluster);
-    if ( striggerCluster.Contains("MUON") && !striggerCluster.Contains("ALLNOTRD") ) striggerCluster = "MUON";
-    else if ( striggerCluster.Contains("ALLNOTRD") && !striggerCluster.Contains("MUON") ) striggerCluster = "ALLNOTRD";
-    else if ( striggerCluster.Contains("MUON") && striggerCluster.Contains("ALLNOTRD") ) striggerCluster = "MUON-ALLNOTRD";
-    else
-        {
-        AliError("Unknown trigger cluster");
-        return;
-        }
-
-
-    TString path(Form("%s/%s/%s/%s",
-                      Config()->First(Config()->EventSelectionKey(),kFALSE).Data(),
-                      Config()->First(Config()->DimuonTriggerKey(),kFALSE).Data(),
-                      Config()->First(Config()->CentralitySelectionKey(),kFALSE).Data(),
-                      Config()->First(Config()->PairSelectionKey(),kFALSE).Data()));
-
-    TH1* hY = OC()->Histo(Form("/RESULTS-%s/%s",striggerCluster.Data(),path.Data()),"hJPsiYieldVSdNchdEtaRelative");
-    if ( !hY )
-        {
-        AliError("No yield found");
-        return;
-        }
-
-    TString id(Form("/TESTSYST/%s",path.Data()));
-
-    TH1* hYSyst = static_cast<TH1*>(hY->Clone("RelYieldSyst"));
-    if ( !hYSyst )
-        {
-        AliError("No systematic found");
-        return;
-        }
-
-    TH1* hS = OC()->Histo(id.Data(),"yield_Systematics");
-
-    for ( Int_t i = 1 ; i <= hY->GetNbinsX() ; i++ )
-        {
-        hYSyst->SetBinError(i,hS->GetBinContent(i)*hY->GetBinContent(i)/100.);
-        }
-
-    hY->Draw();
-    hYSyst->Draw("same");
-}
-
-//_____________________________________________________________________________
-void AliAnalysisMuMu::ComputeJpsiYield(const char* binType, const char* what, const char* externfile, const char* externfile2, const char* sResName, const char* beamYear, Bool_t AccEffCorr)
+void AliAnalysisMuMu::ComputeJpsiYield(const char* binType, const char* what, const char* externfile, const char* externfile2, const char* subresultname, const char* beamYear, Bool_t AccEffCorr)
 {
-    /// Compute the Jpsi yield, i.e NofJPsi/Fnorm. Delegate procedure to the right capsule object. It can be compute for an specific subresult (fit with an specific background shape, signal, fitting range... combination) or from the mean of all the subresults.
-    ///
-    /// Parameters:
-    ///   -binType    : INTEGRATED, PT, Y (for now)
-    ///   -what       : The quantity divided by FNorm (NofJPsi by default, but could be something else...)
-    ///   -externfile : For the capsule
-    ///   -externfile2: For the capsule
-    ///   -AccEffCorr : Just a tag to select right histograms.
-    ///   -sResName   : subresult name to get the yield from. By default is "" (mean of all subresults)
-
-    if (!OC() || !CC())
-        {
-        AliError("No mergeable/counter collection. Consider Upgrade()");
-        return ;
-        }
-    else
-        {
-        cout <<      " ================================================================ " << endl;
-        cout <<      "                       ComputeJpsiYield                           " << endl;
-        cout <<      " ================================================================ " << endl;
-        }
+/**
+ *   [AliAnalysisMuMu::ComputeJpsiYield description]
+ *   @brief   Compute the Jpsi yield, i.e NofJPsi/Fnorm.
+ *   @details Delegate to AliAnalysisMuMuCapsule. It can be compute for an specific subresult (fit with an specific background shape, signal, fitting range... combination) or from the mean of all the subresults.
+ *
+ *   @param binType        [description]
+ *   @param what           Quantity stored in the AliAnalysisMuMuSpectra
+ *   @param externfile     Config. file readed by AliAnalysisMuMuSpectraCapsule classes. See AliAnalysisMuMuSpectraCapsule documentation
+ *   @param externfile2    Config. file readed by AliAnalysisMuMuSpectraCapsule classes. See AliAnalysisMuMuSpectraCapsule documentation
+ *   @param AccEffCorr     Spectra type
+ *   @param subresultname  If one wants to draw one/several specific results.
+ */
+
+    if (!OC() || !CC()) {
+      AliError("No mergeable/counter collection. Consider Upgrade()");
+      return ;
+    } else {
+      cout <<      " ================================================================ " << endl;
+      cout <<      "                       ComputeJpsiYield                           " << endl;
+      cout <<      " ================================================================ " << endl;
+    }
 
     // Get configuration settings
     TObjArray* eventTypeArray   = Config()->GetListElements(Config()->EventSelectionKey(),IsSimulation());
@@ -4990,39 +4990,36 @@ void AliAnalysisMuMu::ComputeJpsiYield(const char* binType, const char* what, co
     TString striggerMB  = Config()->First(Config()->MinbiasTriggerKey(),IsSimulation());
     const TString syear(beamYear);
 
-
-
     // Pointers
-    TH1* h= 0x0;
-    TGraphErrors* graph=0x0;
-    TGraphErrors* graphCent=0x0;
-    AliAnalysisMuMuSpectra spectra=0x0;
+    TH1* h                         = 0x0;
+    TGraphErrors* graph            = 0x0;
+    TGraphErrors* graphCent        = 0x0;
+    AliAnalysisMuMuSpectra spectra = 0x0;
 
     //Loop on what type
     while ( ( swhat = static_cast<TObjString*>(nextWhat()) ) )
         {
         AliDebug(1,Form("what %s",swhat->String().Data()));
         nextEventType.Reset();
+
         // Loop on each envenType (see MuMuConfig)
-        //==============================================================================
         while ( ( seventType = static_cast<TObjString*>(nextEventType())) )
             {
             AliDebug(1,Form("EVENTTYPE %s",seventType->String().Data()));
             nextTrigger.Reset();
             // Loop on each trigger (see MuMuConfig)
-            //==============================================================================
             while ( ( striggerDimuon = static_cast<TObjString*>(nextTrigger())) )
                 {
                 AliDebug(1,Form("-TRIGGER %s",striggerDimuon->String().Data()));
                 nextPairCut.Reset();
+
                 // Loop on each paircut (not the ones in MuMuConfig but the ones set)
-                //==============================================================================
                 while ( ( spairCut = static_cast<TObjString*>(nextPairCut())) )
                     {
                     AliDebug(1,Form("--PAIRCUT %s",spairCut->String().Data()));
                     nextbinType.Reset();
+
                     // Loop on each type (pt or y)
-                    //==============================================================================
                     while ( ( sbinType = static_cast<TObjString*>(nextbinType()) ) )
                         {
                         AliDebug(1,Form("---TYPE %s",sbinType->String().Data()));
@@ -5033,8 +5030,8 @@ void AliAnalysisMuMu::ComputeJpsiYield(const char* binType, const char* what, co
                         gStyle->SetOptStat(0);
 
                         nextCentrality.Reset();
+
                         // Loop on each centrality (not the ones in MuMuConfig but the ones set)
-                        //==============================================================================
                         while ( ( scentrality = static_cast<TObjString*>(nextCentrality()) ) )
                             {
                             AliDebug(1,Form("---CENTRALITY %s",scentrality->String().Data()));
@@ -5074,7 +5071,7 @@ void AliAnalysisMuMu::ComputeJpsiYield(const char* binType, const char* what, co
                                     AliDebug(1,Form("Spectra = %p",capsule));
 
                                     // Get Graph with Yield results
-                                    graph = capsule->ComputeYield(swhat->String().Data(),h,sResName);
+                                    graph = capsule->ComputeYield(swhat->String().Data(),h,subresultname);
 
                                     TLegend * leg = new TLegend(0.4,0.7,0.90,0.9);
                                     leg->SetHeader(Form("ALICE, Pb-Pb #sqrt{s_{NN}}=2.76 TeV, L_{int}=70 #mub^{-1}, %s",scentrality->String().Data()));
@@ -5090,7 +5087,7 @@ void AliAnalysisMuMu::ComputeJpsiYield(const char* binType, const char* what, co
                                 AliDebug(1,Form("Spectra = %p",capsule));
 
                                 // Get Graph with Yield results
-                                graph = capsule->ComputeYield(swhat->String().Data(),h,sResName);
+                                graph = capsule->ComputeYield(swhat->String().Data(),h,subresultname);
 
                                 TLegend * leg = new TLegend(0.4,0.7,0.90,0.9);
                                 leg->SetHeader(Form("ALICE, Pb-Pb #sqrt{s_{NN}}=2.76 TeV, L_{int}=70 #mub^{-1}, %s",scentrality->String().Data()));
@@ -5141,8 +5138,11 @@ void AliAnalysisMuMu::ComputeJpsiYield(const char* binType, const char* what, co
 }
 
 //_____________________________________________________________________________
-void AliAnalysisMuMu::ComputeJpsiMPt(Bool_t relative, const char* evSelInt, const char* evSelDiff,const char* spectra, const char* sResName)
+void AliAnalysisMuMu::ComputeJpsiMPt(Bool_t relative, const char* evSelInt, const char* evSelDiff,const char* spectra, const char* subresultname)
 {
+    ////////////////
+    // OLD METHOD //
+    ////////////////
     // ocMBTrigger is the mergeableCollection with the MB trigger dNchdEta plot (migth be the same as oc, in which case we set ocMBTrigger=0x0)
     //FIXME::Make it general
     // Note that here the ratio is computed from the mean values of subresults (ymean/ymean_int) and is not the mean value of subresults ratios
@@ -5157,7 +5157,7 @@ void AliAnalysisMuMu::ComputeJpsiMPt(Bool_t relative, const char* evSelInt, cons
     if ( sspectra.Contains("DNCHDETA")) swhat = "dnchdeta";   //FIXME::Make it general for any bin quantity (pt,centrality...)
     else if ( sspectra.Contains("NTRCORR") ) swhat = "ntrcorr";
 
-    if ( strlen(sResName) > 0 ) sres = sResName; //sres = "MPTPSIPSIPRIMECB2VWG_BKGMPTPOL2";
+    if ( strlen(subresultname) > 0 ) sres = subresultname; //sres = "MPTPSIPSIPRIMECB2VWG_BKGMPTPOL2";
 
     if ( IsSimulation() )
         {
@@ -5202,7 +5202,6 @@ void AliAnalysisMuMu::ComputeJpsiMPt(Bool_t relative, const char* evSelInt, cons
         return;
         }
 
-
     Double_t JPsiMPtTot = result->GetValue("MeanPtJPsi");
     Double_t JPsiMPtTotError = result->GetErrorStat("MeanPtJPsi");
 
@@ -5340,30 +5339,35 @@ void AliAnalysisMuMu::ComputeJpsiMPt(Bool_t relative, const char* evSelInt, cons
 
     delete hrmPt;
 
-
     return;
 }
 
 //_____________________________________________________________________________
+
 void AliAnalysisMuMu::ComputeMBXSectionFractionInBins(const char* filePileUpCorr, const char* eventSelection, const char* what,const char* quantity
                                                       ,const char* flavour)
 {
-    /// Compute the CMUL to CINT ratio(s) in 2 steps (Offline method) from the CC(), in bins.
-    ///
-    /// Important considerations:
-    ///   - The analysed file must contain the CMUL, CINT, CMSL, CMSL&0MUL and CINT&0MSL triggers to work correctly.
-    ///
-    ///   - The analysed file must contain the event selection PSALL and the one used in the yield analysis (i.e. PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00) to work correctly. (the first to compute the Fnorm and the second to get the NofCMUL used in the yield analysis to get the correct NofEqMB = Fnorm*NofCMUL)
-    ///
-    /// Parameters:
-    ///   -filePileUpCorr: txt file with the pile up correction run by run. Each line in the file must have the format:
-    ///                     RUN 195681 PERIOD LHC13d PILE-UP CORRECTION FACTOR (mu/(1-exp(-mu)) =  1.0015
-    ///   -what: what the binning range is about (J/psi, event...). By default is "psi".
-    ///   -quantity: binning type. By default "ntrcorr"
-    ///   -flavour: binning flavour. By default "D2H"
-    ///   -eventSelection: desired event selection. By default is "PSALL" (no event cuts but physics selection).
-
-
+  ////////////////
+  // OLD METHOD //
+  ////////////////
+/**
+ *   [AliAnalysisMuMu::ComputeMBXSectionFractionInBins description]
+ *   @brief   Compute the CMUL to CINT ratio(s) in 2 steps (Offline method) from the CC(), in bins.
+ *   @details Important considerations:
+ *
+ *   - The analysed file must contain the CMUL, CINT, CMSL, CMSL&0MUL and CINT&0MSL triggers to work correctly.
+ *
+ *
+ *   - The analysed file must contain the event selection PSALL and the one used in the yield analysis (i.e. PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00) to work correctly. (the first to compute the Fnorm and the second to get the NofCMUL used in the yield analysis to get the correct NofEqMB = Fnorm*NofCMUL)
+ *
+ *   OLD METHOD WITH A LOT OF HARD CODED LINES, MAY BE OUTDATED
+ *
+ *   @param   filePileUpCorr txt file with the pile up correction run by run. Each line in the file must have the format : RUN 195681 PERIOD LHC13d PILE-UP CORRECTION FACTOR (mu/(1-exp(-mu)) =  1.0015
+ *   @param   eventSelection desired event selection
+ *   @param   what           what the binning range is about (J/psi, event...). By default is "psi".
+ *   @param   quantity       binning type.
+ *   @param   flavour        binning flavour.
+ */
     //________Decoding of the pileup correction file
     Bool_t corrPU(kFALSE);
     TObjArray* pUCorr = new TObjArray();
@@ -5498,10 +5502,22 @@ Double_t AliAnalysisMuMu::ErrorPropagationAxBoverCxD(Double_t a,Double_t b,Doubl
 }
 
 //_____________________________________________________________________________
-AliAnalysisMuMuSpectra* AliAnalysisMuMu::CorrectSpectra(const char* type, const char* flavour,const char* accEffSubResultName)
+AliAnalysisMuMuSpectra* AliAnalysisMuMu::CorrectSpectra(const char* binType, const char* flavour,const char* accEffSubResultName)
 {
-    /// Correct one spectra
-
+/**
+ *   [AliAnalysisMuMu::CorrectSpectra description]
+ *   @brief   Correct an AliAnalysisMuMuSpectra
+ *   @details Compute AccxEff corrected yield of a 'real' spectra with a 'mc' spectra. Delegate to AliAnalysisMuMuSpectra.
+ *
+ *   Spectra selection made with first entries of config. file keys.
+ *
+ *   DimuonTriggerKey() used to select trigger.
+ *
+ *   @param   binType             [description]
+ *   @param   flavour             [description]
+ *   @param   accEffSubResultName Results from which we take the AccxEff values
+ *   @return  The 'real' spectra with corrected yield values stored in it.
+ */
     if (!SIM()){
       AliError("Cannot compute corrected yield without associated MC file !");
       return 0x0;
@@ -5517,8 +5533,8 @@ AliAnalysisMuMuSpectra* AliAnalysisMuMu::CorrectSpectra(const char* type, const
     TString DimuonTrigger =Config()->First(Config()->DimuonTriggerKey(),kTRUE);
     TString PairSelection =Config()->First(Config()->PairSelectionKey(),kTRUE);
 
-    AliAnalysisMuMuSpectra* realSpectra = GetSpectra(type,flavour);
-    AliAnalysisMuMuSpectra* simSpectra = SIM()->GetMCSpectra(type,Event.Data(),DimuonTrigger.Data(),Centrality.Data(),PairSelection.Data(),flavour);
+    AliAnalysisMuMuSpectra* realSpectra = GetSpectraFromConfig(binType,flavour);
+    AliAnalysisMuMuSpectra* simSpectra = SIM()->GetSpectra(binType,Event.Data(),DimuonTrigger.Data(),Centrality.Data(),PairSelection.Data(),flavour);
 
     if ( !realSpectra ){
       AliError("could not get real spectra");
@@ -5538,11 +5554,20 @@ AliAnalysisMuMuSpectra* AliAnalysisMuMu::CorrectSpectra(const char* type, const
 }
 
 //_____________________________________________________________________________
-AliAnalysisMuMuSpectra* AliAnalysisMuMu::ComputeYield(const char* type, const char* flavour,const char* accEffSubResultName)
+AliAnalysisMuMuSpectra* AliAnalysisMuMu::ComputeYield(const char* binType, const char* flavour,const char* accEffSubResultName)
 {
-    // Compute yield from simulation file
-    //
-    // FIX ME: make it general
+/**
+ *   [AliAnalysisMuMu::ComputeYield description]
+ *   @brief   Compute yield from simulation file
+ *   @details Delegate to AliAnalysisMuMuSpectra. Compute yield using a 'real' spectra and a 'mc' spectra. Spectra are selected using first key entries of the config. file.
+ *
+ *   FIX ME: Make it general.
+ *
+ *   @param   binType             [description]
+ *   @param   flavour             [description]
+ *   @param   accEffSubResultName Results from which we take the AccxEff values
+ *   @return                      The 'real' spectra with a corrected yield entry
+ */
 
     TString Event         =Config()->First(Config()->EventSelectionKey(),kTRUE);
     TString Centrality    =Config()->First(Config()->CentralitySelectionKey(),kTRUE);
@@ -5554,7 +5579,7 @@ AliAnalysisMuMuSpectra* AliAnalysisMuMu::ComputeYield(const char* type, const ch
       return 0x0;
     }
 
-    AliAnalysisMuMuSpectra* realSpectra = GetSpectra(type,flavour);
+    AliAnalysisMuMuSpectra* realSpectra = GetSpectraFromConfig(binType,flavour);
 
     if ( !realSpectra ){
       AliError("could not get real spectra");
@@ -5562,13 +5587,13 @@ AliAnalysisMuMuSpectra* AliAnalysisMuMu::ComputeYield(const char* type, const ch
     }
 
     if (!realSpectra->HasValue("CoffNofJPsi")){
-      if (!CorrectSpectra(type,flavour,accEffSubResultName)){
+      if (!CorrectSpectra(binType,flavour,accEffSubResultName)){
         AliError("Could not get corrected spectra");
         return 0x0;
       }
     }
 
-    AliAnalysisMuMuSpectra* simSpectra = SIM()->GetMCSpectra(type,Event.Data(),DimuonTrigger.Data(),Centrality.Data(),PairSelection.Data(),flavour);
+    AliAnalysisMuMuSpectra* simSpectra = SIM()->GetSpectra(binType,Event.Data(),DimuonTrigger.Data(),Centrality.Data(),PairSelection.Data(),flavour);
 
     if ( !simSpectra){
       AliErrorClass("could not get sim spectra");
@@ -5601,172 +5626,6 @@ AliAnalysisMuMuSpectra* AliAnalysisMuMu::ComputeYield(const char* type, const ch
 }
 
 //_____________________________________________________________________________
-AliAnalysisMuMuSpectra* AliAnalysisMuMu::RABy(const char* type, const char* direction)
-{
-  /// Compute the RAB...
-
-  if (!SIM()) return 0x0;
-
-  Double_t rapidityShift = 0.465;// 0.5*TMath::Log(208.0/82.0);
-  const Double_t sqrts=5.023;
-  const Double_t ymax=TMath::Log(sqrts*1000.0/3.096916);
-  const Double_t tab = 0.093e-6; // nb^-1
-  const Double_t tabError = 0.0035E-6; // nb^-1
-  const char* accEffSubResultName="PSICOUNT:1";
-
-  TF1 ydist("ydist","[0]*TMath::Exp(-(x*x)/(2.0*0.39*0.39))",0.,0.5);
-  ydist.SetParameter(0,1.);
-
-  //Normalization to the values presented by Zaida and Rosana on January 11th 2013 https://indico.cern.ch/conferenceDisplay.py?confId=224985 slide 22
-  // Normalization is done in the rapidity range 2.75<y<3.25 where Rosanas values is 230.8+212.1
-  Double_t y1_norma= 2.75/ymax;
-  Double_t y2_norma= 3.25/ymax;
-  Double_t normalization = 0.25*(230.8+212.1)/ydist.Integral(y1_norma, y2_norma);
-  ydist.SetParameter(0,normalization);
-  //  AliInfoClass(Form("ymax=%e normalization=%f",ymax,ydist.Integral(y1_norma, y2_norma)));
-
-  AliAnalysisMuMuSpectra* realSpectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(Form("/PSALL/CMUL7-B-NOPF-MUON/PP/pMATCHLOWRABSBOTH/PSI-%s",type)));
-  AliAnalysisMuMuSpectra* simSpectra = static_cast<AliAnalysisMuMuSpectra*>(SIM()->OC()->GetObject(Form("/ALL/CMULLO-B-NOPF-MUON/PP/pMATCHLOWRABSBOTH/PSI-%s",type)));
-
-  if ( !realSpectra )
-  {
-    AliErrorClass("could not get real spectra");
-    return 0x0;
-  }
-
-  if ( !simSpectra)
-  {
-    AliErrorClass("could not get sim spectra");
-    return 0x0;
-  }
-
-  AliAnalysisMuMuSpectra* corrSpectra = static_cast<AliAnalysisMuMuSpectra*>(realSpectra->Clone());
-  corrSpectra->Correct(*simSpectra,"Jpsi",accEffSubResultName);
-
-  Double_t nofCMUL7 = CC()->GetSum(Form("trigger:CMUL7-B-NOPF-MUON/event:PSALL"));
-  Double_t nofCINT7 = CC()->GetSum(Form("trigger:CINT7-B-NOPF-ALLNOTRD/event:PSALL"));
-  Double_t nofCINT7w0MUL = CC()->GetSum(Form("trigger:CINT7-B-NOPF-ALLNOTRD&0MUL/event:PSALL"));
-
-  AliAnalysisMuMuBinning* binning = realSpectra->Binning();
-  TObjArray* bins = binning->CreateBinObjArray();
-  TIter nextBin(bins);
-  AliAnalysisMuMuBinning::Range* bin;
-  Int_t i(0);
-  AliAnalysisMuMuJpsiResult* r;
-
-  Int_t n = bins->GetLast();
-
-  TObjArray finalBins(n+1);
-  finalBins.SetOwner(kTRUE);
-
-  TObjArray finalResults(n+1);
-  finalResults.SetOwner(kFALSE);
-
-  while ( ( bin = static_cast<AliAnalysisMuMuBinning::Range*>(nextBin()) ) )
-  {
-    Double_t ylowlab = bin->Xmin();
-    Double_t yhighlab = bin->Xmax();
-
-    Double_t ylowcms, yhighcms;
-    Double_t ylownorm, yhighnorm;
-
-    if ( bin->IsIntegrated() )
-    {
-      ylowlab = -4;
-      yhighlab = -2.5;
-    }
-
-    if ( strcmp(direction,"pPb")==0 )
-    {
-      ylowcms = TMath::Abs(yhighlab) -  rapidityShift;
-      yhighcms = TMath::Abs(ylowlab) - rapidityShift;
-      ylownorm = ylowcms/ymax;
-      yhighnorm = yhighcms/ymax;
-    }
-    else
-    {
-      ylowcms = ylowlab - rapidityShift;
-      yhighcms = yhighlab - rapidityShift;
-      ylownorm = -yhighcms/ymax;
-      yhighnorm = -ylowcms/ymax;
-    }
-
-
-    Double_t brsigmapp = ydist.Integral(ylownorm,yhighnorm);
-    Double_t brsigmappError = 0.0; // FIXME
-
-    AliAnalysisMuMuSpectra* realSpectra = static_cast<AliAnalysisMuMuSpectra*>(OC()->GetObject(Form("/PSALL/CMUL7-B-NOPF-MUON/PP/pMATCHLOWRABSBOTH/PSI-%s",type)));
-    AliAnalysisMuMuSpectra* simSpectra = static_cast<AliAnalysisMuMuSpectra*>(SIM()->OC()->GetObject(Form("/ALL/CMULLO-B-NOPF-MUON/PP/pMATCHLOWRABSBOTH/PSI-%s",type)));
-
-    if ( !realSpectra )
-        {
-        AliErrorClass("could not get real spectra");
-        return 0x0;
-        }
-
-
-    AliAnalysisMuMuJpsiResult* rsim = static_cast<AliAnalysisMuMuJpsiResult*>(simSpectra->BinContentArray()->At(i));
-
-    Double_t mbeq = nofCINT7w0MUL / ( nofCINT7 * nofCMUL7);
-    Double_t mbeqError = mbeq * AliAnalysisMuMuResult::ErrorABC( nofCINT7w0MUL, TMath::Sqrt(nofCINT7w0MUL),
-                                         nofCINT7,TMath::Sqrt(nofCINT7),
-                                         nofCMUL7,TMath::Sqrt(nofCMUL7));
-
-    r->Set("Fnorm",nofCINT7/nofCINT7w0MUL,(nofCINT7/nofCINT7w0MUL)*AliAnalysisMuMuResult::ErrorAB( nofCINT7w0MUL, TMath::Sqrt(nofCINT7w0MUL),
-                                                                      nofCINT7,TMath::Sqrt(nofCINT7)));
-
-    Double_t yield =  r->GetValue("CorrNofJpsi") * mbeq;
-
-    Double_t yieldError = yield * AliAnalysisMuMuResult::ErrorAB( r->GetValue("CorrNofJpsi"), r->GetErrorStat("CorrNofJpsi"),
-                                          mbeq,mbeqError);
-
-    r->Set(Form("Y%sJpsi",direction),yield,yieldError);
-
-    Double_t raa = yield/(tab*brsigmapp);
-    Double_t raaError = AliAnalysisMuMuResult::ErrorABC(yield,yieldError,
-                                                        tab,tabError,
-                                                        brsigmapp,brsigmappError);
-    r->Set(Form("R%sJpsi",direction),raa,raaError);
-
-    r->Set("NofInputJpsi",rsim->GetValue("NofInputJpsi",accEffSubResultName),rsim->GetErrorStat("NofInputJpsi",accEffSubResultName));
-    r->Set("AccEffJpsi",rsim->GetValue("AccEffJpsi",accEffSubResultName),rsim->GetErrorStat("AccEffJpsi",accEffSubResultName));
-
-    AliAnalysisMuMuBinning::Range* bincm = new AliAnalysisMuMuBinning::Range(bin->What(),bin->Quantity(),ylowcms,yhighcms);
-
-    r->SetBin(*bincm);
-
-    finalBins.Add(bincm);
-    finalResults.Add(r);
-
-    ++i;
-  }
-
-  delete bins;
-
-  AliAnalysisMuMuSpectra* spectra = new AliAnalysisMuMuSpectra(type,direction);
-
-  for ( i = 0; i <= n; ++i )
-  {
-    Int_t j(i);
-    if ( strcmp(direction,"pPb")==0 )
-    {
-      j = n-i;
-    }
-
-    r = static_cast<AliAnalysisMuMuJpsiResult*>(finalResults.At(j));
-
-    bin = static_cast<AliAnalysisMuMuBinning::Range*>(finalBins.At(j));
-
-    spectra->AdoptResult(*bin,r);
-  }
-
-
-  delete corrSpectra;
-
-  return spectra;
-}
-
-//_____________________________________________________________________________
 void AliAnalysisMuMu::SetConfig(const AliAnalysisMuMuConfig& config)
 {
   /// (re)set the config
@@ -5814,48 +5673,3 @@ void AliAnalysisMuMu::GetFileNameAndDirectory(const char* filename)
     fDirectory = fDirectory(colon+1,strlen(filename)-colon);
   }
 }
-
-void  AliAnalysisMuMu::LoadStyles(){
-  int font = 42;
-  gROOT->SetStyle("Plain");
-  gStyle->SetFrameBorderMode(0);
-  gStyle->SetFrameFillColor(0);
-  gStyle->SetCanvasBorderMode(0);
-  gStyle->SetPadBorderMode(0);
-  gStyle->SetPadColor(10);
-  gStyle->SetCanvasColor(10);
-  gStyle->SetTitleFillColor(10);
-  gStyle->SetTitleBorderSize(1);
-  gStyle->SetStatColor(10);
-  gStyle->SetStatBorderSize(1);
-  gStyle->SetLegendBorderSize(1);
-  gStyle->SetDrawBorder(0);
-  gStyle->SetTextFont(font);
-  gStyle->SetStatFont(font);
-  gStyle->SetStatFontSize(0.05);
-  gStyle->SetStatX(0.97);
-  gStyle->SetStatY(0.98);
-  gStyle->SetStatH(0.03);
-  gStyle->SetStatW(0.3);
-  gStyle->SetTickLength(0.02,"y");
-  gStyle->SetEndErrorSize(3);
-  gStyle->SetLabelSize(0.05,"xyz");
-  gStyle->SetLabelFont(font,"xyz");
-  gStyle->SetLabelOffset(0.01,"xyz");
-  gStyle->SetTitleFont(font,"xyz");
-  gStyle->SetTitleOffset(1.1,"xy");
-  gStyle->SetTitleSize(0.05,"xyz");
-  gStyle->SetMarkerSize(1.3);
-  gStyle->SetPalette(1,0);
-  gROOT->ForceStyle();
-  gStyle->SetOptStat(0);
-  gStyle->SetOptTitle(0);
-  gStyle->SetLineWidth(2);
-  gStyle->SetLegendFont(42);
-  gStyle->SetLegendBorderSize(0);
-  gStyle->SetLegendFillColor(10);
-  gStyle->SetPadTickY(1);
-  gStyle->SetPadTickX(1);
-  gStyle->SetEndErrorSize(0);
-
-}
diff --git a/PWG/muondep/AliAnalysisMuMu.h b/PWG/muondep/AliAnalysisMuMu.h
index a383f66..3dd9dcc 100644
--- a/PWG/muondep/AliAnalysisMuMu.h
+++ b/PWG/muondep/AliAnalysisMuMu.h
@@ -6,11 +6,30 @@
 
 // $Id$
 
-///
-/// AliAnalysisMuMu : Facade class of all subclass called to digest/plot/massage results from
-/// AliAnalysisTaskMuMu
-///
-/// author : Laurent Aphecetche (Subatech), Javier Martin Blanco, Benjamin Audurier
+/**
+* @class AliAnalysisMuMu
+*
+* @brief   Facade class of all subclass called to digest/plot/massage results from AliAnalysisTaskMuMu
+*
+* @details This class calls other classes from the offline AliAnalysisMuMu framework to read/analysis/play with the output file from the online AliAnalysisMuMu framework.
+*
+*  Methods are mostly writen as interlocked loops over event/trigger/centrality/cut and delegate (usually) the task to another class.
+*
+* In the case of results from simulations, the file.root should contain the name of the particle ( for instance AnalysisResults.JPSI.root )
+* Some considerations  :
+*
+*    - A config. file is used for more flexibility in the loop process. See AliAnalysisMuMuConfig For detailsand the different keys.
+*
+*
+*   - Associated files ( results from simulation ) can be used. Some methods needs to compare Data vs MC ( for instance AccxEff calculation )
+*
+*
+*   - By convention, bin type ('pt', 'y', 'integrated' ... ) are minuscule when comming directly from the output file from the online part, and MAJUSCULE when computed from the offline part. See default values.
+*
+* @author Laurent Aphecetche, Subatech
+* @author Javier Martin Blanco, Subatech
+* @author Benjamin Audurier, Subatech
+**/
 
 #include "AliAnalysisMuMuBinning.h"
 #include "AliAnalysisMuMuFnorm.h"
@@ -52,6 +71,7 @@ public:
 
     virtual ~AliAnalysisMuMu();
 
+
     /* Basic checks */
     void BasicCounts(
       Bool_t detailTrigger=kFALSE,
@@ -73,19 +93,20 @@ public:
       const char* pairCut,
       const char* centrality,
       const AliAnalysisMuMuBinning& binning,
-      const char* spectraType="minv",
-      Bool_t corrected=kFALSE);
+      Bool_t corrected        =kFALSE,
+      const TString* fitMethod = 0x0,
+      const char* flavour ="",
+      const char* histoType ="minv");
 
     AliAnalysisMuMuSpectra* CorrectSpectra(
-      const char* type,
+      const char* binType,
       const char* flavour="",
       const char* accEffSubResultName="");
 
     void PrintDistribution(
       const char              * binType="Y",
       const char              * what="NofJPsi",
-      const char              * sResName="",
-      const char              * ColSys="PbPb",
+      const char              * subresultname="",
       Bool_t divideByBinWidth =kTRUE,
       Bool_t AccEffCorr       =kFALSE);
 
@@ -94,7 +115,6 @@ public:
       const char* param = "mJPsi",
       const char* binType="PT",
       const char* subresult="CB2VWG_2.4_4.5_SP1.2",
-      const char* printDirectoryPath="",
       Bool_t AccEffCorr =kFALSE
       )const;
 
@@ -121,17 +141,8 @@ public:
       const char       * triggerSel="ANY",
       Bool_t bkgReject =kTRUE);
 
-    void ComputeFnorm();
-
     void ComputeNumberOfEvent();
 
-    void ComputeMeanFnorm(
-      const char* triggerCluster="MUON",
-      const char* eventSelection="PSALL",
-      const char* what="psi",
-      const char* quantity="ntrcorr",
-      const char* flavour="D2H");
-
     void ComputeFnormWeightedMeanGraphs(
       AliAnalysisMuMuFnorm::ETriggerType refTrigger = AliAnalysisMuMuFnorm::kMUL,
       const char          * patternOrList= "",
@@ -145,22 +156,12 @@ public:
       AliAnalysisMuMuFnorm::ETriggerType refTrigger = AliAnalysisMuMuFnorm::kMUL,
       Bool_t PileUpCorr =kFALSE);
 
-    void PlotYiedWSyst(const char* triggerCluster="MUON");
-
-    void ComputeRelativeValueAndSESystematics(
-      const char* quantity,const char* flavour,const char* value2Test,
-      const char* binListToExclude,
-      const char* fNormType="mean",
-      const char* evSelInt="PSALL",
-      const char* evSelDiff="PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00",
-      const char* triggerCluster="MUON");
-
     void ComputeJpsiYield(
       const char        * binType="INTEGRATED",
       const char        * what="NofJPsi",
       const char        * externfile1="externFile_PT.txt",
       const char        * externfile2="externFile_CENT.txt",
-      const char        * sResName="",
+      const char        * subresultname="",
       const char        * beamYear="",
       Bool_t AccEffCorr =kFALSE);
 
@@ -169,7 +170,7 @@ public:
       const char* evSelInt="PSALL",
       const char* evSelDiff="PSALLHASSPDSPDZQA_RES0.25_ZDIF0.50SPDABSZLT10.00",
       const char* spectra="PSI-NTRCORR-AccEffCorr-MeanPtVsMinvUS",
-      const char* sResName="");
+      const char* subresultname="");
 
     void ComputeMBXSectionFractionInBins(
       const char* filePileUpCorr="",
@@ -182,12 +183,14 @@ public:
 
     void TwikiOutputFnorm(const char* series="FnormOffline2PUPS,FnormScalersPUPS,FnormBest2,RelDifFnormScalersPUPSvsFnormOffline2PUPS,FnormScalersPUVDM,RelDifFnormScalersPUPSvsFnormScalersPUVDM") const;
 
-    AliAnalysisMuMuSpectra* ComputeYield(const char* type, const char* flavour="",const char* accEffSubResultName="PSICB2");
+    AliAnalysisMuMuSpectra* ComputeYield(const char* binType, const char* flavour="",const char* accEffSubResultName="PSICB2");
 
     void CleanAllSpectra();
 
     void CleanFNorm();
 
+    void CleanMix();
+
     void RAAasGraphic(
       const char        * particle="PSI",
       const char        * binType="PT",
@@ -198,40 +201,29 @@ public:
       Bool_t AccEffCorr =kFALSE)const;
 
     void DrawFitResults(
-      const char        * particle="PSI",
-      const char        * binType="INTEGRATED",
+      const char        * spectraName="PSI-INTEGRATED",
       const char        * subresults="",
+      Bool_t              mix       =kFALSE,
       Bool_t AccEffCorr =kFALSE)const;
 
-    void PrintNofParticle(
-      const char        * particle="PSI",
+    void PrintNofWhat(
       const char        * what="NofJPsi",
-      const char        * binType="PT",
+      const char        * spectraName="PSI-INTEGRATED",
+      Bool_t mix        =kFALSE,
       Bool_t AccEffCorr =kFALSE) const;
 
-    AliAnalysisMuMuSpectra* RABy(const char* type="", const char* direction="pPb");
-
     TGraph* PlotEventSelectionEvolution(
-    const char         * trigger1="CINT7-B-NOPF-MUON",
-    const char         * event1="PSALL",
-    const char         * trigger2="CINT7-B-NOPF-MUON",
-    const char         * event2="PSALL",
-    Bool_t drawFills   =kFALSE,
-    Bool_t asRejection =kTRUE) const;
+      const char         * trigger1="CINT7-B-NOPF-MUON",
+      const char         * event1="PSALL",
+      const char         * trigger2="CINT7-B-NOPF-MUON",
+      const char         * event2="PSALL",
+      Bool_t drawFills   =kFALSE,
+      Bool_t asRejection =kTRUE) const;
 
     Bool_t Upgrade();
 
     Bool_t Upgrade(const char* filename);
 
-    TObjArray* CompareJpsiPerCMUUWithBackground(
-      const char* jpsiresults="results.root",
-      const char* backgroundresults="background.lhc11d.root");
-
-    TGraph* CompareJpsiPerCMUUWithSimu(
-      const char* realjpsiresults="results.root",
-      const char* simjpsiresults="results.sim.root");
-
-
     static TFile* FileOpen(const char* file);
 
     static TString ExpandPathName(const char* file);
@@ -244,19 +236,19 @@ public:
       AliAnalysisMuMuBinning*& bin,
       std                   ::set<int>& runnumbers);
 
-    AliAnalysisMuMuSpectra* GetSpectra(
-      const char* what,
+    AliAnalysisMuMuSpectra* GetSpectraFromConfig(
+      const char* binType,
       const char* flavour="") const;
 
-    AliAnalysisMuMuSpectra* GetMCSpectra(
-      const char* what ,
+    AliAnalysisMuMuSpectra* GetSpectra(
+      const char* binType ,
       const char* EventSelection ="ALL" ,
       const char* DimuonTrigger="ANY",
       const char* Centrality="V0A",
       const char* PairSelectionKey="pALLPAIRYPAIRPTIN0.0-12.0RABSMATCHLOWETAPDCA",
       const char* flavour="BENJ") const;
 
-    TH1* PlotAccEfficiency(const char* whatever="PSI-INTEGRATED");
+    TH1* PlotAccEfficiency(const char* SpectraName="PSI-INTEGRATED");
 
     UInt_t GetSum(
       AliCounterCollection& cc,
@@ -266,11 +258,11 @@ public:
 
     ULong64_t GetTriggerScalerCount(const char* triggerList, Int_t runNumber);
 
-    Int_t Jpsi(
-      const char           * what="integrated",
-      const char           * binningFlavour="",
-      Bool_t fitmPt        =kTRUE,
-      Bool_t onlyCorrected =kTRUE);
+    Int_t FitJpsi(
+      const char* binType      ="integrated",
+      const char* flavour      ="BENJ",
+      const TString fitMethod  ="",
+      const char* histoType    ="minv");
 
     Bool_t IsSimulation() const;
 
@@ -278,10 +270,26 @@ public:
     AliCounterCollection  * CC() const { return fCounterCollection; }
     AliAnalysisMuMuBinning* BIN() const { return fBinning; }
 
+    void NormMixedMinv(
+      const char       * binType="integrated",
+      const char       * particle ="psi",
+      const char       * flavour="",
+      Bool_t corrected =kFALSE,
+      Double_t Mmin =2.0,
+      Double_t Mmax= 5.0);
+
     void Print(Option_t* opt="") const;
 
     const std::set<int>& RunNumbers() const { return fRunNumbers; }
 
+    void DivideRawMixHisto(
+      const char       * binType="integrated",
+      const char       * particle ="psi",
+      const char       * flavour="",
+      Bool_t corrected =kFALSE,
+      Double_t Mmin =2.0,
+      Double_t Mmax= 5.0);
+
     void DrawMinv(
       const char* type,
       const char* particle,
@@ -318,8 +326,6 @@ public:
 
     void Update();
 
-    // AliAnalysisMuMuConfig* Config();
-
     AliAnalysisMuMuConfig* Config() const { return fConfig; }
 
     void SetConfig(const AliAnalysisMuMuConfig& config);
@@ -349,8 +355,6 @@ private:
 
     void GetFileNameAndDirectory(const char* filename);
 
-    void LoadStyles();
-
 private:
 
     void SetNofInputParticles(AliAnalysisMuMuJpsiResult& r);
diff --git a/PWG/muondep/AliAnalysisMuMuConfig.cxx b/PWG/muondep/AliAnalysisMuMuConfig.cxx
index 7fa2f1f..a9be59d 100644
--- a/PWG/muondep/AliAnalysisMuMuConfig.cxx
+++ b/PWG/muondep/AliAnalysisMuMuConfig.cxx
@@ -16,18 +16,6 @@
 
 // $Id$
 
-// AliAnalysisMuMuConfig : class to hold various configuration
-// options for the AliAnalysisMuMu and AliAnalysisMuMuEvolution classes
-// like the list of triggers to consider, the fit to be performed, etc...
-// both for real data and for simulations (which might differ in e.g.
-// the naming of the triggers)
-//
-// author: Laurent Aphecetche, Subatech
-//
-//
-// TODO : make it readeable/writeable from/to a simple ASCII file ?
-//
-
 #include "AliAnalysisMuMuConfig.h"
 #include "TObjArray.h"
 #include "TObjString.h"
@@ -40,6 +28,7 @@
 #include <cassert>
 #include "TMap.h"
 #include "THashList.h"
+#include "TROOT.h"
 
 ClassImp(AliAnalysisMuMuConfig)
 
@@ -91,6 +80,10 @@ namespace {
         {
         std::cout << "MB=" << map.find(AliAnalysisMuMuConfig::kMBTriggerClassName)->second << " ";
         }
+    if ( map.count(AliAnalysisMuMuConfig::kMIXTriggerClassName) )
+        {
+        std::cout << "MIX=" << map.find(AliAnalysisMuMuConfig::kMIXTriggerClassName)->second << " ";
+        }
     if ( map.count(AliAnalysisMuMuConfig::kMULTriggerClassName) )
         {
         std::cout << "MUL=" << map.find(AliAnalysisMuMuConfig::kMULTriggerClassName)->second << " ";
@@ -112,15 +105,20 @@ namespace {
 
 }
 
-const char* AliAnalysisMuMuConfig::DimuonTriggerKey() const { return "DimuonTrigger"; }
-const char* AliAnalysisMuMuConfig::MuonTriggerKey() const { return "MuonTrigger"; }
-const char* AliAnalysisMuMuConfig::MinbiasTriggerKey() const { return  "MinbiasTrigger"; }
-const char* AliAnalysisMuMuConfig::EventSelectionKey() const { return "EventSelection"; }
-const char* AliAnalysisMuMuConfig::PairSelectionKey() const { return "PairSelection"; }
+const char* AliAnalysisMuMuConfig::RefMixTriggerKey()       const { return "RefMixTrigger"; }
+const char* AliAnalysisMuMuConfig::RefMixEventSelectionKey()const { return "RefMixEventSelection"; }
+const char* AliAnalysisMuMuConfig::DimuonTriggerKey()       const { return "DimuonTrigger"; }
+const char* AliAnalysisMuMuConfig::MuonTriggerKey()         const { return "MuonTrigger"; }
+const char* AliAnalysisMuMuConfig::MinbiasTriggerKey()      const { return "MinbiasTrigger"; }
+const char* AliAnalysisMuMuConfig::MixTriggerKey()          const { return "MixTrigger"; }
+const char* AliAnalysisMuMuConfig::EventSelectionKey()      const { return "EventSelection"; }
+const char* AliAnalysisMuMuConfig::EventSelectionMixKey()   const { return "EventSelectionMix"; }
+const char* AliAnalysisMuMuConfig::PairSelectionKey()       const { return "PairSelection"; }
 const char* AliAnalysisMuMuConfig::CentralitySelectionKey() const { return "Centrality"; }
-const char* AliAnalysisMuMuConfig::FitTypeKey() const { return "FitType"; }
-const char* AliAnalysisMuMuConfig::CompactGraphKey() const { return "CompactGraphs"; }
-const char* AliAnalysisMuMuConfig::OCDBPathKey() const { return "OCDBPath"; }
+const char* AliAnalysisMuMuConfig::FitTypeKey()             const { return "FitType"; }
+const char* AliAnalysisMuMuConfig::FitSingleKey()           const { return "FitSingle"; }
+const char* AliAnalysisMuMuConfig::CompactGraphKey()        const { return "CompactGraphs"; }
+const char* AliAnalysisMuMuConfig::OCDBPathKey()            const { return "OCDBPath"; }
 
 //_____________________________________________________________________________
 AliAnalysisMuMuConfig::AliAnalysisMuMuConfig() : TObject(),
@@ -237,6 +235,8 @@ void AliAnalysisMuMuConfig::Clear(Option_t*)
 //_____________________________________________________________________________
 TString AliAnalysisMuMuConfig::First(const char* key, Bool_t simulation) const
 {
+    /// Get the first element of a key
+
     THashList* list = static_cast<THashList*>(Map()->GetValue(key));
     TIter next(list);
     TObjString* s;
@@ -269,6 +269,16 @@ TString AliAnalysisMuMuConfig::GetMBTriggerClassName(Int_t runNumber) const
 }
 
 //_____________________________________________________________________________
+TString AliAnalysisMuMuConfig::GetMIXTriggerClassName(Int_t runNumber) const
+{
+    if ( fPerRunInfo.count(runNumber) )
+    {
+    return (fPerRunInfo.find(runNumber)->second).find(kMIXTriggerClassName)->second;
+    }
+    return "";
+}
+
+//_____________________________________________________________________________
 TString AliAnalysisMuMuConfig::GetMULTriggerClassName(Int_t runNumber) const
 {
     if ( fPerRunInfo.count(runNumber) )
@@ -311,83 +321,97 @@ TString AliAnalysisMuMuConfig::GetCentralityName(Int_t runNumber) const
 
 }
 
-#if 0
 //_____________________________________________________________________________
-void AliAnalysisMuMuConfig::GetDimuonPaths(TObjArray& paths, Bool_t simulation) const
+TObjArray* AliAnalysisMuMuConfig::GetListElements(const char* key, Bool_t simulation) const
 {
-    /// Fill the paths array with the paths /event/trigger/paircut/centrality
+    /// Get list as an array (to be deleted by the user)
 
-    paths.Clear();
+    TObjArray* a = new TObjArray;
+    a->SetOwner(kTRUE);
 
-    TObjArray* triggerArray = GetListElements(DimuonTriggerKey(),simulation);
-    TObjArray* eventTypeArray = GetListElements(EventSelectionKey(),simulation);
-    TObjArray* pairCutArray = GetListElements(PairSelectionKey(),simulation);
-    TObjArray* centralityArray = GetListElements(CentralitySelectionKey(),simulation);
+    THashList* list = static_cast<THashList*>(Map()->GetValue(key));
 
-    TIter nextTrigger(triggerArray);
-    TIter nextEventType(eventTypeArray);
-    TIter nextPairCut(pairCutArray);
-    TIter nextCentrality(centralityArray);
+    TIter next(list);
+    TObjString* s;
+    TString rv;
+    UInt_t test(kReal);
 
-    TObjString* trigger;
-    TObjString* eventType;
-    TObjString* pairCut;
-    TObjString* centrality;
+    if ( simulation )
+    {
+    test = kSim;
+    }
 
-    while ( ( trigger = static_cast<TObjString*>(nextTrigger())) )
+    while ( ( s = static_cast<TObjString*>(next()) ) )
     {
-    nextEventType.Reset();
-    while ( ( eventType = static_cast<TObjString*>(nextEventType())) )
+    if ( s->GetUniqueID() & test )
         {
-        nextPairCut.Reset();
-        while ( ( pairCut = static_cast<TObjString*>(nextPairCut())) )
-            {
-            nextCentrality.Reset();
-            while ( ( centrality = static_cast<TObjString*>(nextCentrality()) ) )
-                {
-                paths.Add(new TObjString(Form("/%s/%s/%s/%s/",eventType->String().Data(),
-                                              trigger->String().Data(),
-                                              centrality->String().Data(),
-                                              pairCut->String().Data())));
-                }
-            }
+        a->Add(new TObjString(*s));
         }
     }
-
-    delete triggerArray;
-    delete eventTypeArray;
-    delete pairCutArray;
-    delete centralityArray;
+    return a;
 }
-#endif
 
 //_____________________________________________________________________________
-TObjArray* AliAnalysisMuMuConfig::GetListElements(const char* key, Bool_t simulation) const
+TObjArray* AliAnalysisMuMuConfig::GetTriggersList(Bool_t simulation) const
 {
     /// Get list as an array (to be deleted by the user)
 
     TObjArray* a = new TObjArray;
     a->SetOwner(kTRUE);
 
-    THashList* list = static_cast<THashList*>(Map()->GetValue(key));
+    TObjArray* list = new TObjArray();
+    TObjArray* list1 = static_cast<TObjArray*>(Map()->GetValue(RefMixTriggerKey()));
+    TObjArray* list2 = static_cast<TObjArray*>(Map()->GetValue(DimuonTriggerKey()));
+    TObjArray* list3 = static_cast<TObjArray*>(Map()->GetValue(MuonTriggerKey()));
+    TObjArray* list4 = static_cast<TObjArray*>(Map()->GetValue(MinbiasTriggerKey()));
+    TObjArray* list5 = static_cast<TObjArray*>(Map()->GetValue(MixTriggerKey()));
+
+    if(list1){
+        for (int i = 0; i < list1->GetEntries(); ++i){
+            if ( !list->Contains(list1->At(i)->GetName()) )
+                list->Add(list1->At(i)->Clone());
+        }
+    }
+
+    if(list2){
+        for (int i = 0; i < list2->GetEntries(); ++i){
+            if ( !list->Contains(list2->At(i)->GetName()) )
+                list->Add(list2->At(i)->Clone());
+        }
+    }
+
+    if(list3){
+        for (int i = 0; i < list3->GetEntries(); ++i){
+            if ( !list->Contains(list3->At(i)->GetName()) )
+                list->Add(list3->At(i)->Clone());
+        }
+    }
+
+    if(list4){
+        for (int i = 0; i < list4->GetEntries(); ++i){
+            if ( !list->Contains(list4->At(i)->GetName()) )
+                list->Add(list4->At(i)->Clone());
+        }
+    }
+
+    if(list5){
+        for (int i = 0; i < list5->GetEntries(); ++i){
+            if ( !list->Contains(list5->At(i)->GetName()) )
+                list->Add(list5->At(i)->Clone());
+        }
+    }
 
     TIter next(list);
     TObjString* s;
     TString rv;
     UInt_t test(kReal);
 
-    if ( simulation )
-    {
-    test = kSim;
-    }
+    if ( simulation ) test = kSim;
 
     while ( ( s = static_cast<TObjString*>(next()) ) )
-    {
-    if ( s->GetUniqueID() & test )
-        {
-        a->Add(new TObjString(*s));
-        }
-    }
+        if ( s->GetUniqueID() & test )
+            a->Add(new TObjString(*s));
+
     return a;
 }
 
@@ -400,6 +424,10 @@ TString AliAnalysisMuMuConfig::GetTriggerClassName(ETriggerType tt, Int_t runNum
     {
     return GetMBTriggerClassName(runNumber);
     }
+    if ( tt == kMIX )
+    {
+    return GetMIXTriggerClassName(runNumber);
+    }
     else if ( tt == kMUL )
     {
     return GetMULTriggerClassName(runNumber);
@@ -427,6 +455,10 @@ TString AliAnalysisMuMuConfig::GetTriggerTypeName(ETriggerType tt)
     {
     return "MB";
     }
+    if ( tt == kMIX )
+    {
+    return "MIX";
+    }
     else if ( tt == kMUL )
     {
     return "MUL";
@@ -615,6 +647,10 @@ void AliAnalysisMuMuConfig::SetRunInfo(const TString& runranges, const TString&
         {
         mapForOneRun[kMBTriggerClassName]=value;
         }
+    if (!key.CompareTo("MIX",TString::kIgnoreCase))
+        {
+        mapForOneRun[kMIXTriggerClassName]=value;
+        }
     if (!key.CompareTo("MUL",TString::kIgnoreCase))
         {
         mapForOneRun[kMULTriggerClassName]=value;
@@ -659,13 +695,18 @@ void AliAnalysisMuMuConfig::ReadFromFile(const char* inputfile)
 
     std::vector<TString> selectionKeys;
 
+    selectionKeys.push_back(RefMixTriggerKey());
+    selectionKeys.push_back(RefMixEventSelectionKey());
     selectionKeys.push_back(DimuonTriggerKey());
     selectionKeys.push_back(MuonTriggerKey());
     selectionKeys.push_back(MinbiasTriggerKey());
+    selectionKeys.push_back(MixTriggerKey());
     selectionKeys.push_back(EventSelectionKey());
+    selectionKeys.push_back(EventSelectionMixKey());
     selectionKeys.push_back(PairSelectionKey());
     selectionKeys.push_back(CentralitySelectionKey());
     selectionKeys.push_back(FitTypeKey());
+    selectionKeys.push_back(FitSingleKey());
 
     // read per run info
     while (std::getline(in,line))
@@ -750,3 +791,50 @@ void AliAnalysisMuMuConfig::SetColorScheme()
 }
 
 
+// _____________________________________________________________________________
+void  AliAnalysisMuMuConfig::LoadAliceStyles(){
+  int font = 42;
+  gROOT->SetStyle("Plain");
+  gStyle->SetFrameBorderMode(0);
+  gStyle->SetFrameFillColor(0);
+  gStyle->SetCanvasBorderMode(0);
+  gStyle->SetPadBorderMode(0);
+  gStyle->SetPadColor(10);
+  gStyle->SetCanvasColor(10);
+  gStyle->SetTitleFillColor(10);
+  gStyle->SetTitleBorderSize(1);
+  gStyle->SetStatColor(10);
+  gStyle->SetStatBorderSize(1);
+  gStyle->SetLegendBorderSize(1);
+  gStyle->SetDrawBorder(0);
+  gStyle->SetTextFont(font);
+  gStyle->SetStatFont(font);
+  gStyle->SetStatFontSize(0.05);
+  gStyle->SetStatX(0.97);
+  gStyle->SetStatY(0.98);
+  gStyle->SetStatH(0.03);
+  gStyle->SetStatW(0.3);
+  gStyle->SetTickLength(0.02,"y");
+  gStyle->SetEndErrorSize(3);
+  gStyle->SetLabelSize(0.05,"xyz");
+  gStyle->SetLabelFont(font,"xyz");
+  gStyle->SetLabelOffset(0.01,"xyz");
+  gStyle->SetTitleFont(font,"xyz");
+  gStyle->SetTitleOffset(1.1,"xy");
+  gStyle->SetTitleSize(0.05,"xyz");
+  gStyle->SetMarkerSize(1.3);
+  gStyle->SetPalette(1,0);
+  gROOT->ForceStyle();
+  gStyle->SetOptStat(0);
+  gStyle->SetOptTitle(0);
+  gStyle->SetLineWidth(2);
+  gStyle->SetLegendFont(42);
+  gStyle->SetLegendBorderSize(0);
+  gStyle->SetLegendFillColor(10);
+  gStyle->SetPadTickY(1);
+  gStyle->SetPadTickX(1);
+  gStyle->SetEndErrorSize(0);
+
+}
+
+
diff --git a/PWG/muondep/AliAnalysisMuMuConfig.h b/PWG/muondep/AliAnalysisMuMuConfig.h
index f755831..a8c6268 100644
--- a/PWG/muondep/AliAnalysisMuMuConfig.h
+++ b/PWG/muondep/AliAnalysisMuMuConfig.h
@@ -6,11 +6,22 @@
 
 // $Id$
 
-///
-/// AliAnalysisMuMuConfig : helper class to store steering options
-/// for the AliAnalysisMuMu and AliAnalysisMuMuEvolution classes
-///
-/// author : Laurent Aphecetche (Subatech)
+/**
+*   @class AliAnalysisMuMuConfig
+*
+*   @brief  helper class to store steering options for the AliAnalysisMuMu and AliAnalysisMuMuEvolution classes
+*
+*   @details THis class reads an extern file config.mumu. Each line should be written as <key> : <value> <type>
+*
+*   #DimuonTrigger: CMUL8-S-NOPF-MUON real sim
+*   MuonTrigger : CMSL7-8-NOPF-MUON sim
+*   MuonTrigger : CMSL7-7-NOPF-MUON sim
+*
+*   TODO : make it readeable/writeable from/to a simple ASCII file ?
+*
+*   @author : Laurent Aphecetche (Subatech)
+*   @author : Benjamin Audurier (Subatech)
+**/
 
 #include "TObject.h"
 #include "TString.h"
@@ -38,7 +49,8 @@ public:
     kMB=1,
     kMUL=2,
     kMSL=3,
-    kMSH=4
+    kMSH=4,
+    kMIX=5
   };
 
   enum EPerRunInfo
@@ -47,7 +59,9 @@ public:
     kMULTriggerClassName,
     kMSLTriggerClassName,
     kMSHTriggerClassName,
-    kCentralityName
+    kCentralityName,
+    kMIXTriggerClassName
+
   };
 
   AliAnalysisMuMuConfig();
@@ -68,6 +82,8 @@ public:
   TString GetTriggerClassName(ETriggerType tt, Int_t runNumber) const;
   /** Get the name of the Minimum Bias (MB) trigger class */
   TString GetMBTriggerClassName(Int_t runNumber) const;
+  /** Get the name of the Mix trigger class */
+  TString GetMIXTriggerClassName(Int_t runNumber) const;
   /** Get the name of the dimuon unlike sign (MUL) trigger class */
   TString GetMULTriggerClassName(Int_t runNumber) const;
   /** Get the name of the single muon low pt threshold (MSL) trigger class */
@@ -108,20 +124,30 @@ public:
    *  Valid keys to be used in the configuration file or in the query methods
    */
   ///@{
+  /// Used to specify the list of specific trigger classnames used
+  const char* RefMixTriggerKey() const;
+  /// Used to specify the list of specific trigger classnames used
+  const char* RefMixEventSelectionKey() const;
   /// Used to specify the list of dimuon trigger classnames used
   const char* DimuonTriggerKey() const;
   /// Used to specify the list of single muon trigger classnames used
   const char* MuonTriggerKey() const;
   /// Used to specify the list of minimum bias trigger classnames used
   const char* MinbiasTriggerKey() const;
+  /// Used to specify the list of mix trigger classnames used
+  const char* MixTriggerKey() const;
   /// Used to specify the list of event selections used
   const char* EventSelectionKey() const;
+  /// Used to specify the list of event selections used for mixing
+  const char* EventSelectionMixKey() const;
   /// Used to specify the list of pair selections used
   const char* PairSelectionKey() const;
   /// Used to specify the list of centralities used
   const char* CentralitySelectionKey() const;
   /// Used to specify the list of fits used
   const char* FitTypeKey() const;
+  /// Used to specify a particular fit used
+  const char* FitSingleKey() const;
   /// Used to specify whether or not to use compact graphs
   const char* CompactGraphKey() const;
   /// Used to specify OCDB path
@@ -129,9 +155,12 @@ public:
   ///@}
 
   TObjArray* GetListElements(const char* type, Bool_t simulation) const;
+  TObjArray* GetTriggersList(Bool_t simulation) const;
 
   void DefineDefaultsFromFile(const char* configfile);
 
+  void LoadAliceStyles();
+
 private:
 
   enum EDataType { kSim = 1<<0, kReal = 1<<1 };
diff --git a/PWG/muondep/AliAnalysisMuMuFnorm.cxx b/PWG/muondep/AliAnalysisMuMuFnorm.cxx
index 7a1fff4..c8d9144 100644
--- a/PWG/muondep/AliAnalysisMuMuFnorm.cxx
+++ b/PWG/muondep/AliAnalysisMuMuFnorm.cxx
@@ -13,20 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-///
-/// AliAnalysisMuMuFnorm : class to encapsulate computation(s)
-/// of the normalisation factor used to get the equivalent
-/// number of MB events from the number of REF triggers
-///
-/// The computed objects are stored within a AliMergeableCollection
-/// with 3 subdirectories, dependinf on their type
-///
-/// /GRAPHS/
-/// /RESULTS/
-/// /HISTOS/
-///
-/// author: Laurent Aphecetche (Subatech)
-
 #include "AliAnalysisMuMuFnorm.h"
 
 #include "AliAnalysisMuMuGraphUtil.h"
@@ -54,6 +40,8 @@
 
 ClassImp(AliAnalysisMuMuFnorm)
 
+using namespace std;
+
 //_____________________________________________________________________________
 AliAnalysisMuMuFnorm::AliAnalysisMuMuFnorm(AliCounterCollection& cc,AliAnalysisMuMuConfig& cf,
                                            AliAnalysisMuMuFnorm::ETriggerType refTriggerType,
@@ -82,94 +70,93 @@ AliAnalysisMuMuFnorm::~AliAnalysisMuMuFnorm()
   }
 }
 
-//_____________________________________________________________________________
-void AliAnalysisMuMuFnorm::ComputeFnorm()
-{
-  /// Compute the REF to CINT ratio(s)
-  ///
-  /// Using offline method
-  ///   - in one go CINT/REF
-  ///   - in two steps CINT/CMSL and CMSL/REF
-  ///
-  /// Using scaler method
-  ///   - bare scaler values
-  ///   - scaler values corrected for pile-up
-  ///   - scaler values corrected for pile-up and physics selection
-
-//   const ETriggerType triggerTypes[] = { kMB, kMUL, kMSL, kMSH };
-//   const Bool_t trueFalse[] = { kTRUE, kFALSE };
-//   // Call ComputeNofEvent for every combination possible
-//   for ( Int_t i = 0; i < 4; ++i )
-//   {
-//     for ( Int_t pileup = 0; pileup < 2; ++pileup )
-//     {
-//       for ( Int_t ps = 0; ps < 2; ++ps )
-//       {
-//         ComputeNofEvents(triggerTypes[i],trueFalse[pileup],ps);
-//       }
-//     }
-//   }
-//   ComputeFnormOffline(1,kFALSE,0);
-//   ComputeFnormOffline(1,kFALSE,1);
-//   ComputeFnormOffline(1,kTRUE,1);
-
-//   ComputeFnormOffline(2,kFALSE,0);
-//   ComputeFnormOffline(2,kFALSE,1);
-//   ComputeFnormOffline(2,kTRUE,1);
-
-// //  ComputeFnormOffline(2,kFALSE,2);
-// //  ComputeFnormOffline(2,kTRUE,2);
-
-//   ComputeFnormScalers(kFALSE,0);
-//   ComputeFnormScalers(kTRUE,0);
-//   ComputeFnormScalers(kTRUE,1);
-// //  ComputeFnormScalers(kTRUE,2);
-
-//   WeightedMeanGraphs("Offline");
-//   WeightedMeanGraphs("Scalers");
-//   WeightedMeanGraphs("FnormOffline2PUPS,FnormOffline1PUPS","FnormOffline12PUPS");
-
-//   WeightedMeanGraphs("FnormOffline2PUPS,FnormScalersPUPS","FnormBest2");
-
-//   ComputeGraphRelDif("FnormOffline2PUPS","FnormScalersPUPS");
-
-//   ComputeGraphRelDif("FnormOffline2PUPS","FnormOffline2");
-//   ComputeGraphRelDif("FnormOffline2PUPS","FnormOffline2PS");
-
-//   ComputeGraphRelDif("CorrectionPSMB","CorrectionPSREF");
-
-// //  for ( Int_t i = 0; i < 4; ++i )
-// ///  {
-//     TString triggerEvents;
-
-// //  triggerEvents.Form("NofEvent%sPUPS",GetTriggerTypeName(triggerTypes[i]).Data());
-//   triggerEvents.Form("NofEvent%sPUPS",GetTriggerTypeName(fReferenceTriggerType).Data());
-
-//   MultiplyGraphs(triggerEvents.Data(),"FnormBest2","NMBeqBest2");
-
-//     MultiplyGraphs(triggerEvents.Data(),"FnormOffline2PUPS","NMBeqOffline2PUPS");
-//   MultiplyGraphs(triggerEvents.Data(),"FnormScalersPUPS","NMBeqScalersPUPS");
-// //  }
-
-// //  MultiplyGraphs(Form("NofEvent%sPUTS",GetTriggerTypeName(fReferenceTriggerType).Data()),"FnormOffline2PUTS","NMBeqOffline2PUTS");
-// //  MultiplyGraphs(Form("NofEvent%sPUTS",GetTriggerTypeName(fReferenceTriggerType).Data()),"FnormOffline2TS","NMBeqOffline2TS");
-
-//   ComputeResultsFromGraphs();
-
-//   AliAnalysisMuMuResult* result = GetResult("Fnorm");
-//   if (result)
-//   {
-//     result->Exclude("*");
-//     result->Include("FnormBest2");
-//   }
-}
+// //_____________________________________________________________________________
+// void AliAnalysisMuMuFnorm::ComputeFnorm()
+// {
+//   /// Compute the REF to CINT ratio(s)
+//   ///
+//   /// Using offline method
+//   ///   - in one go CINT/REF
+//   ///   - in two steps CINT/CMSL and CMSL/REF
+//   ///
+//   /// Using scaler method
+//   ///   - bare scaler values
+//   ///   - scaler values corrected for pile-up
+//   ///   - scaler values corrected for pile-up and physics selection
+
+// //   const ETriggerType triggerTypes[] = { kMB, kMUL, kMSL, kMSH };
+// //   const Bool_t trueFalse[] = { kTRUE, kFALSE };
+// //   // Call ComputeNofEvent for every combination possible
+// //   for ( Int_t i = 0; i < 4; ++i )
+// //   {
+// //     for ( Int_t pileup = 0; pileup < 2; ++pileup )
+// //     {
+// //       for ( Int_t ps = 0; ps < 2; ++ps )
+// //       {
+// //         ComputeNofEvents(triggerTypes[i],trueFalse[pileup],ps);
+// //       }
+// //     }
+// //   }
+// //   ComputeFnormOffline(1,kFALSE,0);
+// //   ComputeFnormOffline(1,kFALSE,1);
+// //   ComputeFnormOffline(1,kTRUE,1);
+
+// //   ComputeFnormOffline(2,kFALSE,0);
+// //   ComputeFnormOffline(2,kFALSE,1);
+// //   ComputeFnormOffline(2,kTRUE,1);
+
+// // //  ComputeFnormOffline(2,kFALSE,2);
+// // //  ComputeFnormOffline(2,kTRUE,2);
+
+// //   ComputeFnormScalers(kFALSE,0);
+// //   ComputeFnormScalers(kTRUE,0);
+// //   ComputeFnormScalers(kTRUE,1);
+// // //  ComputeFnormScalers(kTRUE,2);
+
+// //   WeightedMeanGraphs("Offline");
+// //   WeightedMeanGraphs("Scalers");
+// //   WeightedMeanGraphs("FnormOffline2PUPS,FnormOffline1PUPS","FnormOffline12PUPS");
+
+// //   WeightedMeanGraphs("FnormOffline2PUPS,FnormScalersPUPS","FnormBest2");
+
+// //   ComputeGraphRelDif("FnormOffline2PUPS","FnormScalersPUPS");
+
+// //   ComputeGraphRelDif("FnormOffline2PUPS","FnormOffline2");
+// //   ComputeGraphRelDif("FnormOffline2PUPS","FnormOffline2PS");
+
+// //   ComputeGraphRelDif("CorrectionPSMB","CorrectionPSREF");
+
+// // //  for ( Int_t i = 0; i < 4; ++i )
+// // ///  {
+// //     TString triggerEvents;
+
+// // //  triggerEvents.Form("NofEvent%sPUPS",GetTriggerTypeName(triggerTypes[i]).Data());
+// //   triggerEvents.Form("NofEvent%sPUPS",GetTriggerTypeName(fReferenceTriggerType).Data());
+
+// //   MultiplyGraphs(triggerEvents.Data(),"FnormBest2","NMBeqBest2");
+
+// //     MultiplyGraphs(triggerEvents.Data(),"FnormOffline2PUPS","NMBeqOffline2PUPS");
+// //   MultiplyGraphs(triggerEvents.Data(),"FnormScalersPUPS","NMBeqScalersPUPS");
+// // //  }
+
+// // //  MultiplyGraphs(Form("NofEvent%sPUTS",GetTriggerTypeName(fReferenceTriggerType).Data()),"FnormOffline2PUTS","NMBeqOffline2PUTS");
+// // //  MultiplyGraphs(Form("NofEvent%sPUTS",GetTriggerTypeName(fReferenceTriggerType).Data()),"FnormOffline2TS","NMBeqOffline2TS");
+
+// //   ComputeResultsFromGraphs();
+
+// //   AliAnalysisMuMuResult* result = GetResult("Fnorm");
+// //   if (result)
+// //   {
+// //     result->Exclude("*");
+// //     result->Include("FnormBest2");
+// //   }
+// }
 
 //_____________________________________________________________________________
 void AliAnalysisMuMuFnorm::ComputeCorrectionFactors(Int_t eventSelectionCorrected)
 {
   /// Compute individual graphs for the correction factors (PS_REF, PS_CINT,
   /// F_pile-up,PS_CINT/PS_REF) used in the computation of (some) Fnorm factors
-  ///
 
   TString graphName(Form("CorrectionGlobal%s",GetEventSelectionName(eventSelectionCorrected).Data()));;
 
@@ -181,13 +168,14 @@ void AliAnalysisMuMuFnorm::ComputeCorrectionFactors(Int_t eventSelectionCorrecte
 
   AliDebug(2,"");// ??
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
 
-  std::vector<double> vyGlobal;
-  std::vector<double> vyGlobalErr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
+
+  vector<double> vyGlobal;
+  vector<double> vyGlobalErr;
 
   const ETriggerType triggerTypes[] = { kMB, kMUL, kMSL, kMSH };
 
@@ -257,7 +245,7 @@ void AliAnalysisMuMuFnorm::ComputeCorrectionFactors(Int_t eventSelectionCorrecte
 // {
 //   /// Compute the run by run REF cross-section as sigma(ref) = sigma_(vdm)/FNorm and the integrated luminosity
 //   /// This method ment to run originaly for PP system.
-//   /// \argument nsteps : The FNorm reference graph, could be 1 (offline1), 2 (offline1) or 0 (Scaler)
+//   /// @argument nsteps : The FNorm reference graph, could be 1 (offline1), 2 (offline1) or 0 (Scaler)
 
 //   TString centrality(fConfig.First(fConfig.CentralitySelectionKey()));
 
@@ -315,12 +303,12 @@ void AliAnalysisMuMuFnorm::ComputeCorrectionFactors(Int_t eventSelectionCorrecte
 //   }
 
 
-//   const std::set<int>& runs = RunNumbers();
+//   const set<int>& runs = RunNumbers();
 
-//   std::vector<double> vx;
-//   std::vector<double> vxerr;
-//   std::vector<double> vy;
-//   std::vector<double> vyerr;
+//   vector<double> vx;
+//   vector<double> vxerr;
+//   vector<double> vy;
+//   vector<double> vyerr;
 
 //   Double_t purityREF(1.0);
 //   Double_t purityMB(1.0);
@@ -328,7 +316,7 @@ void AliAnalysisMuMuFnorm::ComputeCorrectionFactors(Int_t eventSelectionCorrecte
 //   Double_t purityMBerror(0.0);
 
 //   // compute the per run values
-//   for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+//   for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
 //   {
 //     Int_t runNumber = *it;
 
@@ -401,9 +389,9 @@ void AliAnalysisMuMuFnorm::ComputeCorrectionFactors(Int_t eventSelectionCorrecte
 void AliAnalysisMuMuFnorm::ComputeFnormOffline(Int_t nstep, Bool_t pileUpCorrected, Int_t eventSelectionCorrected)
 {
   /// Compute MB to REF ratio using offline method, either in 1 or 2 steps
-  /// \argument nstep                  : 1 = one step method ; 2 = two steps method
-  /// \argument pileUpCorrected        : wheither or not we apply the pile-up correction factor
-  /// \argument eventSelectionCorrected: wheither or not we apply the purity facot correction
+  /// @argument nstep                    1 = one step method ; 2 = two steps method
+  /// @argument pileUpCorrected          wheither or not we apply the pile-up correction factor
+  /// @argument eventSelectionCorrected  wheither or not we apply the purity factor correction and how : 1 = ps ; 2= ts
 
   TString name("FnormOffline");
   TString title("Computed using offline information");
@@ -436,15 +424,15 @@ void AliAnalysisMuMuFnorm::ComputeFnormOffline(Int_t nstep, Bool_t pileUpCorrect
 
   AliDebug(2,name);
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
+
+  const set<int>& runs = RunNumbers();
+
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it ){
 
-  const std::set<int>& runs = RunNumbers();
-  // Main loop over all the run numbers
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
-  {
     Int_t runNumber = *it;
     // Get trigger name
     TString mbTrigger   = GetTriggerClassName(kMB,runNumber);
@@ -456,13 +444,11 @@ void AliAnalysisMuMuFnorm::ComputeFnormOffline(Int_t nstep, Bool_t pileUpCorrect
     AliDebug(1,Form("mb trigger  : %s\n", mbTrigger.Data()));
     AliDebug(1,Form("muon trigger: %s\n", muonTrigger.Data()));
 
-
     Double_t nofMB = GetSum(mbTrigger.Data(),runNumber,eventSelectionCorrected);
     Double_t nofMSL(0.0);
     Double_t nofMSLw0REF(0.0);
 
-    if ( nstep==2 )
-    {
+    if ( nstep==2 ){
       nofMSL = GetSum(muonTrigger.Data(),runNumber,eventSelectionCorrected);
       TString counterName = muonTrigger;
       if ( fReferenceTriggerType != kMSL ) counterName += Form("&%s",refInput.Data());
@@ -480,8 +466,7 @@ void AliAnalysisMuMuFnorm::ComputeFnormOffline(Int_t nstep, Bool_t pileUpCorrect
     Double_t purityMB(1.0);
     Double_t purityMBerror(0.0);
 
-    if ( eventSelectionCorrected > 0 )
-    {
+    if ( eventSelectionCorrected > 0 ){
       ComputeEventSelectionGraph(kMB,eventSelectionCorrected);
 
       TGraphErrors* gps= 0x0;
@@ -494,8 +479,7 @@ void AliAnalysisMuMuFnorm::ComputeFnormOffline(Int_t nstep, Bool_t pileUpCorrect
     Double_t pileUpFactor(1.0);
     Double_t pileUpFactorError(0.0);
 
-    if (pileUpCorrected)
-    {
+    if (pileUpCorrected){
       ComputePileUpGraph(kMB,eventSelectionCorrected);
 
       TGraphErrors* gpu = GetGraph(Form("CorrectionPU%s%s",GetEventSelectionName(eventSelectionCorrected).Data(),GetTriggerTypeName(kMB).Data()));
@@ -510,16 +494,11 @@ void AliAnalysisMuMuFnorm::ComputeFnormOffline(Int_t nstep, Bool_t pileUpCorrect
                                                               nofMBw0REF,TMath::Sqrt(nofMBw0REF),
                                                               pileUpFactor,pileUpFactorError);
 
-    if ( nstep == 2 )
-    {
+    if ( nstep == 2 ){
       value =  nofMBw0MSL > 0.0 ? (nofMB/nofMSLw0REF)*(nofMSL/nofMBw0MSL) : 0.0;
-
-      // if ( runNumber == 196310 )
-      // {
-        AliDebug(1,Form("RUN %09d %d-%d-%d value=%e nofMB %e nofMSLw%s %e nofMSL %e nofMBw0MSL %e",
-                        runNumber,nstep,pileUpCorrected,eventSelectionCorrected,
-                        value,nofMB,refInput.Data(),nofMSLw0REF,nofMSL,nofMBw0MSL));
-      // }
+      AliDebug(1,Form("RUN %09d %d-%d-%d value=%e nofMB %e nofMSLw%s %e nofMSL %e nofMBw0MSL %e",
+                      runNumber,nstep,pileUpCorrected,eventSelectionCorrected,
+                      value,nofMB,refInput.Data(),nofMSLw0REF,nofMSL,nofMBw0MSL));
 
       error = value*AliAnalysisMuMuResult::ErrorABCD(nofMB,TMath::Sqrt(nofMB),
                                                           nofMSLw0REF,TMath::Sqrt(nofMSLw0REF),
@@ -527,13 +506,10 @@ void AliAnalysisMuMuFnorm::ComputeFnormOffline(Int_t nstep, Bool_t pileUpCorrect
                                                           nofMBw0MSL,TMath::Sqrt(nofMBw0MSL));
     }
 
-    // if ( value > 0.0 )
-    // {
-      vx.push_back(1.0*runNumber);
-      vxerr.push_back(0.5);
-      vy.push_back(value);
-      vyerr.push_back(error);
-    // }
+    vx.push_back(1.0*runNumber);
+    vxerr.push_back(0.5);
+    vy.push_back(value);
+    vyerr.push_back(error);
   }
 
   CreateAndAddGraph(name,title,vx,vxerr,vy,vyerr);
@@ -548,9 +524,15 @@ void AliAnalysisMuMuFnorm::ComputeFnormScalers(Bool_t pileUpCorrected,
   ///
   /// i.e. Fnorm = L0B(MB) x PS(MB) x Fpile-up / ( L0B(REF) x PS(REF) )
   ///
-  /// where MB is the minbias trigger
-  /// REF is the fReferenceTrigger
-  /// and PS is the fraction of events selected by the physics selection
+  /// where
+  ///
+  ///   - MB is the minbias trigger
+  ///
+  ///
+  ///   -REF is the fReferenceTrigger
+  ///
+  ///
+  ///   -PS is the fraction of events selected by the physics selection
   ///
   /// The correction factor (the two PS and one Fpile-up) are
   /// taken from graphs computed in other methods
@@ -590,12 +572,12 @@ void AliAnalysisMuMuFnorm::ComputeFnormScalers(Bool_t pileUpCorrected,
   ComputeTriggerL0B(kMB);
   ComputeTriggerL0B(fReferenceTriggerType);
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
   Double_t purityREF(1.0);
   Double_t purityMB(1.0);
@@ -603,7 +585,7 @@ void AliAnalysisMuMuFnorm::ComputeFnormScalers(Bool_t pileUpCorrected,
   Double_t purityMBerror(0.0);
 
   // compute the per run values
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -714,10 +696,10 @@ void AliAnalysisMuMuFnorm::ComputeGraphRelDif(const char* a, const char* b) cons
 
   TString title(Form("%s-%s (RelDif,%%)",b,a));
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
   for ( Int_t i = 0; i < ga->GetN(); ++i )
   {
@@ -791,16 +773,16 @@ void AliAnalysisMuMuFnorm::ComputePileUpGraph(ETriggerType tt, Int_t eventSelect
 
   AliDebug(2,graphName);
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
   AliAnalysisTriggerScalers ts(runs,OCDBPath().Data());
 
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -858,16 +840,16 @@ void AliAnalysisMuMuFnorm::ComputeEventSelectionGraph(ETriggerType tt, Int_t eve
 
   AliDebug(2,graphName);
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
   // AliAnalysisTriggerScalers ts(runs,OCDBPath().Data()); // à quoi ça sert ??
 
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -912,16 +894,16 @@ void AliAnalysisMuMuFnorm::ComputePurityFactorForScalerGraph(ETriggerType tt, In
 
   AliDebug(2,graphName);
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
   // AliAnalysisTriggerScalers ts(runs,OCDBPath().Data()); // à quoi ça sert ??
 
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -949,7 +931,6 @@ void AliAnalysisMuMuFnorm::ComputePurityFactorForScalerGraph(ETriggerType tt, In
   CreateAndAddGraph(graphName,title,vx,vxerr,vy,vyerr);
 }
 
-
 //_____________________________________________________________________________
 void AliAnalysisMuMuFnorm::ComputeResultsFromGraphs()
 {
@@ -1053,16 +1034,16 @@ void AliAnalysisMuMuFnorm::ComputeNofEvents(ETriggerType triggerType,
 
   AliDebug(2,graphName);
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
   Int_t i(0);
 
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -1131,16 +1112,16 @@ void AliAnalysisMuMuFnorm::ComputeTriggerFractions(ETriggerType triggerType,
 
   AliDebug(2,graphName);
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
   Double_t n(0.0);
 
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -1158,7 +1139,7 @@ void AliAnalysisMuMuFnorm::ComputeTriggerFractions(ETriggerType triggerType,
     return;
   }
 
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -1183,10 +1164,10 @@ void AliAnalysisMuMuFnorm::ComputeTriggerL0B(ETriggerType triggerType)
 {
   /// Compute trigger L0B
 
-  std::vector<double> vx;
-  std::vector<double> vxerr;
-  std::vector<double> vy;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vxerr;
+  vector<double> vy;
+  vector<double> vyerr;
 
   TString graphName(Form("L0B%s",GetTriggerTypeName(triggerType).Data()));
 
@@ -1198,11 +1179,11 @@ void AliAnalysisMuMuFnorm::ComputeTriggerL0B(ETriggerType triggerType)
 
   AliDebug(2,graphName);
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
   AliAnalysisTriggerScalers ts(runs,OCDBPath().Data());
 
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -1246,16 +1227,16 @@ void AliAnalysisMuMuFnorm::ComputeTriggerL0B(ETriggerType triggerType)
 //
 //  AliDebug(1,graphName);
 //
-//  std::vector<double> vx;
-//  std::vector<double> vxerr;
-//  std::vector<double> vy;
-//  std::vector<double> vyerr;
+//  vector<double> vx;
+//  vector<double> vxerr;
+//  vector<double> vy;
+//  vector<double> vyerr;
 //
-//  const std::set<int>& runs = RunNumbers();
+//  const set<int>& runs = RunNumbers();
 //
 //  AliAnalysisTriggerScalers ts(runs,OCDBPath().Data());
 //
-//  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+//  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
 //  {
 //    Int_t runNumber = *it;
 //
@@ -1286,10 +1267,10 @@ void AliAnalysisMuMuFnorm::ComputeTriggerL0B(ETriggerType triggerType)
 //_____________________________________________________________________________
 TGraphErrors* AliAnalysisMuMuFnorm::CreateAndAddGraph(const TString& name,
                                                       const TString& title,
-                                                      const std::vector<double>& vx,
-                                                      const std::vector<double>& vxerr,
-                                                      const std::vector<double>& vy,
-                                                      const std::vector<double>& vyerr) const
+                                                      const vector<double>& vx,
+                                                      const vector<double>& vxerr,
+                                                      const vector<double>& vy,
+                                                      const vector<double>& vyerr) const
 {
   /// Creates a graph and an histo and adds it to our mergeable collection
 
@@ -1413,7 +1394,7 @@ TString AliAnalysisMuMuFnorm::GetEventSelectionName(Int_t eventSelectionCorrecte
 //_____________________________________________________________________________
 TGraphErrors* AliAnalysisMuMuFnorm::GetGraph(const char* name) const
 {
-  // shortcut method to give access to one graph
+  /// shortcut method to give access to one graph
 
   TObject* o = MC()->GetObject(Form("/GRAPHS/%s",name));
 
@@ -1431,7 +1412,7 @@ TGraphErrors* AliAnalysisMuMuFnorm::GetGraph(const char* name) const
 //_____________________________________________________________________________
 TH1* AliAnalysisMuMuFnorm::GetGraphAsHisto(const char* name) const
 {
-  // shortcut method to give access to one graph and return it as an histo
+  /// shortcut method to give access to one graph and return it as an histo
 
   TObject* o = MC()->GetObject(Form("/GRAPHS/%s",name));
 
@@ -1442,7 +1423,7 @@ TH1* AliAnalysisMuMuFnorm::GetGraphAsHisto(const char* name) const
     return 0x0;
   }
 
-  const std::set<int>& runs = RunNumbers();
+  const set<int>& runs = RunNumbers();
 
   TGraphErrors *g = static_cast<TGraphErrors*>(o->Clone());
   TH1F * h =new TH1F(Form("%s_AsHisto",g->GetName()),Form("%s_AsHisto",g->GetName()),1,0.,1.);
@@ -1451,7 +1432,7 @@ TH1* AliAnalysisMuMuFnorm::GetGraphAsHisto(const char* name) const
   Double_t dy = 0.;
 
   //Fill
-  for ( std::set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
+  for ( set<int>::const_iterator it = runs.begin(); it != runs.end(); ++it )
   {
     Int_t runNumber = *it;
 
@@ -1582,7 +1563,7 @@ void AliAnalysisMuMuFnorm::GetPurityFactor(TString triggerClassName, Int_t runNu
 //_____________________________________________________________________________
 AliAnalysisMuMuResult* AliAnalysisMuMuFnorm::GetResult(const char* name) const
 {
-  // shortcut method to give access to one result
+  /// shortcut method to give access to one result
 
   TObject* o = MC()->GetObject(Form("/RESULTS/%s",name));
 
@@ -1617,7 +1598,7 @@ AliAnalysisMuMuResult* AliAnalysisMuMuFnorm::GetRunIntegratedResult(const TGraph
 
   TGraphErrors* gTriggerFractions = GetGraph(fname);
 
-  StdoutToAliDebug(2,std::cout << g.GetName() << std::endl; g.Print(););
+  StdoutToAliDebug(2,cout << g.GetName() << endl; g.Print(););
 
   if (!gTriggerFractions)
   {
@@ -1846,18 +1827,7 @@ TString AliAnalysisMuMuFnorm::MSHTriggerClassName(Int_t runNumber) const
 //_____________________________________________________________________________
 TString AliAnalysisMuMuFnorm::MSLTriggerClassName(Int_t runNumber) const
 {
-  /// FIXME : find a better way ?
-
- //  if ( TriggerClassnameTest("CMSL7-B-NOPF-MUON",runNumber) )
- //  {
- //      return "CMSL7-B-NOPF-MUON";
- //  }
- // else
- //   if ( TriggerClassnameTest("CPBI1MSL-B-NOPF-MUON",runNumber) )
- // {
- //   return "CPBI1MSL-B-NOPF-MUON";
- // }
- //  return "";
+  /// Take the first key in the config. file.
 
  TString triggerType(fConfig.First(fConfig.MuonTriggerKey(),kFALSE).Data());
   return triggerType.Data();
@@ -1868,10 +1838,10 @@ TString AliAnalysisMuMuFnorm::MSLTriggerClassName(Int_t runNumber) const
 void AliAnalysisMuMuFnorm::MultiplyGraphs(const char* g1name, const char* g2name, const char* name)
 {
   /// Make a new graph = g1*g2
-  std::vector<double> vx;
-  std::vector<double> vy;
-  std::vector<double> vxerr;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vy;
+  vector<double> vxerr;
+  vector<double> vyerr;
 
   TGraphErrors* g1 = GetGraph(g1name);
   TGraphErrors* g2 = GetGraph(g2name);
@@ -1930,21 +1900,7 @@ void AliAnalysisMuMuFnorm::MultiplyGraphs(const char* g1name, const char* g2name
 //_____________________________________________________________________________
 TString AliAnalysisMuMuFnorm::MULTriggerClassName(Int_t runNumber) const
 {
-  /// FIXME : find a better way ?
-
-  // if ( TriggerClassnameTest("CMUL7-B-NOPF-ALLNOTRD",runNumber) )
-  // {
-  //   return "CMUL7-B-NOPF-ALLNOTRD";
-  // }
-  // else if ( TriggerClassnameTest("CMUL7-B-NOPF-MUON",runNumber) )
-  // {
-  //   return "CMUL7-B-NOPF-MUON";
-  // }
-  // else if ( TriggerClassnameTest("CPBI1MUL-B-NOPF-MUON",runNumber) )
-  // {
-  //   return "CPBI1MUL-B-NOPF-MUON";
-  // }
-  // return "";
+  /// Take the first key in the config. file.
 
   TString triggerType(fConfig.First(fConfig.DimuonTriggerKey(),kFALSE).Data());
     return triggerType.Data();
@@ -1962,11 +1918,11 @@ void AliAnalysisMuMuFnorm::Print(Option_t* opt) const
 }
 
 //_____________________________________________________________________________
-std::set<int> AliAnalysisMuMuFnorm::RunNumbers() const
+set<int> AliAnalysisMuMuFnorm::RunNumbers() const
 {
-  // Extract the run numbers from our counter collection
+  /// Extract the run numbers from our counter collection
 
-  std::set<int> runset;
+  set<int> runset;
 
   TString sruns = fCounterCollection.GetKeyWords("run");
   TObjArray* runs = sruns.Tokenize(",");
@@ -2072,6 +2028,7 @@ void
 AliAnalysisMuMuFnorm::WeightedMeanGraphs(const char* patternOrList, const char* graphName, AliMergeableCollection* oc)
 {
   /// Sum the graphs which name matches pattern
+  ///
   /// Sum is made using a weighted mean (each element is weighted by the inverse
   /// of its error squared)
 
@@ -2128,10 +2085,10 @@ AliAnalysisMuMuFnorm::WeightedMeanGraphs(const char* patternOrList, const char*
 
   if (selected.GetLast()<0) return;
 
-  std::vector<double> vx;
-  std::vector<double> vy;
-  std::vector<double> vxerr;
-  std::vector<double> vyerr;
+  vector<double> vx;
+  vector<double> vy;
+  vector<double> vxerr;
+  vector<double> vyerr;
 
   Int_t npts = static_cast<TGraphErrors*>(selected.First())->GetN();
   if(npts==0 || npts==1) return;
diff --git a/PWG/muondep/AliAnalysisMuMuFnorm.h b/PWG/muondep/AliAnalysisMuMuFnorm.h
index 1a3cca3..104f379 100644
--- a/PWG/muondep/AliAnalysisMuMuFnorm.h
+++ b/PWG/muondep/AliAnalysisMuMuFnorm.h
@@ -4,6 +4,20 @@
 /* Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
  * See cxx source for full Copyright notice                               */
 
+
+/**
+*   @class AliAnalysisMuMuFnorm
+*   @details class to encapsulate computation(s)
+*   of the normalisation factor used to get the equivalent
+*   number of MB events from the number of REF triggers
+*
+*   The computed objects are stored within a AliMergeableCollection in a new subdirectories
+*
+*
+*   @author: Laurent Aphecetche (Subatech)
+*   @author: Benjamin Audurier (Subatech)
+**/
+
 #ifndef ROOT_TObject
 #  include "TObject.h"
 #endif
@@ -44,7 +58,7 @@ public:
 
   virtual ~AliAnalysisMuMuFnorm();
 
-  void ComputeFnorm();
+  // void ComputeFnorm();
 
   void ComputeCorrectionFactors(Int_t eventSelectionCorrected);
 
diff --git a/PWG/muondep/AliAnalysisMuMuJpsiResult.cxx b/PWG/muondep/AliAnalysisMuMuJpsiResult.cxx
index 7906a19..5c60976 100644
--- a/PWG/muondep/AliAnalysisMuMuJpsiResult.cxx
+++ b/PWG/muondep/AliAnalysisMuMuJpsiResult.cxx
@@ -13,21 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-///
-/// Class to hold results about J/psi
-/// like number of of J/psi (before and after Acc x Eff correction),
-/// Acc x Eff correction, Yield, RAB, etc...
-///
-/// A note on "naming conventions"
-///
-/// FitFunctionXY : denotes a function with a prototype double func(double*,double*)
-/// which can be used in a fit. X = Background, Signal or Total for Background+Signal
-/// Y is the functio name
-///
-///
-/// author: Laurent Aphecetche (Subatech)
-///
-
 #include "AliAnalysisMuMuJpsiResult.h"
 
 ClassImp(AliAnalysisMuMuJpsiResult)
@@ -57,7 +42,6 @@ ClassImp(AliAnalysisMuMuJpsiResult)
 #include "TCanvas.h"
 #include "TStyle.h"
 
-
 namespace {
 
   //____________________________________________________________________________
@@ -2519,10 +2503,10 @@ void AliAnalysisMuMuJpsiResult::FitPSIPSIPRIMECB2POL1POL2()
 
   TString msg;
 
-  if (IsValidValue(alphaLow)) msg += TString::Format("alphaLow=%e ",alphaLow);
-  if (IsValidValue(nLow)) msg     += TString::Format("nLow=%e ",nLow);
-  if (IsValidValue(alphaUp)) msg  += TString::Format("alphaUp=%e ",alphaUp);
-  if (IsValidValue(nUp)) msg      += TString::Format("nUp=%e ",nUp);
+  if (IsValidValue(alphaLow)) msg  += TString::Format("alphaLow=%e ",alphaLow);
+  if (IsValidValue(nLow))     msg  += TString::Format("nLow=%e ",nLow);
+  if (IsValidValue(alphaUp))  msg  += TString::Format("alphaUp=%e ",alphaUp);
+  if (IsValidValue(nUp))      msg  += TString::Format("nUp=%e ",nUp);
   //__________
 
 
@@ -8715,8 +8699,8 @@ Bool_t AliAnalysisMuMuJpsiResult::StrongCorrelation(TFitResultPtr& r,
 Bool_t AliAnalysisMuMuJpsiResult::WrongParameter(TF1* fitFunction, Int_t npar,
                                                  Double_t fixValueIfWrong)
 {
-  // return kTRUE if npar-th parameter of fit function has a big error,
-  // and in that case fix the parameter's value to fixValueIfWrong
+  /// return kTRUE if npar-th parameter of fit function has a big error,
+  /// and in that case fix the parameter's value to fixValueIfWrong
 
   Bool_t wrong = (fitFunction->GetParError(npar) > 0.8*TMath::Abs(fitFunction->GetParameter(npar)));
 
diff --git a/PWG/muondep/AliAnalysisMuMuJpsiResult.h b/PWG/muondep/AliAnalysisMuMuJpsiResult.h
index 020f2ae..630df38 100644
--- a/PWG/muondep/AliAnalysisMuMuJpsiResult.h
+++ b/PWG/muondep/AliAnalysisMuMuJpsiResult.h
@@ -5,10 +5,18 @@
  * See cxx source for full Copyright notice                               */
 
 ///
-/// AliAnalysisMuMuJpsiResult : helper class to store Jpsi results from
-/// AliAnalysisTaskMuMu
+/// @class    AliAnalysisMuMuJpsiResult
+/// @brief    helper class to store Jpsi results from AliAnalysisTaskMuMu
+/// @details  This class is dedicated to the fit process of the JPsi/Psiprime pick. The FitTypeKey() is the one decoded to select/configure the fit.
 ///
-/// author : Laurent Aphecetche (Subatech)
+/// This string should be written as : FitType : <key>=<value>:<key>=<value>:<key>=<value>:<key>=<value>...
+///
+///   FitType: func=PSIPSIPRIMECB2VWG:rebin=1:histoType=minv:alJPsi=0.974323:nlJPsi=7.36371:auJPsi=1.84248:nuJPsi=16.0656:range=1.7;4.8
+///
+///   TODO : method to print all the different <key>
+///
+/// @author  Laurent Aphecetche (Subatech)
+/// @author  Benjamin Audurier (Subatech)
 
 #include "TNamed.h"
 #include <TString.h>
diff --git a/PWG/muondep/AliAnalysisMuMuResult.cxx b/PWG/muondep/AliAnalysisMuMuResult.cxx
index 3344612..202eab2 100644
--- a/PWG/muondep/AliAnalysisMuMuResult.cxx
+++ b/PWG/muondep/AliAnalysisMuMuResult.cxx
@@ -13,13 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-///
-/// Base class to hold a set of results for the same quantity,
-/// computed using various methods, each with their errors
-///
-/// author: Laurent Aphecetche (Subatech)
-///
-
 #include "AliAnalysisMuMuResult.h"
 
 ClassImp(AliAnalysisMuMuResult)
@@ -152,7 +145,7 @@ AliAnalysisMuMuResult& AliAnalysisMuMuResult::operator=(const AliAnalysisMuMuRes
 //_____________________________________________________________________________
 AliAnalysisMuMuResult::~AliAnalysisMuMuResult()
 {
-  // dtor
+  /// dtor
   delete fMap;
   delete fSubResults;
   delete fKeys;
@@ -304,8 +297,8 @@ Double_t AliAnalysisMuMuResult::ErrorABCDE(Double_t a, Double_t aerr, Double_t b
 //_____________________________________________________________________________
 void AliAnalysisMuMuResult::Exclude(const char* subResultList)
 {
-  // exclude some subresult names from the list of subresult
-  // to be used when computing the mean
+  /// exclude some subresult names from the list of subresult
+  /// to be used when computing the mean
 
   TString slist(subResultList);
 
@@ -336,7 +329,7 @@ void AliAnalysisMuMuResult::Exclude(const char* subResultList)
 //_____________________________________________________________________________
 Double_t AliAnalysisMuMuResult::GetErrorStat(const char* name, const char* subResultName) const
 {
-  // compute the mean error value from all subresults that are included
+  /// compute the mean error value from all subresults that are included
 
   // If we specify a subresults
   if ( strlen(subResultName) > 0 )
@@ -354,7 +347,7 @@ Double_t AliAnalysisMuMuResult::GetErrorStat(const char* name, const char* subRe
     }
     return sub->GetErrorStat(name);
   }
-  // ??
+
   if ( fMap )
   {
     TObjArray* p = static_cast<TObjArray*>(fMap->GetValue(name));
@@ -373,13 +366,13 @@ Double_t AliAnalysisMuMuResult::GetErrorStat(const char* name, const char* subRe
     // Mean method (by default)
     Int_t n(0);
 
-    Double_t/* wval = 0, wval2 = 0,*/ werr = 0, sumw = 0;
+    Double_t werr = 0, sumw = 0;
     while ( ( r = static_cast<AliAnalysisMuMuResult*>(next()) ) )
     {
       // Loop on all subresults
       if ( IsIncluded(r->Alias()) && r->HasValue(name) )
       {
-        // COMMENTS OUTDATED !
+        // COMMENTS OUTDATED ! but we keep them as information anyway
         // The weight for each subresult is the same (=1.), since the data sample is always the same and just the fit function changes among subresults.
         // Before subresults were weighted with 1./err/err/wstat;
         // wstat was not there before and was introduced to remove the dependence of the error with the Nof extracted Jpsi (valid only for counts results with different data samples and not for <pt>...)
@@ -445,8 +438,8 @@ Double_t AliAnalysisMuMuResult::GetErrorStat(const char* name, const char* subRe
 //_____________________________________________________________________________
 Double_t AliAnalysisMuMuResult::GetRMS(const char* name, const char* subResultName) const
 {
-  // compute the rms of the subresults
-  // returns zero if no subresults
+  /// compute the rms of the subresults
+  /// returns zero if no subresults
 
   if ( strlen(subResultName) > 0 )
   {
@@ -537,7 +530,7 @@ Double_t AliAnalysisMuMuResult::GetRMS(const char* name, const char* subResultNa
 //_____________________________________________________________________________
 TString AliAnalysisMuMuResult::GetSubResultNameList() const
 {
-  // get a comma separated list of our subresult aliases
+  /// get a comma separated list of our subresult aliases
   TString tobeincluded;
   TIter next(fSubResults);
   AliAnalysisMuMuResult* r;
@@ -553,7 +546,7 @@ TString AliAnalysisMuMuResult::GetSubResultNameList() const
 //_____________________________________________________________________________
 Double_t AliAnalysisMuMuResult::GetValue(const char* name, const char* subResultName) const
 {
-  // get a value (either directly or by computing the mean of the subresults)
+  /// get a value (either directly or by computing the mean of the subresults)
 
   if ( strlen(subResultName) > 0 )
   {
@@ -709,7 +702,7 @@ void AliAnalysisMuMuResult::Hide(const char* keyPattern)
 //_____________________________________________________________________________
 void AliAnalysisMuMuResult::Include(const char* subResultList)
 {
-  // (re)include some subresult names
+  /// (re)include some subresult names
 
   TString slist(subResultList);
 
@@ -748,7 +741,7 @@ void AliAnalysisMuMuResult::Include(const char* subResultList)
 //_____________________________________________________________________________
 Bool_t AliAnalysisMuMuResult::IsIncluded(const TString& alias) const
 {
-  // whether that subresult alias should be included when computing means, etc...
+  /// whether that subresult alias should be included when computing means, etc...
 
   if (!fSubResultsToBeIncluded) return kTRUE;
 
@@ -901,7 +894,7 @@ Long64_t AliAnalysisMuMuResult::Merge(TCollection* list)
 //_____________________________________________________________________________
 Int_t AliAnalysisMuMuResult::NofIncludedSubResults(const char* name) const
 {
-  // Return the number of subresults which have key name and are included
+  /// Return the number of subresults which have key name and are included
 
   TIter next(fSubResults);
   AliAnalysisMuMuResult* r;
@@ -992,7 +985,7 @@ void AliAnalysisMuMuResult::Print(Option_t* opt) const
 void AliAnalysisMuMuResult::PrintValue(const char* key, const char* opt,
                                        Double_t value, Double_t errorStat, Double_t rms) const
 {
-  // print one value and its associated error
+  /// print one value and its associated error
 
   if ( TString(key).Contains("AccEff") )
   {
diff --git a/PWG/muondep/AliAnalysisMuMuResult.h b/PWG/muondep/AliAnalysisMuMuResult.h
index 173cbf1..b1946fa 100644
--- a/PWG/muondep/AliAnalysisMuMuResult.h
+++ b/PWG/muondep/AliAnalysisMuMuResult.h
@@ -6,11 +6,13 @@
 
 // $Id$
 
+
+///
+/// @class AliAnalysisMuMuResult Base class to hold a set of results for the same quantity,computed using various methods, each with their errors
 ///
-/// AliAnalysisMuMuResult : helper class to store results from
-/// AliAnalysisTaskMuMu
+/// @author Laurent Aphecetche (Subatech)
+/// @author Benjamin Audurier (Subatech)
 ///
-/// author : Laurent Aphecetche (Subatech)
 
 #include "TNamed.h"
 #include <TString.h>
diff --git a/PWG/muondep/AliAnalysisMuMuSpectra.cxx b/PWG/muondep/AliAnalysisMuMuSpectra.cxx
index 77ecdbd..3e83684 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectra.cxx
+++ b/PWG/muondep/AliAnalysisMuMuSpectra.cxx
@@ -13,14 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-
-// AliAnalysisMuMuSpectra : a class to encapsulate results from MuMu analysis
-//
-// Spectra can be merged and converted into histograms
-//
-// author: L. Aphecetche (Subatech)
-//
-
 #include "AliAnalysisMuMuSpectra.h"
 
 #include "AliLog.h"
@@ -41,7 +33,7 @@ fBinning(0x0),
 fBins(0x0),
 fWeight(1.0)
 {
-  // default ctor
+  /// default ctor
 }
 
 //______________________________________________________________________________
@@ -51,7 +43,7 @@ fBinning(0x0),
 fBins(0x0),
 fWeight(rhs.Weight())
 {
-  // copy ctor
+  /// copy ctor
 
   if ( rhs.fBinning )
   {
@@ -78,7 +70,7 @@ fWeight(rhs.Weight())
 AliAnalysisMuMuSpectra&
 AliAnalysisMuMuSpectra::operator=(const AliAnalysisMuMuSpectra& rhs)
 {
-  // assignment operator
+  /// assignment operator
 
   if (this==&rhs) return *this;
 
@@ -113,7 +105,7 @@ AliAnalysisMuMuSpectra::operator=(const AliAnalysisMuMuSpectra& rhs)
 //______________________________________________________________________________
 AliAnalysisMuMuSpectra::~AliAnalysisMuMuSpectra()
 {
-  // dtor
+  /// dtor
   delete fBinning;
   delete fBins;
 }
@@ -122,7 +114,7 @@ AliAnalysisMuMuSpectra::~AliAnalysisMuMuSpectra()
 Bool_t AliAnalysisMuMuSpectra::AdoptResult(const AliAnalysisMuMuBinning::Range& bin,
                                          AliAnalysisMuMuResult* result)
 {
-  // adopt (i.e. we are becoming the owner) a result for a given bin
+  /// adopt (i.e. we are becoming the owner) a result for a given bin
   if ( !result )
   {
     AliError("Cannot adopt a null result");
@@ -292,7 +284,7 @@ Bool_t AliAnalysisMuMuSpectra::HasValue(const char* what) const
 //______________________________________________________________________________
 Bool_t AliAnalysisMuMuSpectra::IsEmpty() const
 {
-  // whether this spectra is empty or not
+  /// whether this spectra is empty or not
   return ( fBins==0x0 || fBins->GetEntries()<=0 );
 }
 
@@ -300,9 +292,9 @@ Bool_t AliAnalysisMuMuSpectra::IsEmpty() const
 Long64_t AliAnalysisMuMuSpectra::Merge(TCollection* list)
 {
   /// Merge method
-
-  // Merge a list of AliAnalysisMuMuSpectra objects with this
-  // Returns the number of merged objects (including this).
+  ///
+  /// Merge a list of AliAnalysisMuMuSpectra objects with this
+  /// Returns the number of merged objects (including this).
 
   if (!list) return 0;
 
@@ -362,7 +354,7 @@ Long64_t AliAnalysisMuMuSpectra::Merge(TCollection* list)
 //_____________________________________________________________________________
 TH1* AliAnalysisMuMuSpectra::Plot(const char* what, const char* subresult, Bool_t divideByBinWidth) const
 {
-  // Convert the spectra into an histogram
+  /// Convert the spectra into an histogram
 
   TString swhat(what);
   TString swhatT(what);
@@ -478,7 +470,7 @@ TH1* AliAnalysisMuMuSpectra::Plot(const char* what, const char* subresult, Bool_
 //______________________________________________________________________________
 void AliAnalysisMuMuSpectra::Print(Option_t* opt) const
 {
-  // printout
+  /// printout
 
   if (!IsEmpty())
   {
@@ -496,7 +488,7 @@ void AliAnalysisMuMuSpectra::Print(Option_t* opt) const
 //______________________________________________________________________________
 void AliAnalysisMuMuSpectra::Scale(Double_t value)
 {
-  // scale all bins by value
+  /// scale all bins by value
 
   TIter next(fBins);
   AliAnalysisMuMuResult* r;
@@ -510,7 +502,7 @@ void AliAnalysisMuMuSpectra::Scale(Double_t value)
 //______________________________________________________________________________
 void AliAnalysisMuMuSpectra::SetWeight(Double_t w)
 {
-  // Set the weight of this spectra
+  /// Set the weight of this spectra
   fWeight = w;
   TIter next(fBins);
   AliAnalysisMuMuResult* r;
diff --git a/PWG/muondep/AliAnalysisMuMuSpectra.h b/PWG/muondep/AliAnalysisMuMuSpectra.h
index ff338ae..81a7423 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectra.h
+++ b/PWG/muondep/AliAnalysisMuMuSpectra.h
@@ -2,11 +2,11 @@
 #define ALIANALYSISMUMUSPECTRA_H
 
 ///
-/// AliAnalysisMuMuSpectra : a spectra is a binning (AliAnalysisMuMuBinning)
-/// and the results per bin (AliAnalysisMuMuResult), and is mergeable, so
+/// @class AliAnalysisMuMuSpectra
+/// @details a spectra is a binning (AliAnalysisMuMuBinning) and the results per bin (AliAnalysisMuMuResult), and is mergeable, so
 /// it can be put into an AliMergeableCollection
 ///
-/// author : Laurent Aphecetche (Subatech)
+/// @author Laurent Aphecetche (Subatech)
 //
 
 #include "TNamed.h"
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsule.cxx b/PWG/muondep/AliAnalysisMuMuSpectraCapsule.cxx
index fdf82d1..230bc3a 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsule.cxx
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsule.cxx
@@ -13,12 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-///
-/// Mother class to deal with Spectra after the fitting procedure.
-///
-/// author: Benjamin Audurier (Subatech)
-///
-
 #include "AliAnalysisMuMuSpectraCapsule.h"
 
 ClassImp(AliAnalysisMuMuSpectraCapsule)
@@ -134,8 +128,7 @@ Bool_t AliAnalysisMuMuSpectraCapsule::SetConstantFromExternFile(const char* file
 //_____________________________________________________________________________
 void AliAnalysisMuMuSpectraCapsule::PrintNofWhat(const char* what) const
 {
-  /// Print whar number for each results on terminal.
-
+  /// Print what number for each results on terminal.
 
   //Check point
   if(!GetSpectra() || strcmp(what,"")==1 )
@@ -183,7 +176,7 @@ void AliAnalysisMuMuSpectraCapsule::PrintNofWhat(const char* what) const
     //Some variables
     TString  binAsString(r->AsString());// Usefull for the coming loop
 
-    cout << Form(" -_-_-_-_- %s_%s -_-_-_-_- ",binAsString.Data(),GetSpectraName().Data()) << endl;
+    cout << Form(" -_-_-_-_- %s --- %s -_-_-_-_- ",binAsString.Data(),GetSpectraName().Data()) << endl;
     // Loop on subresults
     //==============================================================================
     while ((sr = static_cast<AliAnalysisMuMuResult*>(nextSubResult())))
@@ -198,12 +191,12 @@ void AliAnalysisMuMuSpectraCapsule::PrintNofWhat(const char* what) const
       AliDebug(1,Form("subresult(%s) = %p",sr->GetName(),subresult));
 
       //Get quantities
-      Double_t NofJPsiSub      = subresult->GetValue(what);
-      Double_t NofJPsiErrorStat = subresult->GetErrorStat(what);
+      Double_t NofWhat      = subresult->GetValue(what);
+      Double_t NofWhatErrorStat = subresult->GetErrorStat(what);
 
       //Output messages
       cout << Form(" -------- ") << endl;
-      cout << Form(" -- subresult %s :  %.0f +/- %.0f ",sr->GetName(),NofJPsiSub,NofJPsiErrorStat) << endl;
+      cout << Form(" -- subresult %s :  %.0f +/- %.0f ",sr->GetName(),NofWhat,NofWhatErrorStat) << endl;
       nofSubResult++;
 
     }
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsule.h b/PWG/muondep/AliAnalysisMuMuSpectraCapsule.h
index 89a039c..1081637 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsule.h
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsule.h
@@ -9,7 +9,8 @@
 // $Id$
 
 ///
-/// AliAnalysisMuMuSpectraCapsule : mother class to all capsule class.
+/// @class AliAnalysisMuMuSpectraCapsule
+/// @bried Mother class to all capsule class.
 ///
 /// author : Benjamin Audurier (Subatech)
 
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.cxx b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.cxx
index 88a97a5..7545bbc 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.cxx
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.cxx
@@ -13,12 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-///
-/// Class to deal with Spectra after the fitting procedure.
-///
-/// author: Benjamin Audurier (Subatech)
-///
-
 #include "AliAnalysisMuMuSpectraCapsulePP.h"
 
 ClassImp(AliAnalysisMuMuSpectraCapsulePP)
@@ -171,7 +165,6 @@ TList* AliAnalysisMuMuSpectraCapsulePP::ComputePPCrossSection(const char* what)
           printf("\n");
         }
 
-
         if(CorrNofJPsi==0. || NofJPsi ==0.){
           printf(" cannot found Corrected NofJpsi or NofJpsi, did you compute AccEff ? Abording...");
           continue;
@@ -318,10 +311,9 @@ TList* AliAnalysisMuMuSpectraCapsulePP::ComputePPCrossSection(const char* what)
 //_____________________________________________________________________________
 TGraphErrors* AliAnalysisMuMuSpectraCapsulePP::ComputeYield( const char* what, const TH1* histo, const char* sResName)
 {
-  /// Compute Yield.
-  /// Arguments :
-  ///   - what : the yield nominator, i.e NofJPsi, meanPT etc. (null by default)
-  ///   - histo : histogramme of Equivalent MinBias
+  /// @brief Compute Yield.
+  /// @argument what  the yield nominator, i.e NofJPsi, meanPT etc. (null by default)
+  /// @argument histo  histogramme of Equivalent MinBias
 
  printf("Not implemented yet \n");
  return 0x0;
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.h b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.h
index 9c73b21..478ef3d 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.h
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePP.h
@@ -9,7 +9,8 @@
 // $Id$
 
 ///
-/// AliAnalysisMuMuSpectraCapsulePbPb : helper class to deal with results stored in a spectra with PbPb methods.
+/// @class AliAnalysisMuMuSpectraCapsulePbPb
+/// @brief helper class to deal with results stored in a spectra with PbPb methods.
 ///
 /// author : Benjamin Audurier (Subatech)
 
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.cxx b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.cxx
index 35ad557..8d47c6e 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.cxx
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.cxx
@@ -13,12 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-///
-/// Class to deal with Spectra after the fitting procedure.
-///
-/// author: Benjamin Audurier (Subatech)
-///
-
 #include "AliAnalysisMuMuSpectraCapsulePbP.h"
 
 ClassImp(AliAnalysisMuMuSpectraCapsulePbP)
@@ -129,10 +123,9 @@ AliAnalysisMuMuSpectraCapsulePbP::~AliAnalysisMuMuSpectraCapsulePbP()
 //_____________________________________________________________________________
 TGraphErrors* AliAnalysisMuMuSpectraCapsulePbP::ComputeYield( const char* what, const TH1* histo, const char* sResName)
 {
-  /// Compute Yield.
-  /// Arguments :
-  ///   - what : the yield nominator, i.e NofJPsi, meanPT etc. (null by default)
-  ///   - histo : histogramme of Equivalent MinBias
+  /// @brief Compute Yield.
+  /// @argument what  the yield nominator, i.e NofJPsi, meanPT etc. (null by default)
+  /// @argument histo  histogramme of Equivalent MinBias
 
   if(!GetSpectra() || histo==0x0|| strcmp(what,"")==1) return 0x0;
 
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.h b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.h
index fa5a8a8..366fca4 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.h
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbP.h
@@ -9,7 +9,8 @@
 // $Id$
 
 ///
-/// AliAnalysisMuMuSpectraCapsulePbP : helper class to deal with results stored in a spectra with pPb methods.
+/// @class AliAnalysisMuMuSpectraCapsulePbP
+/// @brief helper class to deal with results stored in a spectra with pPb methods.
 ///
 /// author : Benjamin Audurier (Subatech)
 
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.cxx b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.cxx
index 6b9ee2b..244598e 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.cxx
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.cxx
@@ -13,12 +13,6 @@
  * provided "as is" without express or implied warranty.                  *
  **************************************************************************/
 
-///
-/// Class to deal with Spectra after the fitting procedure.
-///
-/// author: Benjamin Audurier (Subatech)
-///
-
 #include "AliAnalysisMuMuSpectraCapsulePbPb.h"
 
 ClassImp(AliAnalysisMuMuSpectraCapsulePbPb)
@@ -145,10 +139,9 @@ AliAnalysisMuMuSpectraCapsulePbPb::~AliAnalysisMuMuSpectraCapsulePbPb()
 //_____________________________________________________________________________
 TGraphErrors* AliAnalysisMuMuSpectraCapsulePbPb::ComputeYield( const char* what, const TH1* histo, const char* sResName)
 {
-  /// Compute Yield.
-  /// Arguments :
-  ///   - what : the yield nominator, i.e NofJPsi, meanPT etc. (null by default)
-  ///   - histo : histogramme of Equivalent MinBias
+  /// @brief Compute Yield.
+  /// @argument  what  the yield nominator, i.e NofJPsi, meanPT etc. (null by default)
+  /// @argument  histo histogramme of Equivalent MinBias
 
   if(!GetSpectra() || histo==0x0|| strcmp(what,"")==1) return 0x0;
 
@@ -411,7 +404,9 @@ void AliAnalysisMuMuSpectraCapsulePbPb::DrawResults( const char* particle,const
       sigmaJpsiErr.push_back( subresult->GetErrorStat("sJPsi") );
     }
   }
-  //Configure canvas
+  // cout << "size of number og J/psi : " << NofJpsi.size() << endl;
+
+  // Configure canvas
   Int_t nx(1);
   Int_t ny(1);
   Int_t nofResult = histos->GetEntries(); // # of histo
@@ -424,16 +419,10 @@ void AliAnalysisMuMuSpectraCapsulePbPb::DrawResults( const char* particle,const
     nx = TMath::Nint((nofResult/ny) +0.6);
   }
 
-  TCanvas *c = new TCanvas("canFit", "canFit");
+  TCanvas *c = new TCanvas();
 
   // ------ Configure pad ------
   SetCanvasStyle(c);
-  // c->SetBorderMode(0);
-  // c->SetBorderSize(0);
-  // c->SetRightMargin(0.04989154);
-  // c->SetTopMargin(0.04902248);
-  // c->SetBottomMargin(0.0800598);
-  // c->SetFrameBorderMode(0);
   c->Divide(nx,ny,0,0);
   c->SetTitle(Form("%s",fSpectraName.Data()));
   c->Draw();
@@ -451,12 +440,12 @@ void AliAnalysisMuMuSpectraCapsulePbPb::DrawResults( const char* particle,const
     AliDebug(1,Form(" - subcanvas = %d",n));
     h = static_cast<TH1*>(histos->At(n));
     if (h){
-      ++n;
+      n++;
       c->cd(n);// got to pad
 
       // ---- Configure histo ----
       Double_t scale = (h->GetNbinsX())/(h->GetXaxis()->GetXmax()-h->GetXaxis()->GetXmin());
-      h->GetXaxis()->SetRangeUser(2.2,4.7);
+      h->GetXaxis()->SetRangeUser(1.,6.);
       h->GetXaxis()->SetTitleOffset(1.1);
       h->SetMinimum(1);
       h->GetXaxis()->SetLabelFont(42);
@@ -500,7 +489,6 @@ void AliAnalysisMuMuSpectraCapsulePbPb::DrawResults( const char* particle,const
       if(f3) f3->DrawCopy("same");
       if(f4) f4->DrawCopy("same");
 
-
       TLegend* leg = new TLegend(0.5209804,0.2662884,0.7326179,0.7057458);
       leg->SetTextSize(0.05);
 
@@ -523,13 +511,24 @@ void AliAnalysisMuMuSpectraCapsulePbPb::DrawResults( const char* particle,const
       pt->SetTextSize(0.058);
       // pt->AddText("ALICE Performance 20/08/2016 ");
       // pt->AddText("pp #sqrt{#it{s}} = 5.02 TeV, L_{int} = 109 #mub^{-1}");
-      if(BinType.Contains("PT")){
-        if (n & 1)pt->AddText(Form(" %.0f < #it{p}_{T } < %.0f GeV/#it{c}",BinRange[n-1],BinRange[n]));
+
+      if(BinType.CompareTo("PSI-YVSPT-2DBIN1")==0){
+        // if (n == 1)pt->AddText(Form(" %.0f < #it{p}_{T } < %.0f GeV/#it{c}",BinRange[n-1],BinRange[n]));
+        // else pt->AddText(Form(" %.0f < #it{p}_{T } < %.0f GeV/#it{c}^{2}",BinRange[n],BinRange[n+1]));
+        pt->AddText(Form("3.25 < #it{y} < 4"));
+      }
+      else if(BinType.CompareTo("PSI-YVSPT-2DBIN2")==0){
+        // if (n == 1)pt->AddText(Form(" %.0f < #it{p}_{T } < %.0f GeV/#it{c}",BinRange[n-1],BinRange[n]));
+        // else pt->AddText(Form(" %.0f < #it{p}_{T } < %.0f GeV/#it{c}^{2}",BinRange[n],BinRange[n+1]));
+        pt->AddText(Form("2.5 < #it{y} < 3.25"));
+      }
+      else if(BinType.CompareTo("PSI-PT")==0){
+        if (n == 1)pt->AddText(Form(" %.0f < #it{p}_{T } < %.0f GeV/#it{c}",BinRange[n-1],BinRange[n]));
         else pt->AddText(Form(" %.0f < #it{p}_{T } < %.0f GeV/#it{c}^{2}",BinRange[n],BinRange[n+1]));
         pt->AddText(Form("2.5 < #it{y} < 4"));
       }
-      else if(BinType.Contains("Y")){
-        if (n & 1)pt->AddText(Form(" 0 < #it{p}_{T } < 12 GeV/#it{c}^{2}, %.0f < #it{y} < %.0f",BinRange[n-1],BinRange[n]));
+      else if(BinType.CompareTo("PSI-Y")==0){
+        if (n == 1)pt->AddText(Form(" 0 < #it{p}_{T } < 12 GeV/#it{c}^{2}, %.0f < #it{y} < %.0f",BinRange[n-1],BinRange[n]));
         else pt->AddText(Form(" 0 < #it{p}_{T } < 12 GeV/#it{c}^{2}, %.0f < #it{y} < %.0f",BinRange[n],BinRange[n+1]));
         pt->AddText(Form(" 0 < #it{p}_{T } < 12 GeV/#it{c}^{2}"));
       }
@@ -865,7 +864,6 @@ Bool_t AliAnalysisMuMuSpectraCapsulePbPb::ComputeRAA(TString sbin, Double_t numA
     //Stat error
     numArray[5] = numArray[4] * AliAnalysisMuMuResult::ErrorAB(numArray[0],numArray[1],fConstArray[8],fConstArray[9]);
     //                               signal
-
     //Corr error
     numArray[6]        =  TMath::Sqrt(
     MCParamError       *MCParamError             // MC input (%)
@@ -887,7 +885,6 @@ Bool_t AliAnalysisMuMuSpectraCapsulePbPb::ComputeRAA(TString sbin, Double_t numA
     AliError("Unowned bin type... I Told you !");
     return kFALSE;
   }
-
  return kTRUE;
 }
 
diff --git a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.h b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.h
index 639bb6c..ac67606 100644
--- a/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.h
+++ b/PWG/muondep/AliAnalysisMuMuSpectraCapsulePbPb.h
@@ -9,7 +9,8 @@
 // $Id$
 
 ///
-/// AliAnalysisMuMuSpectraCapsulePbPb : helper class to deal with results stored in a spectra with PbPb methods.
+/// @class AliAnalysisMuMuSpectraCapsulePbPb
+/// @brief helper class to deal with results stored in a spectra with PbPb methods.
 ///
 /// author : Benjamin Audurier (Subatech)
 
diff --git a/doxygen/Doxyfile.in b/doxygen/Doxyfile.in
index 033948a..974f829 100644
--- a/doxygen/Doxyfile.in
+++ b/doxygen/Doxyfile.in
@@ -799,6 +799,8 @@ INPUT                  = @CMAKE_SOURCE_DIR@/doxygen \
                          @CMAKE_SOURCE_DIR@/PWG/EMCAL/EMCALbase \
                          @CMAKE_SOURCE_DIR@/PWG/EMCAL/EMCALtrigger \
                          @CMAKE_SOURCE_DIR@/PWG/EMCAL/EMCALtasks \
+                         @CMAKE_SOURCE_DIR@/PWG/muon \
+                         @CMAKE_SOURCE_DIR@/PWG/muondep \
                          @CMAKE_SOURCE_DIR@/PWG/JETFW \
                          @CMAKE_SOURCE_DIR@/PWG/Tools \
                          @CMAKE_SOURCE_DIR@/PWGHF \
